{"ast":null,"code":"var at,\n    // The index of the current character\nch,\n    // The current character\nescapee = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n},\n    text,\n    error = function (m) {\n  // Call error when something is wrong.\n  throw {\n    name: 'SyntaxError',\n    message: m,\n    at: at,\n    text: text\n  };\n},\n    next = function (c) {\n  // If a c parameter is provided, verify that it matches the current character.\n  if (c && c !== ch) {\n    error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n  } // Get the next character. When there are no more characters,\n  // return the empty string.\n\n\n  ch = text.charAt(at);\n  at += 1;\n  return ch;\n},\n    number = function () {\n  // Parse a number value.\n  var number,\n      string = '';\n\n  if (ch === '-') {\n    string = '-';\n    next('-');\n  }\n\n  while (ch >= '0' && ch <= '9') {\n    string += ch;\n    next();\n  }\n\n  if (ch === '.') {\n    string += '.';\n\n    while (next() && ch >= '0' && ch <= '9') {\n      string += ch;\n    }\n  }\n\n  if (ch === 'e' || ch === 'E') {\n    string += ch;\n    next();\n\n    if (ch === '-' || ch === '+') {\n      string += ch;\n      next();\n    }\n\n    while (ch >= '0' && ch <= '9') {\n      string += ch;\n      next();\n    }\n  }\n\n  number = +string;\n\n  if (!isFinite(number)) {\n    error(\"Bad number\");\n  } else {\n    return number;\n  }\n},\n    string = function () {\n  // Parse a string value.\n  var hex,\n      i,\n      string = '',\n      uffff; // When parsing for string values, we must look for \" and \\ characters.\n\n  if (ch === '\"') {\n    while (next()) {\n      if (ch === '\"') {\n        next();\n        return string;\n      } else if (ch === '\\\\') {\n        next();\n\n        if (ch === 'u') {\n          uffff = 0;\n\n          for (i = 0; i < 4; i += 1) {\n            hex = parseInt(next(), 16);\n\n            if (!isFinite(hex)) {\n              break;\n            }\n\n            uffff = uffff * 16 + hex;\n          }\n\n          string += String.fromCharCode(uffff);\n        } else if (typeof escapee[ch] === 'string') {\n          string += escapee[ch];\n        } else {\n          break;\n        }\n      } else {\n        string += ch;\n      }\n    }\n  }\n\n  error(\"Bad string\");\n},\n    white = function () {\n  // Skip whitespace.\n  while (ch && ch <= ' ') {\n    next();\n  }\n},\n    word = function () {\n  // true, false, or null.\n  switch (ch) {\n    case 't':\n      next('t');\n      next('r');\n      next('u');\n      next('e');\n      return true;\n\n    case 'f':\n      next('f');\n      next('a');\n      next('l');\n      next('s');\n      next('e');\n      return false;\n\n    case 'n':\n      next('n');\n      next('u');\n      next('l');\n      next('l');\n      return null;\n  }\n\n  error(\"Unexpected '\" + ch + \"'\");\n},\n    value,\n    // Place holder for the value function.\narray = function () {\n  // Parse an array value.\n  var array = [];\n\n  if (ch === '[') {\n    next('[');\n    white();\n\n    if (ch === ']') {\n      next(']');\n      return array; // empty array\n    }\n\n    while (ch) {\n      array.push(value());\n      white();\n\n      if (ch === ']') {\n        next(']');\n        return array;\n      }\n\n      next(',');\n      white();\n    }\n  }\n\n  error(\"Bad array\");\n},\n    object = function () {\n  // Parse an object value.\n  var key,\n      object = {};\n\n  if (ch === '{') {\n    next('{');\n    white();\n\n    if (ch === '}') {\n      next('}');\n      return object; // empty object\n    }\n\n    while (ch) {\n      key = string();\n      white();\n      next(':');\n\n      if (Object.hasOwnProperty.call(object, key)) {\n        error('Duplicate key \"' + key + '\"');\n      }\n\n      object[key] = value();\n      white();\n\n      if (ch === '}') {\n        next('}');\n        return object;\n      }\n\n      next(',');\n      white();\n    }\n  }\n\n  error(\"Bad object\");\n};\n\nvalue = function () {\n  // Parse a JSON value. It could be an object, an array, a string, a number,\n  // or a word.\n  white();\n\n  switch (ch) {\n    case '{':\n      return object();\n\n    case '[':\n      return array();\n\n    case '\"':\n      return string();\n\n    case '-':\n      return number();\n\n    default:\n      return ch >= '0' && ch <= '9' ? number() : word();\n  }\n}; // Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\n\nmodule.exports = function (source, reviver) {\n  var result;\n  text = source;\n  at = 0;\n  ch = ' ';\n  result = value();\n  white();\n\n  if (ch) {\n    error(\"Syntax error\");\n  } // If there is a reviver function, we recursively walk the new structure,\n  // passing each name/value pair to the reviver function for possible\n  // transformation, starting with a temporary root object that holds the result\n  // in an empty key. If there is not a reviver function, we simply return the\n  // result.\n\n\n  return typeof reviver === 'function' ? function walk(holder, key) {\n    var k,\n        v,\n        value = holder[key];\n\n    if (value && typeof value === 'object') {\n      for (k in value) {\n        if (Object.prototype.hasOwnProperty.call(value, k)) {\n          v = walk(value, k);\n\n          if (v !== undefined) {\n            value[k] = v;\n          } else {\n            delete value[k];\n          }\n        }\n      }\n    }\n\n    return reviver.call(holder, key, value);\n  }({\n    '': result\n  }, '') : result;\n};","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/jsonify/lib/parse.js"],"names":["at","ch","escapee","b","f","n","r","t","text","error","m","name","message","next","c","charAt","number","string","isFinite","hex","i","uffff","parseInt","String","fromCharCode","white","word","value","array","push","object","key","Object","hasOwnProperty","call","module","exports","source","reviver","result","walk","holder","k","v","prototype","undefined"],"mappings":"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","sourcesContent":["var at, // The index of the current character\n    ch, // The current character\n    escapee = {\n        '\"':  '\"',\n        '\\\\': '\\\\',\n        '/':  '/',\n        b:    '\\b',\n        f:    '\\f',\n        n:    '\\n',\n        r:    '\\r',\n        t:    '\\t'\n    },\n    text,\n\n    error = function (m) {\n        // Call error when something is wrong.\n        throw {\n            name:    'SyntaxError',\n            message: m,\n            at:      at,\n            text:    text\n        };\n    },\n    \n    next = function (c) {\n        // If a c parameter is provided, verify that it matches the current character.\n        if (c && c !== ch) {\n            error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n        }\n        \n        // Get the next character. When there are no more characters,\n        // return the empty string.\n        \n        ch = text.charAt(at);\n        at += 1;\n        return ch;\n    },\n    \n    number = function () {\n        // Parse a number value.\n        var number,\n            string = '';\n        \n        if (ch === '-') {\n            string = '-';\n            next('-');\n        }\n        while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n        }\n        if (ch === '.') {\n            string += '.';\n            while (next() && ch >= '0' && ch <= '9') {\n                string += ch;\n            }\n        }\n        if (ch === 'e' || ch === 'E') {\n            string += ch;\n            next();\n            if (ch === '-' || ch === '+') {\n                string += ch;\n                next();\n            }\n            while (ch >= '0' && ch <= '9') {\n                string += ch;\n                next();\n            }\n        }\n        number = +string;\n        if (!isFinite(number)) {\n            error(\"Bad number\");\n        } else {\n            return number;\n        }\n    },\n    \n    string = function () {\n        // Parse a string value.\n        var hex,\n            i,\n            string = '',\n            uffff;\n        \n        // When parsing for string values, we must look for \" and \\ characters.\n        if (ch === '\"') {\n            while (next()) {\n                if (ch === '\"') {\n                    next();\n                    return string;\n                } else if (ch === '\\\\') {\n                    next();\n                    if (ch === 'u') {\n                        uffff = 0;\n                        for (i = 0; i < 4; i += 1) {\n                            hex = parseInt(next(), 16);\n                            if (!isFinite(hex)) {\n                                break;\n                            }\n                            uffff = uffff * 16 + hex;\n                        }\n                        string += String.fromCharCode(uffff);\n                    } else if (typeof escapee[ch] === 'string') {\n                        string += escapee[ch];\n                    } else {\n                        break;\n                    }\n                } else {\n                    string += ch;\n                }\n            }\n        }\n        error(\"Bad string\");\n    },\n\n    white = function () {\n\n// Skip whitespace.\n\n        while (ch && ch <= ' ') {\n            next();\n        }\n    },\n\n    word = function () {\n\n// true, false, or null.\n\n        switch (ch) {\n        case 't':\n            next('t');\n            next('r');\n            next('u');\n            next('e');\n            return true;\n        case 'f':\n            next('f');\n            next('a');\n            next('l');\n            next('s');\n            next('e');\n            return false;\n        case 'n':\n            next('n');\n            next('u');\n            next('l');\n            next('l');\n            return null;\n        }\n        error(\"Unexpected '\" + ch + \"'\");\n    },\n\n    value,  // Place holder for the value function.\n\n    array = function () {\n\n// Parse an array value.\n\n        var array = [];\n\n        if (ch === '[') {\n            next('[');\n            white();\n            if (ch === ']') {\n                next(']');\n                return array;   // empty array\n            }\n            while (ch) {\n                array.push(value());\n                white();\n                if (ch === ']') {\n                    next(']');\n                    return array;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad array\");\n    },\n\n    object = function () {\n\n// Parse an object value.\n\n        var key,\n            object = {};\n\n        if (ch === '{') {\n            next('{');\n            white();\n            if (ch === '}') {\n                next('}');\n                return object;   // empty object\n            }\n            while (ch) {\n                key = string();\n                white();\n                next(':');\n                if (Object.hasOwnProperty.call(object, key)) {\n                    error('Duplicate key \"' + key + '\"');\n                }\n                object[key] = value();\n                white();\n                if (ch === '}') {\n                    next('}');\n                    return object;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad object\");\n    };\n\nvalue = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n    white();\n    switch (ch) {\n    case '{':\n        return object();\n    case '[':\n        return array();\n    case '\"':\n        return string();\n    case '-':\n        return number();\n    default:\n        return ch >= '0' && ch <= '9' ? number() : word();\n    }\n};\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\nmodule.exports = function (source, reviver) {\n    var result;\n    \n    text = source;\n    at = 0;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n        error(\"Syntax error\");\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function' ? (function walk(holder, key) {\n        var k, v, value = holder[key];\n        if (value && typeof value === 'object') {\n            for (k in value) {\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\n                    v = walk(value, k);\n                    if (v !== undefined) {\n                        value[k] = v;\n                    } else {\n                        delete value[k];\n                    }\n                }\n            }\n        }\n        return reviver.call(holder, key, value);\n    }({'': result}, '')) : result;\n};\n"]},"metadata":{},"sourceType":"script"}