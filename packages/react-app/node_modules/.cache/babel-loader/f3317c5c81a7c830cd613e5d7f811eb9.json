{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateJsonRpcError = exports.getErrorByCode = exports.getError = exports.isValidErrorCode = exports.isReservedErrorCode = exports.isServerErrorCode = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nfunction isServerErrorCode(code) {\n  return code <= constants_1.SERVER_ERROR_CODE_RANGE[0] && code >= constants_1.SERVER_ERROR_CODE_RANGE[1];\n}\n\nexports.isServerErrorCode = isServerErrorCode;\n\nfunction isReservedErrorCode(code) {\n  return constants_1.RESERVED_ERROR_CODES.includes(code);\n}\n\nexports.isReservedErrorCode = isReservedErrorCode;\n\nfunction isValidErrorCode(code) {\n  return isServerErrorCode(code) || isReservedErrorCode(code);\n}\n\nexports.isValidErrorCode = isValidErrorCode;\n\nfunction getError(type) {\n  if (!Object.keys(constants_1.STANDARD_ERROR_MAP).includes(type)) {\n    return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n  }\n\n  return constants_1.STANDARD_ERROR_MAP[type];\n}\n\nexports.getError = getError;\n\nfunction getErrorByCode(code) {\n  const match = Object.values(constants_1.STANDARD_ERROR_MAP).find(e => e.code === code);\n\n  if (!match) {\n    return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n  }\n\n  return match;\n}\n\nexports.getErrorByCode = getErrorByCode;\n\nfunction validateJsonRpcError(response) {\n  if (typeof response.error.code === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing code for JSON-RPC error\"\n    };\n  }\n\n  if (typeof response.error.message === \"undefined\") {\n    return {\n      valid: false,\n      error: \"Missing message for JSON-RPC error\"\n    };\n  }\n\n  if (!isValidErrorCode(response.error.code)) {\n    return {\n      valid: false,\n      error: `Invalid error code for JSON-RPC error code: ${response.error.code}`\n    };\n  }\n\n  if (isReservedErrorCode(response.error.code)) {\n    const error = getErrorByCode(response.error.code);\n\n    if (error.message !== constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR].message && response.error.message === error.message) {\n      return {\n        valid: false,\n        error: `Invalid error message for JSON-RPC error code: ${response.error.code}`\n      };\n    }\n  }\n\n  return {\n    valid: true\n  };\n}\n\nexports.validateJsonRpcError = validateJsonRpcError;","map":{"version":3,"sources":["../../src/error.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAQA,SAAgB,iBAAhB,CAAkC,IAAlC,EAA8C;AAC5C,SAAO,IAAI,IAAI,WAAA,CAAA,uBAAA,CAAwB,CAAxB,CAAR,IAAsC,IAAI,IAAI,WAAA,CAAA,uBAAA,CAAwB,CAAxB,CAArD;AACD;;AAFD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAIA,SAAgB,mBAAhB,CAAoC,IAApC,EAAgD;AAC9C,SAAO,WAAA,CAAA,oBAAA,CAAqB,QAArB,CAA8B,IAA9B,CAAP;AACD;;AAFD,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAIA,SAAgB,gBAAhB,CAAiC,IAAjC,EAA6C;AAC3C,SAAO,iBAAiB,CAAC,IAAD,CAAjB,IAA2B,mBAAmB,CAAC,IAAD,CAArD;AACD;;AAFD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAIA,SAAgB,QAAhB,CAAyB,IAAzB,EAAqC;AACnC,MAAI,CAAC,MAAM,CAAC,IAAP,CAAY,WAAA,CAAA,kBAAZ,EAAgC,QAAhC,CAAyC,IAAzC,CAAL,EAAqD;AACnD,WAAO,WAAA,CAAA,kBAAA,CAAmB,WAAA,CAAA,cAAnB,CAAP;AACD;;AACD,SAAO,WAAA,CAAA,kBAAA,CAAmB,IAAnB,CAAP;AACD;;AALD,OAAA,CAAA,QAAA,GAAA,QAAA;;AAOA,SAAgB,cAAhB,CAA+B,IAA/B,EAA2C;AACzC,QAAM,KAAK,GAAG,MAAM,CAAC,MAAP,CAAc,WAAA,CAAA,kBAAd,EAAkC,IAAlC,CAAuC,CAAC,IAAI,CAAC,CAAC,IAAF,KAAW,IAAvD,CAAd;;AACA,MAAI,CAAC,KAAL,EAAY;AACV,WAAO,WAAA,CAAA,kBAAA,CAAmB,WAAA,CAAA,cAAnB,CAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAND,OAAA,CAAA,cAAA,GAAA,cAAA;;AAQA,SAAgB,oBAAhB,CAAqC,QAArC,EAA2D;AACzD,MAAI,OAAO,QAAQ,CAAC,KAAT,CAAe,IAAtB,KAA+B,WAAnC,EAAgD;AAC9C,WAAO;AAAE,MAAA,KAAK,EAAE,KAAT;AAAgB,MAAA,KAAK,EAAE;AAAvB,KAAP;AACD;;AACD,MAAI,OAAO,QAAQ,CAAC,KAAT,CAAe,OAAtB,KAAkC,WAAtC,EAAmD;AACjD,WAAO;AAAE,MAAA,KAAK,EAAE,KAAT;AAAgB,MAAA,KAAK,EAAE;AAAvB,KAAP;AACD;;AACD,MAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAT,CAAe,IAAhB,CAArB,EAA4C;AAC1C,WAAO;AACL,MAAA,KAAK,EAAE,KADF;AAEL,MAAA,KAAK,EAAE,+CAA+C,QAAQ,CAAC,KAAT,CAAe,IAAI;AAFpE,KAAP;AAID;;AACD,MAAI,mBAAmB,CAAC,QAAQ,CAAC,KAAT,CAAe,IAAhB,CAAvB,EAA8C;AAC5C,UAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,KAAT,CAAe,IAAhB,CAA5B;;AACA,QACE,KAAK,CAAC,OAAN,KAAkB,WAAA,CAAA,kBAAA,CAAmB,WAAA,CAAA,cAAnB,EAAmC,OAArD,IACA,QAAQ,CAAC,KAAT,CAAe,OAAf,KAA2B,KAAK,CAAC,OAFnC,EAGE;AACA,aAAO;AACL,QAAA,KAAK,EAAE,KADF;AAEL,QAAA,KAAK,EAAE,kDAAkD,QAAQ,CAAC,KAAT,CAAe,IAAI;AAFvE,OAAP;AAID;AACF;;AACD,SAAO;AAAE,IAAA,KAAK,EAAE;AAAT,GAAP;AACD;;AA1BD,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateJsonRpcError = exports.getErrorByCode = exports.getError = exports.isValidErrorCode = exports.isReservedErrorCode = exports.isServerErrorCode = void 0;\nconst constants_1 = require(\"./constants\");\nfunction isServerErrorCode(code) {\n    return code <= constants_1.SERVER_ERROR_CODE_RANGE[0] && code >= constants_1.SERVER_ERROR_CODE_RANGE[1];\n}\nexports.isServerErrorCode = isServerErrorCode;\nfunction isReservedErrorCode(code) {\n    return constants_1.RESERVED_ERROR_CODES.includes(code);\n}\nexports.isReservedErrorCode = isReservedErrorCode;\nfunction isValidErrorCode(code) {\n    return isServerErrorCode(code) || isReservedErrorCode(code);\n}\nexports.isValidErrorCode = isValidErrorCode;\nfunction getError(type) {\n    if (!Object.keys(constants_1.STANDARD_ERROR_MAP).includes(type)) {\n        return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n    }\n    return constants_1.STANDARD_ERROR_MAP[type];\n}\nexports.getError = getError;\nfunction getErrorByCode(code) {\n    const match = Object.values(constants_1.STANDARD_ERROR_MAP).find(e => e.code === code);\n    if (!match) {\n        return constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR];\n    }\n    return match;\n}\nexports.getErrorByCode = getErrorByCode;\nfunction validateJsonRpcError(response) {\n    if (typeof response.error.code === \"undefined\") {\n        return { valid: false, error: \"Missing code for JSON-RPC error\" };\n    }\n    if (typeof response.error.message === \"undefined\") {\n        return { valid: false, error: \"Missing message for JSON-RPC error\" };\n    }\n    if (!isValidErrorCode(response.error.code)) {\n        return {\n            valid: false,\n            error: `Invalid error code for JSON-RPC error code: ${response.error.code}`,\n        };\n    }\n    if (isReservedErrorCode(response.error.code)) {\n        const error = getErrorByCode(response.error.code);\n        if (error.message !== constants_1.STANDARD_ERROR_MAP[constants_1.INTERNAL_ERROR].message &&\n            response.error.message === error.message) {\n            return {\n                valid: false,\n                error: `Invalid error message for JSON-RPC error code: ${response.error.code}`,\n            };\n        }\n    }\n    return { valid: true };\n}\nexports.validateJsonRpcError = validateJsonRpcError;\n//# sourceMappingURL=error.js.map"]},"metadata":{},"sourceType":"script"}