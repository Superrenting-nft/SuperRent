{"ast":null,"code":"/* eslint-disable import/no-dynamic-require */\n\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n/*\n  when you want to load a local contract's abi but supply a custom address\n*/\n\n/*\n  ~ What it does? ~\n\n  Enables you to load a local contract with custom address\n\n  ~ How can I use? ~\n\n  const customContract = useCustomContractLoader(localProvider, \"YourContract\", customAddress)\n\n  ~ Features ~\n\n  - Specify the localProvider\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the customAddress of your contract\n*/\n\nexport default function useCustomContractLoader(provider, contractName, address) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if (typeof provider !== \"undefined\" && contractName && address) {\n        try {\n          // we need to check to see if this provider has a signer or not\n          let signer;\n          const accounts = await provider.listAccounts();\n\n          if (accounts && accounts.length > 0) {\n            signer = provider.getSigner();\n          } else {\n            signer = provider;\n          }\n\n          const customContract = new Contract(address, require(`../contracts/${contractName}.abi.js`), signer);\n\n          try {\n            customContract.bytecode = require(`../contracts/${contractName}.bytecode.js`);\n          } catch (e) {\n            console.log(e);\n          }\n\n          setContract(customContract);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n\n    loadContract();\n  }, [provider, contractName, address]);\n  return contract;\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/hooks/CustomContractLoader.js"],"names":["Contract","useState","useEffect","useCustomContractLoader","provider","contractName","address","contract","setContract","loadContract","signer","accounts","listAccounts","length","getSigner","customContract","require","bytecode","e","console","log"],"mappings":"AAAA;;AACA;AACA,SAASA,QAAT,QAAyB,0BAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,uBAAT,CAAiCC,QAAjC,EAA2CC,YAA3C,EAAyDC,OAAzD,EAAkE;AAC/E,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,EAAxC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeO,YAAf,GAA8B;AAC5B,UAAI,OAAOL,QAAP,KAAoB,WAApB,IAAmCC,YAAnC,IAAmDC,OAAvD,EAAgE;AAC9D,YAAI;AACF;AACA,cAAII,MAAJ;AACA,gBAAMC,QAAQ,GAAG,MAAMP,QAAQ,CAACQ,YAAT,EAAvB;;AACA,cAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAlC,EAAqC;AACnCH,YAAAA,MAAM,GAAGN,QAAQ,CAACU,SAAT,EAAT;AACD,WAFD,MAEO;AACLJ,YAAAA,MAAM,GAAGN,QAAT;AACD;;AAED,gBAAMW,cAAc,GAAG,IAAIf,QAAJ,CAAaM,OAAb,EAAsBU,OAAO,CAAE,gBAAeX,YAAa,SAA9B,CAA7B,EAAsEK,MAAtE,CAAvB;;AACA,cAAI;AACFK,YAAAA,cAAc,CAACE,QAAf,GAA0BD,OAAO,CAAE,gBAAeX,YAAa,cAA9B,CAAjC;AACD,WAFD,CAEE,OAAOa,CAAP,EAAU;AACVC,YAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;;AAEDV,UAAAA,WAAW,CAACO,cAAD,CAAX;AACD,SAlBD,CAkBE,OAAOG,CAAP,EAAU;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,CAAzC;AACD;AACF;AACF;;AACDT,IAAAA,YAAY;AACb,GA3BQ,EA2BN,CAACL,QAAD,EAAWC,YAAX,EAAyBC,OAAzB,CA3BM,CAAT;AA4BA,SAAOC,QAAP;AACD","sourcesContent":["/* eslint-disable import/no-dynamic-require */\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n\n/*\n  when you want to load a local contract's abi but supply a custom address\n*/\n\n/*\n  ~ What it does? ~\n\n  Enables you to load a local contract with custom address\n\n  ~ How can I use? ~\n\n  const customContract = useCustomContractLoader(localProvider, \"YourContract\", customAddress)\n\n  ~ Features ~\n\n  - Specify the localProvider\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the customAddress of your contract\n*/\n\nexport default function useCustomContractLoader(provider, contractName, address) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if (typeof provider !== \"undefined\" && contractName && address) {\n        try {\n          // we need to check to see if this provider has a signer or not\n          let signer;\n          const accounts = await provider.listAccounts();\n          if (accounts && accounts.length > 0) {\n            signer = provider.getSigner();\n          } else {\n            signer = provider;\n          }\n\n          const customContract = new Contract(address, require(`../contracts/${contractName}.abi.js`), signer);\n          try {\n            customContract.bytecode = require(`../contracts/${contractName}.bytecode.js`);\n          } catch (e) {\n            console.log(e);\n          }\n\n          setContract(customContract);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContract();\n  }, [provider, contractName, address]);\n  return contract;\n}\n"]},"metadata":{},"sourceType":"module"}