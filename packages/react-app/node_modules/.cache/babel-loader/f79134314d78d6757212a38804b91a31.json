{"ast":null,"code":"const ProviderSubprovider = require('./json-rpc-engine-middleware');\n\nconst createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager');\n\nclass SubscriptionsSubprovider extends ProviderSubprovider {\n  constructor() {\n    super(({\n      blockTracker,\n      provider,\n      engine\n    }) => {\n      const {\n        events,\n        middleware\n      } = createSubscriptionManager({\n        blockTracker,\n        provider\n      }); // forward subscription events on the engine\n\n      events.on('notification', data => engine.emit('data', null, data)); // return the subscription install/remove middleware\n\n      return middleware;\n    });\n  }\n\n}\n\nmodule.exports = SubscriptionsSubprovider;","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/web3-provider-engine/subproviders/subscriptions.js"],"names":["ProviderSubprovider","require","createSubscriptionManager","SubscriptionsSubprovider","constructor","blockTracker","provider","engine","events","middleware","on","data","emit","module","exports"],"mappings":"AAAA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,8BAAD,CAAnC;;AACA,MAAMC,yBAAyB,GAAGD,OAAO,CAAC,0CAAD,CAAzC;;AAEA,MAAME,wBAAN,SAAuCH,mBAAvC,CAA2D;AACzDI,EAAAA,WAAW,GAAG;AACZ,UAAM,CAAC;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA,QAAhB;AAA0BC,MAAAA;AAA1B,KAAD,KAAwC;AAC5C,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAyBP,yBAAyB,CAAC;AAAEG,QAAAA,YAAF;AAAgBC,QAAAA;AAAhB,OAAD,CAAxD,CAD4C,CAE5C;;AACAE,MAAAA,MAAM,CAACE,EAAP,CAAU,cAAV,EAA2BC,IAAD,IAAUJ,MAAM,CAACK,IAAP,CAAY,MAAZ,EAAoB,IAApB,EAA0BD,IAA1B,CAApC,EAH4C,CAI5C;;AACA,aAAOF,UAAP;AACD,KAND;AAOD;;AATwD;;AAY3DI,MAAM,CAACC,OAAP,GAAiBX,wBAAjB","sourcesContent":["const ProviderSubprovider = require('./json-rpc-engine-middleware')\nconst createSubscriptionManager = require('eth-json-rpc-filters/subscriptionManager')\n\nclass SubscriptionsSubprovider extends ProviderSubprovider {\n  constructor() {\n    super(({ blockTracker, provider, engine }) => {\n      const { events, middleware } = createSubscriptionManager({ blockTracker, provider })\n      // forward subscription events on the engine\n      events.on('notification', (data) => engine.emit('data', null, data))\n      // return the subscription install/remove middleware\n      return middleware\n    })\n  }\n}\n\nmodule.exports = SubscriptionsSubprovider\n"]},"metadata":{},"sourceType":"script"}