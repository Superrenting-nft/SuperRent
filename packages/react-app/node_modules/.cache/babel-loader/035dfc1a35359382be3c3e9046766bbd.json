{"ast":null,"code":"const EthQuery = require('eth-query');\n\nconst pify = require('pify');\n\nconst SafeEventEmitter = require('safe-event-emitter');\n\nconst sec = 1000;\n\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue;\n\nconst blockTrackerEvents = ['sync', 'latest'];\n\nclass BaseBlockTracker extends SafeEventEmitter {\n  //\n  // public\n  //\n  constructor(opts = {}) {\n    super(); // config\n\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec; // state\n\n    this._blockResetTimeout;\n    this._currentBlock = null;\n    this._isRunning = false; // bind functions for internal use\n\n    this._onNewListener = this._onNewListener.bind(this);\n    this._onRemoveListener = this._onRemoveListener.bind(this);\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this); // listen for handler changes\n\n    this._setupInternalEvents();\n  }\n\n  isRunning() {\n    return this._isRunning;\n  }\n\n  getCurrentBlock() {\n    return this._currentBlock;\n  }\n\n  async getLatestBlock() {\n    // return if available\n    if (this._currentBlock) return this._currentBlock; // wait for a new latest block\n\n    const latestBlock = await new Promise(resolve => this.once('latest', resolve)); // return newly set current block\n\n    return latestBlock;\n  } // dont allow module consumer to remove our internal event listeners\n\n\n  removeAllListeners(eventName) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName);\n    } else {\n      super.removeAllListeners();\n    } // re-add internal events\n\n\n    this._setupInternalEvents(); // trigger stop check just in case\n\n\n    this._onRemoveListener();\n  } //\n  // to be implemented in subclass\n  //\n\n\n  _start() {// default behavior is noop\n  }\n\n  _end() {// default behavior is noop\n  } //\n  // private\n  //\n\n\n  _setupInternalEvents() {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener);\n    this.removeListener('removeListener', this._onRemoveListener); // then add them\n\n    this.on('newListener', this._onNewListener);\n    this.on('removeListener', this._onRemoveListener);\n  }\n\n  _onNewListener(eventName, handler) {\n    // `newListener` is called *before* the listener is added\n    if (!blockTrackerEvents.includes(eventName)) return;\n\n    this._maybeStart();\n  }\n\n  _onRemoveListener(eventName, handler) {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) return;\n\n    this._maybeEnd();\n  }\n\n  _maybeStart() {\n    if (this._isRunning) return;\n    this._isRunning = true; // cancel setting latest block to stale\n\n    this._cancelBlockResetTimeout();\n\n    this._start();\n  }\n\n  _maybeEnd() {\n    if (!this._isRunning) return;\n    this._isRunning = false;\n\n    this._setupBlockResetTimeout();\n\n    this._end();\n  }\n\n  _getBlockTrackerEventCount() {\n    return blockTrackerEvents.map(eventName => this.listenerCount(eventName)).reduce(calculateSum);\n  }\n\n  _newPotentialLatest(newBlock) {\n    const currentBlock = this._currentBlock; // only update if blok number is higher\n\n    if (currentBlock && hexToInt(newBlock) <= hexToInt(currentBlock)) return;\n\n    this._setCurrentBlock(newBlock);\n  }\n\n  _setCurrentBlock(newBlock) {\n    const oldBlock = this._currentBlock;\n    this._currentBlock = newBlock;\n    this.emit('latest', newBlock);\n    this.emit('sync', {\n      oldBlock,\n      newBlock\n    });\n  }\n\n  _setupBlockResetTimeout() {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout(); // clear latest block when stale\n\n\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration); // nodejs - dont hold process open\n\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref();\n    }\n  }\n\n  _cancelBlockResetTimeout() {\n    clearTimeout(this._blockResetTimeout);\n  }\n\n  _resetCurrentBlock() {\n    this._currentBlock = null;\n  }\n\n}\n\nmodule.exports = BaseBlockTracker;\n\nfunction hexToInt(hexInt) {\n  return Number.parseInt(hexInt, 16);\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/eth-block-tracker/src/base.js"],"names":["EthQuery","require","pify","SafeEventEmitter","sec","calculateSum","accumulator","currentValue","blockTrackerEvents","BaseBlockTracker","constructor","opts","_blockResetDuration","blockResetDuration","_blockResetTimeout","_currentBlock","_isRunning","_onNewListener","bind","_onRemoveListener","_resetCurrentBlock","_setupInternalEvents","isRunning","getCurrentBlock","getLatestBlock","latestBlock","Promise","resolve","once","removeAllListeners","eventName","_start","_end","removeListener","on","handler","includes","_maybeStart","_getBlockTrackerEventCount","_maybeEnd","_cancelBlockResetTimeout","_setupBlockResetTimeout","map","listenerCount","reduce","_newPotentialLatest","newBlock","currentBlock","hexToInt","_setCurrentBlock","oldBlock","emit","setTimeout","unref","clearTimeout","module","exports","hexInt","Number","parseInt"],"mappings":"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","sourcesContent":["const EthQuery = require('eth-query')\nconst pify = require('pify')\nconst SafeEventEmitter = require('safe-event-emitter')\n\nconst sec = 1000\n\nconst calculateSum = (accumulator, currentValue) => accumulator + currentValue\nconst blockTrackerEvents = ['sync', 'latest']\n\nclass BaseBlockTracker extends SafeEventEmitter {\n\n  //\n  // public\n  //\n\n  constructor (opts = {}) {\n    super()\n    // config\n    this._blockResetDuration = opts.blockResetDuration || 20 * sec\n    // state\n    this._blockResetTimeout\n    this._currentBlock = null\n    this._isRunning = false\n    // bind functions for internal use\n    this._onNewListener = this._onNewListener.bind(this)\n    this._onRemoveListener = this._onRemoveListener.bind(this)\n    this._resetCurrentBlock = this._resetCurrentBlock.bind(this)\n    // listen for handler changes\n    this._setupInternalEvents()\n  }\n\n  isRunning () {\n    return this._isRunning\n  }\n\n  getCurrentBlock () {\n    return this._currentBlock\n  }\n\n  async getLatestBlock () {\n    // return if available\n    if (this._currentBlock) return this._currentBlock\n    // wait for a new latest block\n    const latestBlock = await new Promise(resolve => this.once('latest', resolve))\n    // return newly set current block\n    return latestBlock\n  }\n\n  // dont allow module consumer to remove our internal event listeners\n  removeAllListeners (eventName) {\n    // perform default behavior, preserve fn arity\n    if (eventName) {\n      super.removeAllListeners(eventName)\n    } else {\n      super.removeAllListeners()\n    }\n    // re-add internal events\n    this._setupInternalEvents()\n    // trigger stop check just in case\n    this._onRemoveListener()\n  }\n\n  //\n  // to be implemented in subclass\n  //\n\n  _start () {\n    // default behavior is noop\n  }\n\n  _end () {\n    // default behavior is noop\n  }\n\n  //\n  // private\n  //\n\n  _setupInternalEvents () {\n    // first remove listeners for idempotence\n    this.removeListener('newListener', this._onNewListener)\n    this.removeListener('removeListener', this._onRemoveListener)\n    // then add them\n    this.on('newListener', this._onNewListener)\n    this.on('removeListener', this._onRemoveListener)\n  }\n\n  _onNewListener (eventName, handler) {\n    // `newListener` is called *before* the listener is added\n    if (!blockTrackerEvents.includes(eventName)) return\n    this._maybeStart()\n  }\n\n  _onRemoveListener (eventName, handler) {\n    // `removeListener` is called *after* the listener is removed\n    if (this._getBlockTrackerEventCount() > 0) return\n    this._maybeEnd()\n  }\n\n  _maybeStart () {\n    if (this._isRunning) return\n    this._isRunning = true\n    // cancel setting latest block to stale\n    this._cancelBlockResetTimeout()\n    this._start()\n  }\n\n  _maybeEnd () {\n    if (!this._isRunning) return\n    this._isRunning = false\n    this._setupBlockResetTimeout()\n    this._end()\n  }\n\n  _getBlockTrackerEventCount () {\n    return blockTrackerEvents\n      .map(eventName => this.listenerCount(eventName))\n      .reduce(calculateSum)\n  }\n\n  _newPotentialLatest (newBlock) {\n    const currentBlock = this._currentBlock\n    // only update if blok number is higher\n    if (currentBlock && (hexToInt(newBlock) <= hexToInt(currentBlock))) return\n    this._setCurrentBlock(newBlock)\n  }\n\n  _setCurrentBlock (newBlock) {\n    const oldBlock = this._currentBlock\n    this._currentBlock = newBlock\n    this.emit('latest', newBlock)\n    this.emit('sync', { oldBlock, newBlock })\n  }\n\n  _setupBlockResetTimeout () {\n    // clear any existing timeout\n    this._cancelBlockResetTimeout()\n    // clear latest block when stale\n    this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this._blockResetDuration)\n    // nodejs - dont hold process open\n    if (this._blockResetTimeout.unref) {\n      this._blockResetTimeout.unref()\n    }\n  }\n\n  _cancelBlockResetTimeout () {\n    clearTimeout(this._blockResetTimeout)\n  }\n\n  _resetCurrentBlock () {\n    this._currentBlock = null\n  }\n\n}\n\nmodule.exports = BaseBlockTracker\n\nfunction hexToInt(hexInt) {\n  return Number.parseInt(hexInt, 16)\n}\n"]},"metadata":{},"sourceType":"script"}