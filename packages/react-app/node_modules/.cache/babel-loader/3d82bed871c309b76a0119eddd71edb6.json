{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\n\nfunction checkError(method, error, params) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    const e = error.error;\n\n    if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n      return e.data;\n    }\n  }\n\n  let message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n\n  message = (message || \"\").toLowerCase();\n  const transaction = params.transaction || params.signedTransaction; // \"insufficient funds for gas * price + value + cost(data)\"\n\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  } // \"nonce too low\"\n\n\n  if (message.match(/nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/replacement transaction underpriced/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  throw error;\n}\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    logger.checkNew(new.target, JsonRpcSigner);\n    super();\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(this, \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n\n      return address;\n    }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(({\n      tx,\n      sender\n    }) => {\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return poll(() => {\n        return this.provider.getTransaction(hash).then(tx => {\n          if (tx === null) {\n            return undefined;\n          }\n\n          return this.provider._wrapTransaction(tx, hash);\n        });\n      }, {\n        onceBlock: this.provider\n      }).catch(error => {\n        error.transactionHash = hash;\n        throw error;\n      });\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress(); // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n\n      return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n    });\n  }\n\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n      return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n    });\n  }\n\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n\n}\n\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    logger.checkNew(new.target, JsonRpcProvider);\n    let networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n\n    super(networkOrReady); // Default URL\n\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n\n    this._nextId = 42;\n  }\n\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    });\n    return fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    });\n  }\n\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n\n        return null;\n\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n\n        return [\"eth_getLogs\", [params.filter]];\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const args = this.prepareRequest(method, params);\n\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n\n    super._startEvent(event);\n  }\n\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n\n    super._stopEvent(event);\n  } // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n\n\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n\n    checkProperties(transaction, allowed);\n    const result = {}; // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n\n    [\"gasLimit\", \"gasPrice\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      const value = hexValue(transaction[key]);\n\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      result[key] = hexlify(transaction[key]);\n    });\n    return result;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/json-rpc-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction checkError(method, error, params) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n            return e.data;\n        }\n    }\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n        message = error.error.message;\n    }\n    else if (typeof (error.body) === \"string\") {\n        message = error.body;\n    }\n    else if (typeof (error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    const transaction = params.transaction || params.signedTransaction;\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n    constructor(constructorGuard, provider, addressOrIndex) {\n        logger.checkNew(new.target, JsonRpcSigner);\n        super();\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        defineReadOnly(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n    connect(provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = shallowCopy(transaction);\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            }\n            else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return poll(() => {\n                return this.provider.getTransaction(hash).then((tx) => {\n                    if (tx === null) {\n                        return undefined;\n                    }\n                    return this.provider._wrapTransaction(tx, hash);\n                });\n            }, { onceBlock: this.provider }).catch((error) => {\n                error.transactionHash = hash;\n                throw error;\n            });\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names (in-place)\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            return yield this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        });\n    }\n    unlock(password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n    constructor(url, network) {\n        logger.checkNew(new.target, JsonRpcProvider);\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = getStatic(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            defineReadOnly(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        }\n        else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n        this._nextId = 42;\n    }\n    static defaultUrl() {\n        return \"http:/\\/localhost:8545\";\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            }\n            catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                }\n                catch (error) { }\n            }\n            if (chainId != null) {\n                const getNetwork = getStatic(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(BigNumber.from(chainId).toNumber());\n                }\n                catch (error) {\n                    return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n        return fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n    }\n    prepareRequest(method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            }\n            catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch((error) => { });\n            }\n            poll();\n            return filterId;\n        }).catch((error) => { });\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        checkProperties(transaction, allowed);\n        const result = {};\n        // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n        [\"gasLimit\", \"gasPrice\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = hexValue(transaction[key]);\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = hexlify(transaction[key]);\n        });\n        return result;\n    }\n}\n//# sourceMappingURL=json-rpc-provider.js.map"]},"metadata":{},"sourceType":"module"}