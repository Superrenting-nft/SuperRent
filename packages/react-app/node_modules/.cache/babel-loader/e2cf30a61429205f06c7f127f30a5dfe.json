{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport usePoller from \"./Poller\";\nconst DEBUG = false;\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 1777;\n\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n  usePoller(async () => {\n    if (contracts && contracts[contractName]) {\n      try {\n        let newValue;\n        if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n\n        if (args && args.length > 0) {\n          newValue = await contracts[contractName][functionName](...args);\n          if (DEBUG) console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n        } else {\n          newValue = await contracts[contractName][functionName]();\n        }\n\n        if (formatter && typeof formatter === \"function\") {\n          newValue = formatter(newValue);\n        } // console.log(\"GOT VALUE\",newValue)\n\n\n        if (newValue !== value) {\n          setValue(newValue);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, adjustPollTime, contracts && contracts[contractName]);\n  return value;\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/hooks/ContractReader.js"],"names":["useState","useEffect","usePoller","DEBUG","useContractReader","contracts","contractName","functionName","args","pollTime","formatter","onChange","adjustPollTime","value","setValue","setTimeout","bind","newValue","console","log","length","e"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,UAAtB;AAEA,MAAMC,KAAK,GAAG,KAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,iBAAT,CAA2BC,SAA3B,EAAsCC,YAAtC,EAAoDC,YAApD,EAAkEC,IAAlE,EAAwEC,QAAxE,EAAkFC,SAAlF,EAA6FC,QAA7F,EAAuG;AACpH,MAAIC,cAAc,GAAG,IAArB;;AACA,MAAIH,QAAJ,EAAc;AACZG,IAAAA,cAAc,GAAGH,QAAjB;AACD,GAFD,MAEO,IAAI,CAACA,QAAD,IAAa,OAAOD,IAAP,KAAgB,QAAjC,EAA2C;AAChD;AACAI,IAAAA,cAAc,GAAGJ,IAAjB;AACD;;AAED,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,EAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,OAAOU,QAAP,KAAoB,UAAxB,EAAoC;AAClCI,MAAAA,UAAU,CAACJ,QAAQ,CAACK,IAAT,CAAc,IAAd,EAAoBH,KAApB,CAAD,EAA6B,CAA7B,CAAV;AACD;AACF,GAJQ,EAIN,CAACA,KAAD,EAAQF,QAAR,CAJM,CAAT;AAMAT,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIG,SAAS,IAAIA,SAAS,CAACC,YAAD,CAA1B,EAA0C;AACxC,UAAI;AACF,YAAIW,QAAJ;AACA,YAAId,KAAJ,EAAWe,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBb,YAAxB,EAAsCC,YAAtC,EAAoD,WAApD,EAAiEC,IAAjE;;AACX,YAAIA,IAAI,IAAIA,IAAI,CAACY,MAAL,GAAc,CAA1B,EAA6B;AAC3BH,UAAAA,QAAQ,GAAG,MAAMZ,SAAS,CAACC,YAAD,CAAT,CAAwBC,YAAxB,EAAsC,GAAGC,IAAzC,CAAjB;AACA,cAAIL,KAAJ,EACEe,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4Bb,YAA5B,EAA0C,cAA1C,EAA0DC,YAA1D,EAAwE,MAAxE,EAAgFC,IAAhF,EAAsF,SAAtF,EAAiGS,QAAjG;AACH,SAJD,MAIO;AACLA,UAAAA,QAAQ,GAAG,MAAMZ,SAAS,CAACC,YAAD,CAAT,CAAwBC,YAAxB,GAAjB;AACD;;AACD,YAAIG,SAAS,IAAI,OAAOA,SAAP,KAAqB,UAAtC,EAAkD;AAChDO,UAAAA,QAAQ,GAAGP,SAAS,CAACO,QAAD,CAApB;AACD,SAZC,CAaF;;;AACA,YAAIA,QAAQ,KAAKJ,KAAjB,EAAwB;AACtBC,UAAAA,QAAQ,CAACG,QAAD,CAAR;AACD;AACF,OAjBD,CAiBE,OAAOI,CAAP,EAAU;AACVH,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD;AACF;AACF,GAvBQ,EAuBNT,cAvBM,EAuBUP,SAAS,IAAIA,SAAS,CAACC,YAAD,CAvBhC,CAAT;AAyBA,SAAOO,KAAP;AACD","sourcesContent":["import { useState, useEffect } from \"react\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 1777;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  usePoller(async () => {\n    if (contracts && contracts[contractName]) {\n      try {\n        let newValue;\n        if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n        if (args && args.length > 0) {\n          newValue = await contracts[contractName][functionName](...args);\n          if (DEBUG)\n            console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n        } else {\n          newValue = await contracts[contractName][functionName]();\n        }\n        if (formatter && typeof formatter === \"function\") {\n          newValue = formatter(newValue);\n        }\n        // console.log(\"GOT VALUE\",newValue)\n        if (newValue !== value) {\n          setValue(newValue);\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, adjustPollTime, contracts && contracts[contractName]);\n\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}