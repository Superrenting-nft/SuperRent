{"ast":null,"code":"var _jsxFileName = \"/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/Balance.jsx\";\nimport React, { useState } from \"react\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { usePoller } from \"eth-hooks\";\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n  const [balance, setBalance] = useState();\n\n  const getBalance = async () => {\n    if (props.address && props.provider) {\n      try {\n        const newBalance = await props.provider.getBalance(props.address);\n        setBalance(newBalance);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  usePoller(() => {\n    getBalance();\n  }, props.pollTime ? props.pollTime : 1999);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      verticalAlign: \"middle\",\n      fontSize: props.size ? props.size : 24,\n      padding: 8,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setDollarMode(!dollarMode);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, displayBalance);\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/Balance.jsx"],"names":["React","useState","formatEther","usePoller","Balance","props","dollarMode","setDollarMode","balance","setBalance","getBalance","address","provider","newBalance","e","console","log","pollTime","floatBalance","parseFloat","usingBalance","value","etherBalance","toFixed","displayBalance","price","dollarMultiplier","verticalAlign","fontSize","size","padding","cursor"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;;AAEA,QAAMS,UAAU,GAAG,YAAY;AAC7B,QAAIL,KAAK,CAACM,OAAN,IAAiBN,KAAK,CAACO,QAA3B,EAAqC;AACnC,UAAI;AACF,cAAMC,UAAU,GAAG,MAAMR,KAAK,CAACO,QAAN,CAAeF,UAAf,CAA0BL,KAAK,CAACM,OAAhC,CAAzB;AACAF,QAAAA,UAAU,CAACI,UAAD,CAAV;AACD,OAHD,CAGE,OAAOC,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AACF,GATD;;AAWAX,EAAAA,SAAS,CACP,MAAM;AACJO,IAAAA,UAAU;AACX,GAHM,EAIPL,KAAK,CAACY,QAAN,GAAiBZ,KAAK,CAACY,QAAvB,GAAkC,IAJ3B,CAAT;AAOA,MAAIC,YAAY,GAAGC,UAAU,CAAC,MAAD,CAA7B;AAEA,MAAIC,YAAY,GAAGZ,OAAnB;;AAEA,MAAI,OAAOH,KAAK,CAACG,OAAb,KAAyB,WAA7B,EAA0C;AACxCY,IAAAA,YAAY,GAAGf,KAAK,CAACG,OAArB;AACD;;AACD,MAAI,OAAOH,KAAK,CAACgB,KAAb,KAAuB,WAA3B,EAAwC;AACtCD,IAAAA,YAAY,GAAGf,KAAK,CAACgB,KAArB;AACD;;AAED,MAAID,YAAJ,EAAkB;AAChB,UAAME,YAAY,GAAGpB,WAAW,CAACkB,YAAD,CAAhC;AACAD,IAAAA,UAAU,CAACG,YAAD,CAAV,CAAyBC,OAAzB,CAAiC,CAAjC;AACAL,IAAAA,YAAY,GAAGC,UAAU,CAACG,YAAD,CAAzB;AACD;;AAED,MAAIE,cAAc,GAAGN,YAAY,CAACK,OAAb,CAAqB,CAArB,CAArB;AAEA,QAAME,KAAK,GAAGpB,KAAK,CAACoB,KAAN,IAAepB,KAAK,CAACqB,gBAAnC;;AAEA,MAAID,KAAK,IAAInB,UAAb,EAAyB;AACvBkB,IAAAA,cAAc,GAAG,MAAM,CAACN,YAAY,GAAGO,KAAhB,EAAuBF,OAAvB,CAA+B,CAA/B,CAAvB;AACD;;AAED,sBACE;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,aAAa,EAAE,QADV;AAELC,MAAAA,QAAQ,EAAEvB,KAAK,CAACwB,IAAN,GAAaxB,KAAK,CAACwB,IAAnB,GAA0B,EAF/B;AAGLC,MAAAA,OAAO,EAAE,CAHJ;AAILC,MAAAA,MAAM,EAAE;AAJH,KADT;AAOE,IAAA,OAAO,EAAE,MAAM;AACbxB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,KATH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGkB,cAXH,CADF;AAeD","sourcesContent":["import React, { useState } from \"react\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { usePoller } from \"eth-hooks\";\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n  const [balance, setBalance] = useState();\n\n  const getBalance = async () => {\n    if (props.address && props.provider) {\n      try {\n        const newBalance = await props.provider.getBalance(props.address);\n        setBalance(newBalance);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  usePoller(\n    () => {\n      getBalance();\n    },\n    props.pollTime ? props.pollTime : 1999,\n  );\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}