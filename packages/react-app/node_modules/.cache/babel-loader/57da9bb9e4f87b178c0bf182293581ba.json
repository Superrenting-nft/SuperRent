{"ast":null,"code":"/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\nmodule.exports = function createAsyncMiddleware(asyncMiddleware) {\n  return (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise;\n    const nextPromise = new Promise(resolve => {\n      resolveNextPromise = resolve;\n    });\n    let returnHandlerCallback, nextWasCalled;\n\n    const asyncNext = async () => {\n      nextWasCalled = true;\n      next(callback => {\n        // eslint-disable-line callback-return\n        returnHandlerCallback = callback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    asyncMiddleware(req, res, asyncNext).then(async () => {\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n\n        returnHandlerCallback(null);\n      } else {\n        end(null);\n      }\n    }).catch(error => {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/json-rpc-engine/src/createAsyncMiddleware.js"],"names":["module","exports","createAsyncMiddleware","asyncMiddleware","req","res","next","end","resolveNextPromise","nextPromise","Promise","resolve","returnHandlerCallback","nextWasCalled","asyncNext","callback","then","catch","error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB,SAASC,qBAAT,CAAgCC,eAAhC,EAAiD;AAChE,SAAO,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAiBC,GAAjB,KAAyB;AAE9B;AACA;AACA;AACA,QAAIC,kBAAJ;AACA,UAAMC,WAAW,GAAG,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC3CH,MAAAA,kBAAkB,GAAGG,OAArB;AACD,KAFmB,CAApB;AAIA,QAAIC,qBAAJ,EAA2BC,aAA3B;;AAEA,UAAMC,SAAS,GAAG,YAAY;AAE5BD,MAAAA,aAAa,GAAG,IAAhB;AAEAP,MAAAA,IAAI,CAAES,QAAD,IAAc;AAAE;AACnBH,QAAAA,qBAAqB,GAAGG,QAAxB;AACAP,QAAAA,kBAAkB;AACnB,OAHG,CAAJ;AAIA,YAAMC,WAAN;AACD,KATD;;AAWAN,IAAAA,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAWS,SAAX,CAAf,CACGE,IADH,CACQ,YAAY;AAChB,UAAIH,aAAJ,EAAmB;AACjB,cAAMJ,WAAN,CADiB,CACC;;AAClBG,QAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD,OAHD,MAGO;AACLL,QAAAA,GAAG,CAAC,IAAD,CAAH;AACD;AACF,KARH,EASGU,KATH,CASUC,KAAD,IAAW;AAChB,UAAIN,qBAAJ,EAA2B;AACzBA,QAAAA,qBAAqB,CAACM,KAAD,CAArB;AACD,OAFD,MAEO;AACLX,QAAAA,GAAG,CAACW,KAAD,CAAH;AACD;AACF,KAfH;AAgBD,GAvCD;AAwCD,CAzCD","sourcesContent":["/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\n\nmodule.exports = function createAsyncMiddleware (asyncMiddleware) {\n  return (req, res, next, end) => {\n\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise\n    const nextPromise = new Promise((resolve) => {\n      resolveNextPromise = resolve\n    })\n\n    let returnHandlerCallback, nextWasCalled\n\n    const asyncNext = async () => {\n\n      nextWasCalled = true\n\n      next((callback) => { // eslint-disable-line callback-return\n        returnHandlerCallback = callback\n        resolveNextPromise()\n      })\n      await nextPromise\n    }\n\n    asyncMiddleware(req, res, asyncNext)\n      .then(async () => {\n        if (nextWasCalled) {\n          await nextPromise // we must wait until the return handler is called\n          returnHandlerCallback(null)\n        } else {\n          end(null)\n        }\n      })\n      .catch((error) => {\n        if (returnHandlerCallback) {\n          returnHandlerCallback(error)\n        } else {\n          end(error)\n        }\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}