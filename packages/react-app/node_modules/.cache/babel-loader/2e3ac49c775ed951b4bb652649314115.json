{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass NetworkMonitor {\n  constructor() {\n    this._eventEmitters = [];\n\n    if (typeof window !== \"undefined\" && typeof window.addEventListener !== \"undefined\") {\n      window.addEventListener(\"online\", () => this.trigger(\"online\"));\n      window.addEventListener(\"offline\", () => this.trigger(\"offline\"));\n    }\n  }\n\n  on(event, callback) {\n    this._eventEmitters.push({\n      event,\n      callback\n    });\n  }\n\n  trigger(event) {\n    let eventEmitters = [];\n\n    if (event) {\n      eventEmitters = this._eventEmitters.filter(eventEmitter => eventEmitter.event === event);\n    }\n\n    eventEmitters.forEach(eventEmitter => {\n      eventEmitter.callback();\n    });\n  }\n\n}\n\nexports.default = NetworkMonitor;","map":{"version":3,"sources":["../../src/network.ts"],"names":[],"mappings":";;;;;;AAIA,MAAM,cAAN,CAAoB;AAGlB,EAAA,WAAA,GAAA;AACE,SAAK,cAAL,GAAsB,EAAtB;;AAEA,QAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,OAAQ,MAAc,CAAC,gBAAvB,KAA4C,WAAjF,EAA8F;AAC5F,MAAA,MAAM,CAAC,gBAAP,CAAwB,QAAxB,EAAkC,MAAM,KAAK,OAAL,CAAa,QAAb,CAAxC;AACA,MAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,MAAM,KAAK,OAAL,CAAa,SAAb,CAAzC;AACD;AACF;;AAEM,EAAA,EAAE,CAAC,KAAD,EAAsB,QAAtB,EAA0C;AACjD,SAAK,cAAL,CAAoB,IAApB,CAAyB;AACvB,MAAA,KADuB;AAEvB,MAAA;AAFuB,KAAzB;AAID;;AAEM,EAAA,OAAO,CAAC,KAAD,EAAoB;AAChC,QAAI,aAAa,GAA2B,EAA5C;;AAEA,QAAI,KAAJ,EAAW;AACT,MAAA,aAAa,GAAG,KAAK,cAAL,CAAoB,MAApB,CACb,YAAD,IAAwC,YAAY,CAAC,KAAb,KAAuB,KADjD,CAAhB;AAGD;;AAED,IAAA,aAAa,CAAC,OAAd,CAAuB,YAAD,IAAuC;AAC3D,MAAA,YAAY,CAAC,QAAb;AACD,KAFD;AAGD;;AA/BiB;;AAkCpB,OAAA,CAAA,OAAA,GAAe,cAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass NetworkMonitor {\n    constructor() {\n        this._eventEmitters = [];\n        if (typeof window !== \"undefined\" && typeof window.addEventListener !== \"undefined\") {\n            window.addEventListener(\"online\", () => this.trigger(\"online\"));\n            window.addEventListener(\"offline\", () => this.trigger(\"offline\"));\n        }\n    }\n    on(event, callback) {\n        this._eventEmitters.push({\n            event,\n            callback,\n        });\n    }\n    trigger(event) {\n        let eventEmitters = [];\n        if (event) {\n            eventEmitters = this._eventEmitters.filter((eventEmitter) => eventEmitter.event === event);\n        }\n        eventEmitters.forEach((eventEmitter) => {\n            eventEmitter.callback();\n        });\n    }\n}\nexports.default = NetworkMonitor;\n//# sourceMappingURL=network.js.map"]},"metadata":{},"sourceType":"script"}