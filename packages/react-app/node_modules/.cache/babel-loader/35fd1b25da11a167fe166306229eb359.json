{"ast":null,"code":"'use strict';\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\n\nvar dijkstra = {\n  single_source_shortest_paths: function (graph, s, d) {\n    // Predecessor map for each node that has been encountered.\n    // node ID => predecessor node ID\n    var predecessors = {}; // Costs of shortest paths from s to all nodes encountered.\n    // node ID => cost\n\n    var costs = {};\n    costs[s] = 0; // Costs of shortest paths from s to all nodes encountered; differs from\n    // `costs` in that it provides easy access to the node that currently has\n    // the known shortest path from s.\n    // XXX: Do we actually need both `costs` and `open`?\n\n    var open = dijkstra.PriorityQueue.make();\n    open.push(s, 0);\n    var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;\n\n    while (!open.empty()) {\n      // In the nodes remaining in graph that have a known cost from s,\n      // find the node, u, that currently has the shortest path from s.\n      closest = open.pop();\n      u = closest.value;\n      cost_of_s_to_u = closest.cost; // Get nodes adjacent to u...\n\n      adjacent_nodes = graph[u] || {}; // ...and explore the edges that connect u to those nodes, updating\n      // the cost of the shortest paths to any or all of those nodes as\n      // necessary. v is the node across the current edge from u.\n\n      for (v in adjacent_nodes) {\n        if (adjacent_nodes.hasOwnProperty(v)) {\n          // Get the cost of the edge running from u to v.\n          cost_of_e = adjacent_nodes[v]; // Cost of s to u plus the cost of u to v across e--this is *a*\n          // cost from s to v that may or may not be less than the current\n          // known cost to v.\n\n          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e; // If we haven't visited v yet OR if the current known cost from s to\n          // v is greater than the new cost we just found (cost of s to u plus\n          // cost of u to v across e), update v's cost in the cost list and\n          // update v's predecessor in the predecessor list (it's now u).\n\n          cost_of_s_to_v = costs[v];\n          first_visit = typeof costs[v] === 'undefined';\n\n          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n            costs[v] = cost_of_s_to_u_plus_cost_of_e;\n            open.push(v, cost_of_s_to_u_plus_cost_of_e);\n            predecessors[v] = u;\n          }\n        }\n      }\n    }\n\n    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n      throw new Error(msg);\n    }\n\n    return predecessors;\n  },\n  extract_shortest_path_from_predecessor_list: function (predecessors, d) {\n    var nodes = [];\n    var u = d;\n    var predecessor;\n\n    while (u) {\n      nodes.push(u);\n      predecessor = predecessors[u];\n      u = predecessors[u];\n    }\n\n    nodes.reverse();\n    return nodes;\n  },\n  find_path: function (graph, s, d) {\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n    return dijkstra.extract_shortest_path_from_predecessor_list(predecessors, d);\n  },\n\n  /**\n   * A very naive priority queue implementation.\n   */\n  PriorityQueue: {\n    make: function (opts) {\n      var T = dijkstra.PriorityQueue,\n          t = {},\n          key;\n      opts = opts || {};\n\n      for (key in T) {\n        if (T.hasOwnProperty(key)) {\n          t[key] = T[key];\n        }\n      }\n\n      t.queue = [];\n      t.sorter = opts.sorter || T.default_sorter;\n      return t;\n    },\n    default_sorter: function (a, b) {\n      return a.cost - b.cost;\n    },\n\n    /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */\n    push: function (value, cost) {\n      var item = {\n        value: value,\n        cost: cost\n      };\n      this.queue.push(item);\n      this.queue.sort(this.sorter);\n    },\n\n    /**\n     * Return the highest priority element in the queue.\n     */\n    pop: function () {\n      return this.queue.shift();\n    },\n    empty: function () {\n      return this.queue.length === 0;\n    }\n  }\n}; // node.js module exports\n\nif (typeof module !== 'undefined') {\n  module.exports = dijkstra;\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/dijkstrajs/dijkstra.js"],"names":["dijkstra","single_source_shortest_paths","graph","s","d","predecessors","costs","open","PriorityQueue","make","push","closest","u","v","cost_of_s_to_u","adjacent_nodes","cost_of_e","cost_of_s_to_u_plus_cost_of_e","cost_of_s_to_v","first_visit","empty","pop","value","cost","hasOwnProperty","msg","join","Error","extract_shortest_path_from_predecessor_list","nodes","predecessor","reverse","find_path","opts","T","t","key","queue","sorter","default_sorter","a","b","item","sort","shift","length","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nvar dijkstra = {\n  single_source_shortest_paths: function(graph, s, d) {\n    // Predecessor map for each node that has been encountered.\n    // node ID => predecessor node ID\n    var predecessors = {};\n\n    // Costs of shortest paths from s to all nodes encountered.\n    // node ID => cost\n    var costs = {};\n    costs[s] = 0;\n\n    // Costs of shortest paths from s to all nodes encountered; differs from\n    // `costs` in that it provides easy access to the node that currently has\n    // the known shortest path from s.\n    // XXX: Do we actually need both `costs` and `open`?\n    var open = dijkstra.PriorityQueue.make();\n    open.push(s, 0);\n\n    var closest,\n        u, v,\n        cost_of_s_to_u,\n        adjacent_nodes,\n        cost_of_e,\n        cost_of_s_to_u_plus_cost_of_e,\n        cost_of_s_to_v,\n        first_visit;\n    while (!open.empty()) {\n      // In the nodes remaining in graph that have a known cost from s,\n      // find the node, u, that currently has the shortest path from s.\n      closest = open.pop();\n      u = closest.value;\n      cost_of_s_to_u = closest.cost;\n\n      // Get nodes adjacent to u...\n      adjacent_nodes = graph[u] || {};\n\n      // ...and explore the edges that connect u to those nodes, updating\n      // the cost of the shortest paths to any or all of those nodes as\n      // necessary. v is the node across the current edge from u.\n      for (v in adjacent_nodes) {\n        if (adjacent_nodes.hasOwnProperty(v)) {\n          // Get the cost of the edge running from u to v.\n          cost_of_e = adjacent_nodes[v];\n\n          // Cost of s to u plus the cost of u to v across e--this is *a*\n          // cost from s to v that may or may not be less than the current\n          // known cost to v.\n          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n          // If we haven't visited v yet OR if the current known cost from s to\n          // v is greater than the new cost we just found (cost of s to u plus\n          // cost of u to v across e), update v's cost in the cost list and\n          // update v's predecessor in the predecessor list (it's now u).\n          cost_of_s_to_v = costs[v];\n          first_visit = (typeof costs[v] === 'undefined');\n          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n            costs[v] = cost_of_s_to_u_plus_cost_of_e;\n            open.push(v, cost_of_s_to_u_plus_cost_of_e);\n            predecessors[v] = u;\n          }\n        }\n      }\n    }\n\n    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n      throw new Error(msg);\n    }\n\n    return predecessors;\n  },\n\n  extract_shortest_path_from_predecessor_list: function(predecessors, d) {\n    var nodes = [];\n    var u = d;\n    var predecessor;\n    while (u) {\n      nodes.push(u);\n      predecessor = predecessors[u];\n      u = predecessors[u];\n    }\n    nodes.reverse();\n    return nodes;\n  },\n\n  find_path: function(graph, s, d) {\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n    return dijkstra.extract_shortest_path_from_predecessor_list(\n      predecessors, d);\n  },\n\n  /**\n   * A very naive priority queue implementation.\n   */\n  PriorityQueue: {\n    make: function (opts) {\n      var T = dijkstra.PriorityQueue,\n          t = {},\n          key;\n      opts = opts || {};\n      for (key in T) {\n        if (T.hasOwnProperty(key)) {\n          t[key] = T[key];\n        }\n      }\n      t.queue = [];\n      t.sorter = opts.sorter || T.default_sorter;\n      return t;\n    },\n\n    default_sorter: function (a, b) {\n      return a.cost - b.cost;\n    },\n\n    /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */\n    push: function (value, cost) {\n      var item = {value: value, cost: cost};\n      this.queue.push(item);\n      this.queue.sort(this.sorter);\n    },\n\n    /**\n     * Return the highest priority element in the queue.\n     */\n    pop: function () {\n      return this.queue.shift();\n    },\n\n    empty: function () {\n      return this.queue.length === 0;\n    }\n  }\n};\n\n\n// node.js module exports\nif (typeof module !== 'undefined') {\n  module.exports = dijkstra;\n}\n"]},"metadata":{},"sourceType":"script"}