{"ast":null,"code":"\"use strict\";\n\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n  constructor() {\n    logger.checkNew(new.target, Formatter);\n    this.formats = this.getDefaultFormats();\n  }\n\n  getDefaultFormats() {\n    const formats = {};\n    const address = this.address.bind(this);\n    const bigNumber = this.bigNumber.bind(this);\n    const blockTag = this.blockTag.bind(this);\n    const data = this.data.bind(this);\n    const hash = this.hash.bind(this);\n    const hex = this.hex.bind(this);\n    const number = this.number.bind(this);\n\n    const strictData = v => {\n      return this.data(v, true);\n    };\n\n    formats.transaction = {\n      hash: hash,\n      blockHash: Formatter.allowNull(hash, null),\n      blockNumber: Formatter.allowNull(number, null),\n      transactionIndex: Formatter.allowNull(number, null),\n      confirmations: Formatter.allowNull(number, null),\n      from: address,\n      gasPrice: bigNumber,\n      gasLimit: bigNumber,\n      to: Formatter.allowNull(address, null),\n      value: bigNumber,\n      nonce: number,\n      data: data,\n      r: Formatter.allowNull(this.uint256),\n      s: Formatter.allowNull(this.uint256),\n      v: Formatter.allowNull(number),\n      creates: Formatter.allowNull(address, null),\n      raw: Formatter.allowNull(data)\n    };\n    formats.transactionRequest = {\n      from: Formatter.allowNull(address),\n      nonce: Formatter.allowNull(number),\n      gasLimit: Formatter.allowNull(bigNumber),\n      gasPrice: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address),\n      value: Formatter.allowNull(bigNumber),\n      data: Formatter.allowNull(strictData)\n    };\n    formats.receiptLog = {\n      transactionIndex: number,\n      blockNumber: number,\n      transactionHash: hash,\n      address: address,\n      topics: Formatter.arrayOf(hash),\n      data: data,\n      logIndex: number,\n      blockHash: hash\n    };\n    formats.receipt = {\n      to: Formatter.allowNull(this.address, null),\n      from: Formatter.allowNull(this.address, null),\n      contractAddress: Formatter.allowNull(address, null),\n      transactionIndex: number,\n      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n      root: Formatter.allowNull(hex),\n      gasUsed: bigNumber,\n      logsBloom: Formatter.allowNull(data),\n      blockHash: hash,\n      transactionHash: hash,\n      logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n      blockNumber: number,\n      confirmations: Formatter.allowNull(number, null),\n      cumulativeGasUsed: bigNumber,\n      status: Formatter.allowNull(number)\n    };\n    formats.block = {\n      hash: hash,\n      parentHash: hash,\n      number: number,\n      timestamp: number,\n      nonce: Formatter.allowNull(hex),\n      difficulty: this.difficulty.bind(this),\n      gasLimit: bigNumber,\n      gasUsed: bigNumber,\n      miner: address,\n      extraData: data,\n      transactions: Formatter.allowNull(Formatter.arrayOf(hash))\n    };\n    formats.blockWithTransactions = shallowCopy(formats.block);\n    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n    formats.filter = {\n      fromBlock: Formatter.allowNull(blockTag, undefined),\n      toBlock: Formatter.allowNull(blockTag, undefined),\n      blockHash: Formatter.allowNull(hash, undefined),\n      address: Formatter.allowNull(address, undefined),\n      topics: Formatter.allowNull(this.topics.bind(this), undefined)\n    };\n    formats.filterLog = {\n      blockNumber: Formatter.allowNull(number),\n      blockHash: Formatter.allowNull(hash),\n      transactionIndex: number,\n      removed: Formatter.allowNull(this.boolean.bind(this)),\n      address: address,\n      data: Formatter.allowFalsish(data, \"0x\"),\n      topics: Formatter.arrayOf(hash),\n      transactionHash: hash,\n      logIndex: number\n    };\n    return formats;\n  } // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n  // Strict! Used on input.\n\n\n  number(number) {\n    if (number === \"0x\") {\n      return 0;\n    }\n\n    return BigNumber.from(number).toNumber();\n  } // Strict! Used on input.\n\n\n  bigNumber(value) {\n    return BigNumber.from(value);\n  } // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\n\n  boolean(value) {\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      value = value.toLowerCase();\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n    }\n\n    throw new Error(\"invalid boolean - \" + value);\n  }\n\n  hex(value, strict) {\n    if (typeof value === \"string\") {\n      if (!strict && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n\n      if (isHexString(value)) {\n        return value.toLowerCase();\n      }\n    }\n\n    return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n  }\n\n  data(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (result.length % 2 !== 0) {\n      throw new Error(\"invalid data; odd-length - \" + value);\n    }\n\n    return result;\n  } // Requires an address\n  // Strict! Used on input.\n\n\n  address(value) {\n    return getAddress(value);\n  }\n\n  callAddress(value) {\n    if (!isHexString(value, 32)) {\n      return null;\n    }\n\n    const address = getAddress(hexDataSlice(value, 12));\n    return address === AddressZero ? null : address;\n  }\n\n  contractAddress(value) {\n    return getContractAddress(value);\n  } // Strict! Used on input.\n\n\n  blockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n\n    if (blockTag === \"earliest\") {\n      return \"0x0\";\n    }\n\n    if (blockTag === \"latest\" || blockTag === \"pending\") {\n      return blockTag;\n    }\n\n    if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n      return hexValue(blockTag);\n    }\n\n    throw new Error(\"invalid blockTag\");\n  } // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\n\n  hash(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (hexDataLength(result) !== 32) {\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    return result;\n  } // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n\n  difficulty(value) {\n    if (value == null) {\n      return null;\n    }\n\n    const v = BigNumber.from(value);\n\n    try {\n      return v.toNumber();\n    } catch (error) {}\n\n    return null;\n  }\n\n  uint256(value) {\n    if (!isHexString(value)) {\n      throw new Error(\"invalid uint256\");\n    }\n\n    return hexZeroPad(value, 32);\n  }\n\n  _block(value, format) {\n    if (value.author != null && value.miner == null) {\n      value.miner = value.author;\n    }\n\n    return Formatter.check(format, value);\n  }\n\n  block(value) {\n    return this._block(value, this.formats.block);\n  }\n\n  blockWithTransactions(value) {\n    return this._block(value, this.formats.blockWithTransactions);\n  } // Strict! Used on input.\n\n\n  transactionRequest(value) {\n    return Formatter.check(this.formats.transactionRequest, value);\n  }\n\n  transactionResponse(transaction) {\n    // Rename gas to gasLimit\n    if (transaction.gas != null && transaction.gasLimit == null) {\n      transaction.gasLimit = transaction.gas;\n    } // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n\n\n    if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n      transaction.to = \"0x0000000000000000000000000000000000000000\";\n    } // Rename input to data\n\n\n    if (transaction.input != null && transaction.data == null) {\n      transaction.data = transaction.input;\n    } // If to and creates are empty, populate the creates from the transaction\n\n\n    if (transaction.to == null && transaction.creates == null) {\n      transaction.creates = this.contractAddress(transaction);\n    } // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n\n    /*\n    if (!transaction.raw) {\n           // Very loose providers (e.g. TestRPC) do not provide a signature or raw\n         if (transaction.v && transaction.r && transaction.s) {\n             let raw = [\n                 stripZeros(hexlify(transaction.nonce)),\n                 stripZeros(hexlify(transaction.gasPrice)),\n                 stripZeros(hexlify(transaction.gasLimit)),\n                 (transaction.to || \"0x\"),\n                 stripZeros(hexlify(transaction.value || \"0x\")),\n                 hexlify(transaction.data || \"0x\"),\n                 stripZeros(hexlify(transaction.v || \"0x\")),\n                 stripZeros(hexlify(transaction.r)),\n                 stripZeros(hexlify(transaction.s)),\n             ];\n               transaction.raw = rlpEncode(raw);\n         }\n     }\n     */\n\n\n    const result = Formatter.check(this.formats.transaction, transaction);\n\n    if (transaction.chainId != null) {\n      let chainId = transaction.chainId;\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      result.chainId = chainId;\n    } else {\n      let chainId = transaction.networkId; // geth-etc returns chainId\n\n      if (chainId == null && result.v == null) {\n        chainId = transaction.chainId;\n      }\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      if (typeof chainId !== \"number\" && result.v != null) {\n        chainId = (result.v - 35) / 2;\n\n        if (chainId < 0) {\n          chainId = 0;\n        }\n\n        chainId = parseInt(chainId);\n      }\n\n      if (typeof chainId !== \"number\") {\n        chainId = 0;\n      }\n\n      result.chainId = chainId;\n    } // 0x0000... should actually be null\n\n\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n      result.blockHash = null;\n    }\n\n    return result;\n  }\n\n  transaction(value) {\n    return parseTransaction(value);\n  }\n\n  receiptLog(value) {\n    return Formatter.check(this.formats.receiptLog, value);\n  }\n\n  receipt(value) {\n    const result = Formatter.check(this.formats.receipt, value); // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n\n    if (result.root != null) {\n      if (result.root.length <= 4) {\n        // Could be 0x00, 0x0, 0x01 or 0x1\n        const value = BigNumber.from(result.root).toNumber();\n\n        if (value === 0 || value === 1) {\n          // Make sure if both are specified, they match\n          if (result.status != null && result.status !== value) {\n            logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n              root: result.root,\n              status: result.status\n            });\n          }\n\n          result.status = value;\n          delete result.root;\n        } else {\n          logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n        }\n      } else if (result.root.length !== 66) {\n        // Must be a valid bytes32\n        logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n      }\n    }\n\n    if (result.status != null) {\n      result.byzantium = true;\n    }\n\n    return result;\n  }\n\n  topics(value) {\n    if (Array.isArray(value)) {\n      return value.map(v => this.topics(v));\n    } else if (value != null) {\n      return this.hash(value, true);\n    }\n\n    return null;\n  }\n\n  filter(value) {\n    return Formatter.check(this.formats.filter, value);\n  }\n\n  filterLog(value) {\n    return Formatter.check(this.formats.filterLog, value);\n  }\n\n  static check(format, object) {\n    const result = {};\n\n    for (const key in format) {\n      try {\n        const value = format[key](object[key]);\n\n        if (value !== undefined) {\n          result[key] = value;\n        }\n      } catch (error) {\n        error.checkKey = key;\n        error.checkValue = object[key];\n        throw error;\n      }\n    }\n\n    return result;\n  } // if value is null-ish, nullValue is returned\n\n\n  static allowNull(format, nullValue) {\n    return function (value) {\n      if (value == null) {\n        return nullValue;\n      }\n\n      return format(value);\n    };\n  } // If value is false-ish, replaceValue is returned\n\n\n  static allowFalsish(format, replaceValue) {\n    return function (value) {\n      if (!value) {\n        return replaceValue;\n      }\n\n      return format(value);\n    };\n  } // Requires an Array satisfying check\n\n\n  static arrayOf(format) {\n    return function (array) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n\n      const result = [];\n      array.forEach(function (value) {\n        result.push(format(value));\n      });\n      return result;\n    };\n  }\n\n}\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n} // Show the throttle message only once\n\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"sources":["../src.ts/formatter.ts"],"names":[],"mappings":"AAAA;;AAGA,SAAS,UAAT,EAAqB,kBAArB,QAA+C,wBAA/C;AACA,SAAS,SAAT,QAA0B,0BAA1B;AACA,SAAS,aAAT,EAAwB,YAAxB,EAAsC,QAAtC,EAAgD,UAAhD,EAA4D,WAA5D,QAA+E,sBAA/E;AACA,SAAS,WAAT,QAA4B,0BAA5B;AACA,SAAS,WAAT,QAA4B,2BAA5B;AACA,SAAS,KAAK,IAAI,gBAAlB,QAA0C,6BAA1C;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAiBA,OAAM,MAAO,SAAP,CAAgB;AAGlB,EAAA,WAAA,GAAA;AACI,IAAA,MAAM,CAAC,QAAP,CAAgB,GAAG,CAAC,MAApB,EAA4B,SAA5B;AACA,SAAK,OAAL,GAAe,KAAK,iBAAL,EAAf;AACH;;AAED,EAAA,iBAAiB,GAAA;AACb,UAAM,OAAO,GAAsB,EAAnC;AAEA,UAAM,OAAO,GAAG,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAhB;AACA,UAAM,SAAS,GAAG,KAAK,SAAL,CAAe,IAAf,CAAoB,IAApB,CAAlB;AACA,UAAM,QAAQ,GAAG,KAAK,QAAL,CAAc,IAAd,CAAmB,IAAnB,CAAjB;AACA,UAAM,IAAI,GAAG,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,CAAb;AACA,UAAM,IAAI,GAAG,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,CAAb;AACA,UAAM,GAAG,GAAG,KAAK,GAAL,CAAS,IAAT,CAAc,IAAd,CAAZ;AACA,UAAM,MAAM,GAAG,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAAf;;AAEA,UAAM,UAAU,GAAI,CAAD,IAAW;AAAG,aAAO,KAAK,IAAL,CAAU,CAAV,EAAa,IAAb,CAAP;AAA4B,KAA7D;;AAEA,IAAA,OAAO,CAAC,WAAR,GAAsB;AAClB,MAAA,IAAI,EAAE,IADY;AAGlB,MAAA,SAAS,EAAE,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,IAA1B,CAHO;AAIlB,MAAA,WAAW,EAAE,SAAS,CAAC,SAAV,CAAoB,MAApB,EAA4B,IAA5B,CAJK;AAKlB,MAAA,gBAAgB,EAAE,SAAS,CAAC,SAAV,CAAoB,MAApB,EAA4B,IAA5B,CALA;AAOlB,MAAA,aAAa,EAAE,SAAS,CAAC,SAAV,CAAoB,MAApB,EAA4B,IAA5B,CAPG;AASlB,MAAA,IAAI,EAAE,OATY;AAWlB,MAAA,QAAQ,EAAE,SAXQ;AAYlB,MAAA,QAAQ,EAAE,SAZQ;AAalB,MAAA,EAAE,EAAE,SAAS,CAAC,SAAV,CAAoB,OAApB,EAA6B,IAA7B,CAbc;AAclB,MAAA,KAAK,EAAE,SAdW;AAelB,MAAA,KAAK,EAAE,MAfW;AAgBlB,MAAA,IAAI,EAAE,IAhBY;AAkBlB,MAAA,CAAC,EAAE,SAAS,CAAC,SAAV,CAAoB,KAAK,OAAzB,CAlBe;AAmBlB,MAAA,CAAC,EAAE,SAAS,CAAC,SAAV,CAAoB,KAAK,OAAzB,CAnBe;AAoBlB,MAAA,CAAC,EAAE,SAAS,CAAC,SAAV,CAAoB,MAApB,CApBe;AAsBlB,MAAA,OAAO,EAAE,SAAS,CAAC,SAAV,CAAoB,OAApB,EAA6B,IAA7B,CAtBS;AAwBlB,MAAA,GAAG,EAAE,SAAS,CAAC,SAAV,CAAoB,IAApB;AAxBa,KAAtB;AA2BA,IAAA,OAAO,CAAC,kBAAR,GAA6B;AACzB,MAAA,IAAI,EAAE,SAAS,CAAC,SAAV,CAAoB,OAApB,CADmB;AAEzB,MAAA,KAAK,EAAE,SAAS,CAAC,SAAV,CAAoB,MAApB,CAFkB;AAGzB,MAAA,QAAQ,EAAE,SAAS,CAAC,SAAV,CAAoB,SAApB,CAHe;AAIzB,MAAA,QAAQ,EAAE,SAAS,CAAC,SAAV,CAAoB,SAApB,CAJe;AAKzB,MAAA,EAAE,EAAE,SAAS,CAAC,SAAV,CAAoB,OAApB,CALqB;AAMzB,MAAA,KAAK,EAAE,SAAS,CAAC,SAAV,CAAoB,SAApB,CANkB;AAOzB,MAAA,IAAI,EAAE,SAAS,CAAC,SAAV,CAAoB,UAApB;AAPmB,KAA7B;AAUA,IAAA,OAAO,CAAC,UAAR,GAAqB;AACjB,MAAA,gBAAgB,EAAE,MADD;AAEjB,MAAA,WAAW,EAAE,MAFI;AAGjB,MAAA,eAAe,EAAE,IAHA;AAIjB,MAAA,OAAO,EAAE,OAJQ;AAKjB,MAAA,MAAM,EAAE,SAAS,CAAC,OAAV,CAAkB,IAAlB,CALS;AAMjB,MAAA,IAAI,EAAE,IANW;AAOjB,MAAA,QAAQ,EAAE,MAPO;AAQjB,MAAA,SAAS,EAAE;AARM,KAArB;AAWA,IAAA,OAAO,CAAC,OAAR,GAAkB;AACd,MAAA,EAAE,EAAE,SAAS,CAAC,SAAV,CAAoB,KAAK,OAAzB,EAAkC,IAAlC,CADU;AAEd,MAAA,IAAI,EAAE,SAAS,CAAC,SAAV,CAAoB,KAAK,OAAzB,EAAkC,IAAlC,CAFQ;AAGd,MAAA,eAAe,EAAE,SAAS,CAAC,SAAV,CAAoB,OAApB,EAA6B,IAA7B,CAHH;AAId,MAAA,gBAAgB,EAAE,MAJJ;AAKd;AACA,MAAA,IAAI,EAAE,SAAS,CAAC,SAAV,CAAoB,GAApB,CANQ;AAOd,MAAA,OAAO,EAAE,SAPK;AAQd,MAAA,SAAS,EAAE,SAAS,CAAC,SAAV,CAAoB,IAApB,CARG;AASd,MAAA,SAAS,EAAE,IATG;AAUd,MAAA,eAAe,EAAE,IAVH;AAWd,MAAA,IAAI,EAAE,SAAS,CAAC,OAAV,CAAkB,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAAlB,CAXQ;AAYd,MAAA,WAAW,EAAE,MAZC;AAad,MAAA,aAAa,EAAE,SAAS,CAAC,SAAV,CAAoB,MAApB,EAA4B,IAA5B,CAbD;AAcd,MAAA,iBAAiB,EAAE,SAdL;AAed,MAAA,MAAM,EAAE,SAAS,CAAC,SAAV,CAAoB,MAApB;AAfM,KAAlB;AAkBA,IAAA,OAAO,CAAC,KAAR,GAAgB;AACZ,MAAA,IAAI,EAAE,IADM;AAEZ,MAAA,UAAU,EAAE,IAFA;AAGZ,MAAA,MAAM,EAAE,MAHI;AAKZ,MAAA,SAAS,EAAE,MALC;AAMZ,MAAA,KAAK,EAAE,SAAS,CAAC,SAAV,CAAoB,GAApB,CANK;AAOZ,MAAA,UAAU,EAAE,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAPA;AASZ,MAAA,QAAQ,EAAE,SATE;AAUZ,MAAA,OAAO,EAAE,SAVG;AAYZ,MAAA,KAAK,EAAE,OAZK;AAaZ,MAAA,SAAS,EAAE,IAbC;AAeZ,MAAA,YAAY,EAAE,SAAS,CAAC,SAAV,CAAoB,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAApB;AAfF,KAAhB;AAkBA,IAAA,OAAO,CAAC,qBAAR,GAAgC,WAAW,CAAC,OAAO,CAAC,KAAT,CAA3C;AACA,IAAA,OAAO,CAAC,qBAAR,CAA8B,YAA9B,GAA6C,SAAS,CAAC,SAAV,CAAoB,SAAS,CAAC,OAAV,CAAkB,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,IAA9B,CAAlB,CAApB,CAA7C;AAEA,IAAA,OAAO,CAAC,MAAR,GAAiB;AACb,MAAA,SAAS,EAAE,SAAS,CAAC,SAAV,CAAoB,QAApB,EAA8B,SAA9B,CADE;AAEb,MAAA,OAAO,EAAE,SAAS,CAAC,SAAV,CAAoB,QAApB,EAA8B,SAA9B,CAFI;AAGb,MAAA,SAAS,EAAE,SAAS,CAAC,SAAV,CAAoB,IAApB,EAA0B,SAA1B,CAHE;AAIb,MAAA,OAAO,EAAE,SAAS,CAAC,SAAV,CAAoB,OAApB,EAA6B,SAA7B,CAJI;AAKb,MAAA,MAAM,EAAE,SAAS,CAAC,SAAV,CAAoB,KAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAApB,EAA4C,SAA5C;AALK,KAAjB;AAQA,IAAA,OAAO,CAAC,SAAR,GAAoB;AAChB,MAAA,WAAW,EAAE,SAAS,CAAC,SAAV,CAAoB,MAApB,CADG;AAEhB,MAAA,SAAS,EAAE,SAAS,CAAC,SAAV,CAAoB,IAApB,CAFK;AAGhB,MAAA,gBAAgB,EAAE,MAHF;AAKhB,MAAA,OAAO,EAAE,SAAS,CAAC,SAAV,CAAoB,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAApB,CALO;AAOhB,MAAA,OAAO,EAAE,OAPO;AAQhB,MAAA,IAAI,EAAE,SAAS,CAAC,YAAV,CAAuB,IAAvB,EAA6B,IAA7B,CARU;AAUhB,MAAA,MAAM,EAAE,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAVQ;AAYhB,MAAA,eAAe,EAAE,IAZD;AAahB,MAAA,QAAQ,EAAE;AAbM,KAApB;AAgBA,WAAO,OAAP;AACH,GArIiB,CAuIlB;AACA;;;AACA,EAAA,MAAM,CAAC,MAAD,EAAY;AACd,QAAI,MAAM,KAAK,IAAf,EAAqB;AAAE,aAAO,CAAP;AAAW;;AAClC,WAAO,SAAS,CAAC,IAAV,CAAe,MAAf,EAAuB,QAAvB,EAAP;AACH,GA5IiB,CA8IlB;;;AACA,EAAA,SAAS,CAAC,KAAD,EAAW;AAChB,WAAO,SAAS,CAAC,IAAV,CAAe,KAAf,CAAP;AACH,GAjJiB,CAmJlB;;;AACA,EAAA,OAAO,CAAC,KAAD,EAAW;AACd,QAAI,OAAO,KAAP,KAAkB,SAAtB,EAAiC;AAAE,aAAO,KAAP;AAAe;;AAClD,QAAI,OAAO,KAAP,KAAkB,QAAtB,EAAgC;AAC5B,MAAA,KAAK,GAAG,KAAK,CAAC,WAAN,EAAR;;AACA,UAAI,KAAK,KAAK,MAAd,EAAsB;AAAE,eAAO,IAAP;AAAc;;AACtC,UAAI,KAAK,KAAK,OAAd,EAAuB;AAAE,eAAO,KAAP;AAAe;AAC3C;;AACD,UAAM,IAAI,KAAJ,CAAU,uBAAuB,KAAjC,CAAN;AACH;;AAED,EAAA,GAAG,CAAC,KAAD,EAAa,MAAb,EAA6B;AAC5B,QAAI,OAAO,KAAP,KAAkB,QAAtB,EAAgC;AAC5B,UAAI,CAAC,MAAD,IAAW,KAAK,CAAC,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,IAAzC,EAA+C;AAAE,QAAA,KAAK,GAAG,OAAO,KAAf;AAAuB;;AACxE,UAAI,WAAW,CAAC,KAAD,CAAf,EAAwB;AACrB,eAAO,KAAK,CAAC,WAAN,EAAP;AACF;AACJ;;AACD,WAAO,MAAM,CAAC,kBAAP,CAA0B,cAA1B,EAA0C,OAA1C,EAAmD,KAAnD,CAAP;AACH;;AAED,EAAA,IAAI,CAAC,KAAD,EAAa,MAAb,EAA6B;AAC7B,UAAM,MAAM,GAAG,KAAK,GAAL,CAAS,KAAT,EAAgB,MAAhB,CAAf;;AACA,QAAK,MAAM,CAAC,MAAP,GAAgB,CAAjB,KAAwB,CAA5B,EAA+B;AAC3B,YAAM,IAAI,KAAJ,CAAU,gCAAgC,KAA1C,CAAN;AACH;;AACD,WAAO,MAAP;AACH,GA9KiB,CAgLlB;AACA;;;AACA,EAAA,OAAO,CAAC,KAAD,EAAW;AACd,WAAO,UAAU,CAAC,KAAD,CAAjB;AACH;;AAED,EAAA,WAAW,CAAC,KAAD,EAAW;AAClB,QAAI,CAAC,WAAW,CAAC,KAAD,EAAQ,EAAR,CAAhB,EAA6B;AAAE,aAAO,IAAP;AAAc;;AAC7C,UAAM,OAAO,GAAG,UAAU,CAAC,YAAY,CAAC,KAAD,EAAQ,EAAR,CAAb,CAA1B;AACA,WAAQ,OAAO,KAAK,WAAb,GAA4B,IAA5B,GAAkC,OAAzC;AACH;;AAED,EAAA,eAAe,CAAC,KAAD,EAAW;AACtB,WAAO,kBAAkB,CAAC,KAAD,CAAzB;AACH,GA9LiB,CAgMlB;;;AACA,EAAA,QAAQ,CAAC,QAAD,EAAc;AAClB,QAAI,QAAQ,IAAI,IAAhB,EAAsB;AAAE,aAAO,QAAP;AAAkB;;AAE3C,QAAI,QAAQ,KAAK,UAAjB,EAA6B;AAAE,aAAO,KAAP;AAAe;;AAE7C,QAAI,QAAQ,KAAK,QAAb,IAAyB,QAAQ,KAAK,SAA1C,EAAqD;AACjD,aAAO,QAAP;AACH;;AAED,QAAI,OAAO,QAAP,KAAqB,QAArB,IAAiC,WAAW,CAAC,QAAD,CAAhD,EAA4D;AACxD,aAAO,QAAQ,CAAkB,QAAlB,CAAf;AACH;;AAED,UAAM,IAAI,KAAJ,CAAU,kBAAV,CAAN;AACH,GA/MiB,CAiNlB;;;AACA,EAAA,IAAI,CAAC,KAAD,EAAa,MAAb,EAA6B;AAC7B,UAAM,MAAM,GAAG,KAAK,GAAL,CAAS,KAAT,EAAgB,MAAhB,CAAf;;AACA,QAAI,aAAa,CAAC,MAAD,CAAb,KAA0B,EAA9B,EAAkC;AAC9B,aAAO,MAAM,CAAC,kBAAP,CAA0B,cAA1B,EAA0C,OAA1C,EAAmD,KAAnD,CAAP;AACH;;AACD,WAAO,MAAP;AACH,GAxNiB,CA0NlB;;;AACA,EAAA,UAAU,CAAC,KAAD,EAAW;AACjB,QAAI,KAAK,IAAI,IAAb,EAAmB;AAAE,aAAO,IAAP;AAAc;;AAEnC,UAAM,CAAC,GAAG,SAAS,CAAC,IAAV,CAAe,KAAf,CAAV;;AAEA,QAAI;AACA,aAAO,CAAC,CAAC,QAAF,EAAP;AACH,KAFD,CAEE,OAAO,KAAP,EAAc,CAAG;;AAEpB,WAAO,IAAP;AACF;;AAED,EAAA,OAAO,CAAC,KAAD,EAAW;AACd,QAAI,CAAC,WAAW,CAAC,KAAD,CAAhB,EAAyB;AACrB,YAAM,IAAI,KAAJ,CAAU,iBAAV,CAAN;AACH;;AACD,WAAO,UAAU,CAAC,KAAD,EAAQ,EAAR,CAAjB;AACH;;AAED,EAAA,MAAM,CAAC,KAAD,EAAa,MAAb,EAAwB;AAC1B,QAAI,KAAK,CAAC,MAAN,IAAgB,IAAhB,IAAwB,KAAK,CAAC,KAAN,IAAe,IAA3C,EAAiD;AAC7C,MAAA,KAAK,CAAC,KAAN,GAAc,KAAK,CAAC,MAApB;AACH;;AACD,WAAO,SAAS,CAAC,KAAV,CAAgB,MAAhB,EAAwB,KAAxB,CAAP;AACH;;AAED,EAAA,KAAK,CAAC,KAAD,EAAW;AACZ,WAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,KAAK,OAAL,CAAa,KAAhC,CAAP;AACH;;AAED,EAAA,qBAAqB,CAAC,KAAD,EAAW;AAC5B,WAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,KAAK,OAAL,CAAa,qBAAhC,CAAP;AACH,GA3PiB,CA6PlB;;;AACA,EAAA,kBAAkB,CAAC,KAAD,EAAW;AACzB,WAAO,SAAS,CAAC,KAAV,CAAgB,KAAK,OAAL,CAAa,kBAA7B,EAAiD,KAAjD,CAAP;AACH;;AAED,EAAA,mBAAmB,CAAC,WAAD,EAAiB;AAEhC;AACA,QAAI,WAAW,CAAC,GAAZ,IAAmB,IAAnB,IAA2B,WAAW,CAAC,QAAZ,IAAwB,IAAvD,EAA6D;AACzD,MAAA,WAAW,CAAC,QAAZ,GAAuB,WAAW,CAAC,GAAnC;AACH,KAL+B,CAOhC;AACA;;;AACA,QAAI,WAAW,CAAC,EAAZ,IAAkB,SAAS,CAAC,IAAV,CAAe,WAAW,CAAC,EAA3B,EAA+B,MAA/B,EAAtB,EAA+D;AAC3D,MAAA,WAAW,CAAC,EAAZ,GAAiB,4CAAjB;AACH,KAX+B,CAahC;;;AACA,QAAI,WAAW,CAAC,KAAZ,IAAqB,IAArB,IAA6B,WAAW,CAAC,IAAZ,IAAoB,IAArD,EAA2D;AACvD,MAAA,WAAW,CAAC,IAAZ,GAAmB,WAAW,CAAC,KAA/B;AACH,KAhB+B,CAkBhC;;;AACA,QAAI,WAAW,CAAC,EAAZ,IAAkB,IAAlB,IAA0B,WAAW,CAAC,OAAZ,IAAuB,IAArD,EAA2D;AACvD,MAAA,WAAW,CAAC,OAAZ,GAAsB,KAAK,eAAL,CAAqB,WAArB,CAAtB;AACH,KArB+B,CAuBjC;;AACA;;;;;;;;;;;;;;;;;;;;;AAsBC,UAAM,MAAM,GAAwB,SAAS,CAAC,KAAV,CAAgB,KAAK,OAAL,CAAa,WAA7B,EAA0C,WAA1C,CAApC;;AAEA,QAAI,WAAW,CAAC,OAAZ,IAAuB,IAA3B,EAAiC;AAC7B,UAAI,OAAO,GAAG,WAAW,CAAC,OAA1B;;AAEA,UAAI,WAAW,CAAC,OAAD,CAAf,EAA0B;AACtB,QAAA,OAAO,GAAG,SAAS,CAAC,IAAV,CAAe,OAAf,EAAwB,QAAxB,EAAV;AACH;;AAED,MAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;AAEH,KATD,MASO;AACH,UAAI,OAAO,GAAG,WAAW,CAAC,SAA1B,CADG,CAGH;;AACA,UAAI,OAAO,IAAI,IAAX,IAAmB,MAAM,CAAC,CAAP,IAAY,IAAnC,EAAyC;AACrC,QAAA,OAAO,GAAG,WAAW,CAAC,OAAtB;AACH;;AAED,UAAI,WAAW,CAAC,OAAD,CAAf,EAA0B;AACtB,QAAA,OAAO,GAAG,SAAS,CAAC,IAAV,CAAe,OAAf,EAAwB,QAAxB,EAAV;AACH;;AAED,UAAI,OAAO,OAAP,KAAoB,QAApB,IAAgC,MAAM,CAAC,CAAP,IAAY,IAAhD,EAAsD;AAClD,QAAA,OAAO,GAAG,CAAC,MAAM,CAAC,CAAP,GAAW,EAAZ,IAAkB,CAA5B;;AACA,YAAI,OAAO,GAAG,CAAd,EAAiB;AAAE,UAAA,OAAO,GAAG,CAAV;AAAc;;AACjC,QAAA,OAAO,GAAG,QAAQ,CAAC,OAAD,CAAlB;AACH;;AAED,UAAI,OAAO,OAAP,KAAoB,QAAxB,EAAkC;AAAE,QAAA,OAAO,GAAG,CAAV;AAAc;;AAElD,MAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;AACH,KA9E+B,CAgFhC;;;AACA,QAAI,MAAM,CAAC,SAAP,IAAoB,MAAM,CAAC,SAAP,CAAiB,OAAjB,CAAyB,IAAzB,EAA+B,EAA/B,MAAuC,GAA/D,EAAoE;AAChE,MAAA,MAAM,CAAC,SAAP,GAAmB,IAAnB;AACH;;AAED,WAAO,MAAP;AACH;;AAED,EAAA,WAAW,CAAC,KAAD,EAAW;AAClB,WAAO,gBAAgB,CAAC,KAAD,CAAvB;AACH;;AAED,EAAA,UAAU,CAAC,KAAD,EAAW;AACjB,WAAO,SAAS,CAAC,KAAV,CAAgB,KAAK,OAAL,CAAa,UAA7B,EAAyC,KAAzC,CAAP;AACH;;AAED,EAAA,OAAO,CAAC,KAAD,EAAW;AACd,UAAM,MAAM,GAAuB,SAAS,CAAC,KAAV,CAAgB,KAAK,OAAL,CAAa,OAA7B,EAAsC,KAAtC,CAAnC,CADc,CAGd;;AACA,QAAI,MAAM,CAAC,IAAP,IAAe,IAAnB,EAAyB;AACrB,UAAI,MAAM,CAAC,IAAP,CAAY,MAAZ,IAAsB,CAA1B,EAA6B;AACzB;AACA,cAAM,KAAK,GAAG,SAAS,CAAC,IAAV,CAAe,MAAM,CAAC,IAAtB,EAA4B,QAA5B,EAAd;;AACA,YAAI,KAAK,KAAK,CAAV,IAAe,KAAK,KAAK,CAA7B,EAAgC;AAC5B;AACA,cAAI,MAAM,CAAC,MAAP,IAAiB,IAAjB,IAA0B,MAAM,CAAC,MAAP,KAAkB,KAAhD,EAAwD;AACpD,YAAA,MAAM,CAAC,kBAAP,CAA0B,iCAA1B,EAA6D,OAA7D,EAAsE;AAAE,cAAA,IAAI,EAAE,MAAM,CAAC,IAAf;AAAqB,cAAA,MAAM,EAAE,MAAM,CAAC;AAApC,aAAtE;AACH;;AACD,UAAA,MAAM,CAAC,MAAP,GAAgB,KAAhB;AACA,iBAAO,MAAM,CAAC,IAAd;AACH,SAPD,MAOO;AACH,UAAA,MAAM,CAAC,kBAAP,CAA0B,yBAA1B,EAAqD,YAArD,EAAmE,MAAM,CAAC,IAA1E;AACH;AACJ,OAbD,MAaO,IAAI,MAAM,CAAC,IAAP,CAAY,MAAZ,KAAuB,EAA3B,EAA+B;AAClC;AACA,QAAA,MAAM,CAAC,kBAAP,CAA0B,mBAA1B,EAA+C,YAA/C,EAA6D,MAAM,CAAC,IAApE;AACH;AACJ;;AAED,QAAI,MAAM,CAAC,MAAP,IAAiB,IAArB,EAA2B;AACvB,MAAA,MAAM,CAAC,SAAP,GAAmB,IAAnB;AACH;;AAED,WAAO,MAAP;AACH;;AAED,EAAA,MAAM,CAAC,KAAD,EAAW;AACb,QAAI,KAAK,CAAC,OAAN,CAAc,KAAd,CAAJ,EAA0B;AACtB,aAAO,KAAK,CAAC,GAAN,CAAW,CAAD,IAAO,KAAK,MAAL,CAAY,CAAZ,CAAjB,CAAP;AAEH,KAHD,MAGO,IAAI,KAAK,IAAI,IAAb,EAAmB;AACtB,aAAO,KAAK,IAAL,CAAU,KAAV,EAAiB,IAAjB,CAAP;AACH;;AAED,WAAO,IAAP;AACH;;AAED,EAAA,MAAM,CAAC,KAAD,EAAW;AACb,WAAO,SAAS,CAAC,KAAV,CAAgB,KAAK,OAAL,CAAa,MAA7B,EAAqC,KAArC,CAAP;AACH;;AAED,EAAA,SAAS,CAAC,KAAD,EAAW;AAChB,WAAO,SAAS,CAAC,KAAV,CAAgB,KAAK,OAAL,CAAa,SAA7B,EAAwC,KAAxC,CAAP;AACH;;AAEW,SAAL,KAAK,CAAC,MAAD,EAA2C,MAA3C,EAAsD;AAC9D,UAAM,MAAM,GAAQ,EAApB;;AACA,SAAK,MAAM,GAAX,IAAkB,MAAlB,EAA0B;AACtB,UAAI;AACA,cAAM,KAAK,GAAG,MAAM,CAAC,GAAD,CAAN,CAAY,MAAM,CAAC,GAAD,CAAlB,CAAd;;AACA,YAAI,KAAK,KAAK,SAAd,EAAyB;AAAE,UAAA,MAAM,CAAC,GAAD,CAAN,GAAc,KAAd;AAAsB;AACpD,OAHD,CAGE,OAAO,KAAP,EAAc;AACZ,QAAA,KAAK,CAAC,QAAN,GAAiB,GAAjB;AACA,QAAA,KAAK,CAAC,UAAN,GAAmB,MAAM,CAAC,GAAD,CAAzB;AACA,cAAM,KAAN;AACH;AACJ;;AACD,WAAO,MAAP;AACH,GAjaiB,CAmalB;;;AACgB,SAAT,SAAS,CAAC,MAAD,EAAqB,SAArB,EAAoC;AAChD,WAAQ,UAAS,KAAT,EAAmB;AACvB,UAAI,KAAK,IAAI,IAAb,EAAmB;AAAE,eAAO,SAAP;AAAmB;;AACxC,aAAO,MAAM,CAAC,KAAD,CAAb;AACH,KAHD;AAIH,GAzaiB,CA2alB;;;AACmB,SAAZ,YAAY,CAAC,MAAD,EAAqB,YAArB,EAAsC;AACrD,WAAQ,UAAS,KAAT,EAAmB;AACvB,UAAI,CAAC,KAAL,EAAY;AAAE,eAAO,YAAP;AAAsB;;AACpC,aAAO,MAAM,CAAC,KAAD,CAAb;AACH,KAHD;AAIH,GAjbiB,CAmblB;;;AACc,SAAP,OAAO,CAAC,MAAD,EAAmB;AAC7B,WAAQ,UAAS,KAAT,EAAmB;AACvB,UAAI,CAAC,KAAK,CAAC,OAAN,CAAc,KAAd,CAAL,EAA2B;AAAE,cAAM,IAAI,KAAJ,CAAU,cAAV,CAAN;AAAkC;;AAE/D,YAAM,MAAM,GAAQ,EAApB;AAEA,MAAA,KAAK,CAAC,OAAN,CAAc,UAAS,KAAT,EAAc;AACxB,QAAA,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,KAAD,CAAlB;AACH,OAFD;AAIA,aAAO,MAAP;AACH,KAVD;AAWH;;AAhciB;AAuctB,OAAM,SAAU,sBAAV,CAAiC,KAAjC,EAA2C;AAC7C,SAAQ,KAAK,IAAI,OAAO,KAAK,CAAC,mBAAb,KAAsC,UAAvD;AACH;AAED,OAAM,SAAU,mBAAV,CAA8B,KAA9B,EAAwC;AAC1C,SAAQ,sBAAsB,CAAC,KAAD,CAAtB,IAAiC,KAAK,CAAC,mBAAN,EAAzC;AACH,C,CAED;;AACA,IAAI,eAAe,GAAG,KAAtB;AACA,OAAM,SAAU,mBAAV,GAA6B;AAC/B,MAAI,eAAJ,EAAqB;AAAE;AAAS;;AAChC,EAAA,eAAe,GAAG,IAAlB;AAEA,EAAA,OAAO,CAAC,GAAR,CAAY,4BAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,4DAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,EAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,2EAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,oEAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,EAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,yEAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,wEAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,+EAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,EAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,qDAAZ;AACA,EAAA,OAAO,CAAC,GAAR,CAAY,4BAAZ;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            gasPrice: bigNumber,\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            status: Formatter.allowNull(number)\n        };\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: address,\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        return Formatter.check(format, value);\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n        /*\n        if (!transaction.raw) {\n \n             // Very loose providers (e.g. TestRPC) do not provide a signature or raw\n             if (transaction.v && transaction.r && transaction.s) {\n                 let raw = [\n                     stripZeros(hexlify(transaction.nonce)),\n                     stripZeros(hexlify(transaction.gasPrice)),\n                     stripZeros(hexlify(transaction.gasLimit)),\n                     (transaction.to || \"0x\"),\n                     stripZeros(hexlify(transaction.value || \"0x\")),\n                     hexlify(transaction.data || \"0x\"),\n                     stripZeros(hexlify(transaction.v || \"0x\")),\n                     stripZeros(hexlify(transaction.r)),\n                     stripZeros(hexlify(transaction.s)),\n                 ];\n \n                 transaction.raw = rlpEncode(raw);\n             }\n         }\n         */\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nexport function isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nexport function isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n//# sourceMappingURL=formatter.js.map"]},"metadata":{},"sourceType":"module"}