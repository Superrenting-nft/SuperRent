{"ast":null,"code":"var _jsxFileName = \"/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/BytesStringInput.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Input } from \"antd\";\n\nconst {\n  utils,\n  constants\n} = require(\"ethers\");\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero); // current value is the value in bytes32\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: () => {\n        if (mode === \"STRING\") {\n          setMode(\"BYTES32\");\n\n          if (!utils.isHexString(currentValue)) {\n            /* in case user enters invalid bytes32 number, \n               it considers it as string and converts to bytes32 */\n            const changedValue = utils.formatBytes32String(currentValue);\n            setDisplay(changedValue);\n          } else {\n            setDisplay(currentValue);\n          }\n        } else {\n          setMode(\"STRING\");\n\n          if (currentValue && utils.isHexString(currentValue)) {\n            setDisplay(utils.parseBytes32String(currentValue));\n          } else {\n            setDisplay(currentValue);\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, title);\n  };\n\n  let addonAfter;\n\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING ðŸ”€\");\n  } else {\n    addonAfter = option(\"BYTES32 ðŸ”€\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n  return /*#__PURE__*/React.createElement(Input, {\n    placeholder: props.placeholder ? props.placeholder : \"Enter value in \" + mode,\n    autoFocus: props.autoFocus,\n    value: display,\n    addonAfter: addonAfter,\n    onChange: async e => {\n      const newValue = e.target.value;\n\n      if (mode === \"STRING\") {\n        //const ethValue = parseFloat(newValue) / props.price;\n        //setValue(ethValue);\n        if (typeof props.onChange === \"function\") {\n          props.onChange(utils.formatBytes32String(newValue));\n        }\n\n        setValue(utils.formatBytes32String(newValue));\n        setDisplay(newValue);\n      } else {\n        if (typeof props.onChange === \"function\") {\n          props.onChange(newValue);\n        }\n\n        setValue(newValue);\n        setDisplay(newValue);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/BytesStringInput.jsx"],"names":["React","useState","useEffect","Input","utils","constants","require","BytesStringInput","props","mode","setMode","display","setDisplay","value","setValue","HashZero","currentValue","option","title","cursor","isHexString","changedValue","formatBytes32String","parseBytes32String","addonAfter","placeholder","autoFocus","e","newValue","target","onChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Input } from \"antd\";\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n                /* in case user enters invalid bytes32 number, \n                   it considers it as string and converts to bytes32 */\n                const changedValue = utils.formatBytes32String(currentValue);\n                setDisplay(changedValue);\n            }\n            else {\n                setDisplay(currentValue);\n            }\n            \n            \n          } \n          else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } \n            else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING ðŸ”€\");\n  } else {\n    addonAfter = option(\"BYTES32 ðŸ”€\");\n  }\n\n  useEffect(\n    ()=>{\n      if(!currentValue){\n        setDisplay(\"\");\n      }\n    }\n  ,[ currentValue ])\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          //const ethValue = parseFloat(newValue) / props.price;\n          //setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}