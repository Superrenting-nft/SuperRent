{"ast":null,"code":"const stringify = require('json-stable-stringify');\n\nmodule.exports = {\n  cacheIdentifierForPayload: cacheIdentifierForPayload,\n  canCache: canCache,\n  blockTagForPayload: blockTagForPayload,\n  paramsWithoutBlockTag: paramsWithoutBlockTag,\n  blockTagParamIndex: blockTagParamIndex,\n  cacheTypeForPayload: cacheTypeForPayload\n};\n\nfunction cacheIdentifierForPayload(payload, skipBlockRef) {\n  const simpleParams = skipBlockRef ? paramsWithoutBlockTag(payload) : payload.params;\n\n  if (canCache(payload)) {\n    return payload.method + ':' + stringify(simpleParams);\n  } else {\n    return null;\n  }\n}\n\nfunction canCache(payload) {\n  return cacheTypeForPayload(payload) !== 'never';\n}\n\nfunction blockTagForPayload(payload) {\n  let index = blockTagParamIndex(payload); // Block tag param not passed.\n\n  if (index >= payload.params.length) {\n    return null;\n  }\n\n  return payload.params[index];\n}\n\nfunction paramsWithoutBlockTag(payload) {\n  const index = blockTagParamIndex(payload); // Block tag param not passed.\n\n  if (index >= payload.params.length) {\n    return payload.params;\n  } // eth_getBlockByNumber has the block tag first, then the optional includeTx? param\n\n\n  if (payload.method === 'eth_getBlockByNumber') {\n    return payload.params.slice(1);\n  }\n\n  return payload.params.slice(0, index);\n}\n\nfunction blockTagParamIndex(payload) {\n  switch (payload.method) {\n    // blockTag is at index 2\n    case 'eth_getStorageAt':\n      return 2;\n    // blockTag is at index 1\n\n    case 'eth_getBalance':\n    case 'eth_getCode':\n    case 'eth_getTransactionCount':\n    case 'eth_call':\n      return 1;\n    // blockTag is at index 0\n\n    case 'eth_getBlockByNumber':\n      return 0;\n    // there is no blockTag\n\n    default:\n      return undefined;\n  }\n}\n\nfunction cacheTypeForPayload(payload) {\n  switch (payload.method) {\n    // cache permanently\n    case 'web3_clientVersion':\n    case 'web3_sha3':\n    case 'eth_protocolVersion':\n    case 'eth_getBlockTransactionCountByHash':\n    case 'eth_getUncleCountByBlockHash':\n    case 'eth_getCode':\n    case 'eth_getBlockByHash':\n    case 'eth_getTransactionByHash':\n    case 'eth_getTransactionByBlockHashAndIndex':\n    case 'eth_getTransactionReceipt':\n    case 'eth_getUncleByBlockHashAndIndex':\n    case 'eth_getCompilers':\n    case 'eth_compileLLL':\n    case 'eth_compileSolidity':\n    case 'eth_compileSerpent':\n    case 'shh_version':\n    case 'test_permaCache':\n      return 'perma';\n    // cache until fork\n\n    case 'eth_getBlockByNumber':\n    case 'eth_getBlockTransactionCountByNumber':\n    case 'eth_getUncleCountByBlockNumber':\n    case 'eth_getTransactionByBlockNumberAndIndex':\n    case 'eth_getUncleByBlockNumberAndIndex':\n    case 'test_forkCache':\n      return 'fork';\n    // cache for block\n\n    case 'eth_gasPrice':\n    case 'eth_blockNumber':\n    case 'eth_getBalance':\n    case 'eth_getStorageAt':\n    case 'eth_getTransactionCount':\n    case 'eth_call':\n    case 'eth_estimateGas':\n    case 'eth_getFilterLogs':\n    case 'eth_getLogs':\n    case 'test_blockCache':\n      return 'block';\n    // never cache\n\n    case 'net_version':\n    case 'net_peerCount':\n    case 'net_listening':\n    case 'eth_syncing':\n    case 'eth_sign':\n    case 'eth_coinbase':\n    case 'eth_mining':\n    case 'eth_hashrate':\n    case 'eth_accounts':\n    case 'eth_sendTransaction':\n    case 'eth_sendRawTransaction':\n    case 'eth_newFilter':\n    case 'eth_newBlockFilter':\n    case 'eth_newPendingTransactionFilter':\n    case 'eth_uninstallFilter':\n    case 'eth_getFilterChanges':\n    case 'eth_getWork':\n    case 'eth_submitWork':\n    case 'eth_submitHashrate':\n    case 'db_putString':\n    case 'db_getString':\n    case 'db_putHex':\n    case 'db_getHex':\n    case 'shh_post':\n    case 'shh_newIdentity':\n    case 'shh_hasIdentity':\n    case 'shh_newGroup':\n    case 'shh_addToGroup':\n    case 'shh_newFilter':\n    case 'shh_uninstallFilter':\n    case 'shh_getFilterChanges':\n    case 'shh_getMessages':\n    case 'test_neverCache':\n      return 'never';\n  }\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/eth-json-rpc-middleware/cache-utils.js"],"names":["stringify","require","module","exports","cacheIdentifierForPayload","canCache","blockTagForPayload","paramsWithoutBlockTag","blockTagParamIndex","cacheTypeForPayload","payload","skipBlockRef","simpleParams","params","method","index","length","slice","undefined"],"mappings":"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","sourcesContent":["const stringify = require('json-stable-stringify')\n\nmodule.exports = {\n  cacheIdentifierForPayload: cacheIdentifierForPayload,\n  canCache: canCache,\n  blockTagForPayload: blockTagForPayload,\n  paramsWithoutBlockTag: paramsWithoutBlockTag,\n  blockTagParamIndex: blockTagParamIndex,\n  cacheTypeForPayload: cacheTypeForPayload\n}\n\nfunction cacheIdentifierForPayload (payload, skipBlockRef) {\n  const simpleParams = skipBlockRef ? paramsWithoutBlockTag(payload) : payload.params\n  if (canCache(payload)) {\n    return payload.method + ':' + stringify(simpleParams)\n  } else {\n    return null\n  }\n}\n\nfunction canCache (payload) {\n  return cacheTypeForPayload(payload) !== 'never'\n}\n\nfunction blockTagForPayload (payload) {\n  let index = blockTagParamIndex(payload)\n\n  // Block tag param not passed.\n  if (index >= payload.params.length) {\n    return null\n  }\n\n  return payload.params[index]\n}\n\nfunction paramsWithoutBlockTag (payload) {\n  const index = blockTagParamIndex(payload)\n\n  // Block tag param not passed.\n  if (index >= payload.params.length) {\n    return payload.params\n  }\n\n  // eth_getBlockByNumber has the block tag first, then the optional includeTx? param\n  if (payload.method === 'eth_getBlockByNumber') {\n    return payload.params.slice(1)\n  }\n\n  return payload.params.slice(0, index)\n}\n\nfunction blockTagParamIndex (payload) {\n  switch (payload.method) {\n    // blockTag is at index 2\n    case 'eth_getStorageAt':\n      return 2\n    // blockTag is at index 1\n    case 'eth_getBalance':\n    case 'eth_getCode':\n    case 'eth_getTransactionCount':\n    case 'eth_call':\n      return 1\n    // blockTag is at index 0\n    case 'eth_getBlockByNumber':\n      return 0\n    // there is no blockTag\n    default:\n      return undefined\n  }\n}\n\nfunction cacheTypeForPayload (payload) {\n  switch (payload.method) {\n    // cache permanently\n    case 'web3_clientVersion':\n    case 'web3_sha3':\n    case 'eth_protocolVersion':\n    case 'eth_getBlockTransactionCountByHash':\n    case 'eth_getUncleCountByBlockHash':\n    case 'eth_getCode':\n    case 'eth_getBlockByHash':\n    case 'eth_getTransactionByHash':\n    case 'eth_getTransactionByBlockHashAndIndex':\n    case 'eth_getTransactionReceipt':\n    case 'eth_getUncleByBlockHashAndIndex':\n    case 'eth_getCompilers':\n    case 'eth_compileLLL':\n    case 'eth_compileSolidity':\n    case 'eth_compileSerpent':\n    case 'shh_version':\n    case 'test_permaCache':\n      return 'perma'\n\n    // cache until fork\n    case 'eth_getBlockByNumber':\n    case 'eth_getBlockTransactionCountByNumber':\n    case 'eth_getUncleCountByBlockNumber':\n    case 'eth_getTransactionByBlockNumberAndIndex':\n    case 'eth_getUncleByBlockNumberAndIndex':\n    case 'test_forkCache':\n      return 'fork'\n\n    // cache for block\n    case 'eth_gasPrice':\n    case 'eth_blockNumber':\n    case 'eth_getBalance':\n    case 'eth_getStorageAt':\n    case 'eth_getTransactionCount':\n    case 'eth_call':\n    case 'eth_estimateGas':\n    case 'eth_getFilterLogs':\n    case 'eth_getLogs':\n    case 'test_blockCache':\n      return 'block'\n\n    // never cache\n    case 'net_version':\n    case 'net_peerCount':\n    case 'net_listening':\n    case 'eth_syncing':\n    case 'eth_sign':\n    case 'eth_coinbase':\n    case 'eth_mining':\n    case 'eth_hashrate':\n    case 'eth_accounts':\n    case 'eth_sendTransaction':\n    case 'eth_sendRawTransaction':\n    case 'eth_newFilter':\n    case 'eth_newBlockFilter':\n    case 'eth_newPendingTransactionFilter':\n    case 'eth_uninstallFilter':\n    case 'eth_getFilterChanges':\n    case 'eth_getWork':\n    case 'eth_submitWork':\n    case 'eth_submitHashrate':\n    case 'db_putString':\n    case 'db_getString':\n    case 'db_putHex':\n    case 'db_getHex':\n    case 'shh_post':\n    case 'shh_newIdentity':\n    case 'shh_hasIdentity':\n    case 'shh_newGroup':\n    case 'shh_addToGroup':\n    case 'shh_newFilter':\n    case 'shh_uninstallFilter':\n    case 'shh_getFilterChanges':\n    case 'shh_getMessages':\n    case 'test_neverCache':\n      return 'never'\n  }\n}\n"]},"metadata":{},"sourceType":"script"}