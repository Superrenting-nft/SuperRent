{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { AddressZero } from \"@ethersproject/constants\";\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(AddressZero);\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n  return address;\n};\n\nexport default useResolveName;","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/hooks/ResolveName.js"],"names":["useState","useEffect","AddressZero","useResolveName","provider","ensName","address","setAddress","resolveName","then","resolvedAddress"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,0BAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAC5C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAACE,WAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACI,WAAT,CAAqBH,OAArB,EAA8BI,IAA9B,CAAoCC,eAAD,IAAqBH,UAAU,CAACG,eAAD,CAAlE;AACD;AACF,GAJQ,EAIN,CAACN,QAAD,EAAWC,OAAX,CAJM,CAAT;AAMA,SAAOC,OAAP;AACD,CAVD;;AAYA,eAAeH,cAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { AddressZero } from \"@ethersproject/constants\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then((resolvedAddress) => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n"]},"metadata":{},"sourceType":"module"}