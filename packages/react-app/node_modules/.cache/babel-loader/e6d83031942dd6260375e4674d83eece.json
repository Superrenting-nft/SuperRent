{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst eventemitter3_1 = tslib_1.__importDefault(require(\"eventemitter3\"));\n\nconst xhr2_cookies_1 = require(\"xhr2-cookies\");\n\nconst utils_1 = require(\"@walletconnect/utils\");\n\nconst XHR = utils_1.getFromWindow(\"XMLHttpRequest\") || xhr2_cookies_1.XMLHttpRequest;\n\nclass HTTPConnection extends eventemitter3_1.default {\n  constructor(url) {\n    super();\n    this.url = url;\n  }\n\n  formatError(payload, message, code = -1) {\n    return {\n      error: {\n        message,\n        code\n      },\n      id: payload.id,\n      jsonrpc: payload.jsonrpc\n    };\n  }\n\n  send(payload, internal) {\n    return new Promise(resolve => {\n      if (payload.method === \"eth_subscribe\") {\n        const error = this.formatError(payload, \"Subscriptions are not supported by this HTTP endpoint\");\n        this.emit(\"error\", error);\n        return resolve(error);\n      }\n\n      const xhr = new XHR();\n      let responded = false;\n\n      const res = (err, result) => {\n        if (!responded) {\n          xhr.abort();\n          responded = true;\n\n          if (internal) {\n            internal(err, result);\n          } else {\n            const {\n              id,\n              jsonrpc\n            } = payload;\n            const response = err ? {\n              id,\n              jsonrpc,\n              error: {\n                message: err.message,\n                code: err.code\n              }\n            } : {\n              id,\n              jsonrpc,\n              result\n            };\n            this.emit(\"payload\", response);\n            resolve(response);\n          }\n        }\n      };\n\n      xhr.open(\"POST\", this.url, true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.timeout = 60 * 1000;\n      xhr.onerror = res;\n      xhr.ontimeout = res;\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4) {\n          try {\n            const response = JSON.parse(xhr.responseText);\n            res(response.error, response.result);\n          } catch (e) {\n            res(e);\n          }\n        }\n      };\n\n      xhr.send(JSON.stringify(payload));\n    });\n  }\n\n}\n\nexports.default = HTTPConnection;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst eventemitter3_1 = tslib_1.__importDefault(require(\"eventemitter3\"));\nconst xhr2_cookies_1 = require(\"xhr2-cookies\");\nconst utils_1 = require(\"@walletconnect/utils\");\nconst XHR = utils_1.getFromWindow(\"XMLHttpRequest\") || xhr2_cookies_1.XMLHttpRequest;\nclass HTTPConnection extends eventemitter3_1.default {\n    constructor(url) {\n        super();\n        this.url = url;\n    }\n    formatError(payload, message, code = -1) {\n        return {\n            error: { message, code },\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n        };\n    }\n    send(payload, internal) {\n        return new Promise(resolve => {\n            if (payload.method === \"eth_subscribe\") {\n                const error = this.formatError(payload, \"Subscriptions are not supported by this HTTP endpoint\");\n                this.emit(\"error\", error);\n                return resolve(error);\n            }\n            const xhr = new XHR();\n            let responded = false;\n            const res = (err, result) => {\n                if (!responded) {\n                    xhr.abort();\n                    responded = true;\n                    if (internal) {\n                        internal(err, result);\n                    }\n                    else {\n                        const { id, jsonrpc } = payload;\n                        const response = err\n                            ? { id, jsonrpc, error: { message: err.message, code: err.code } }\n                            : { id, jsonrpc, result };\n                        this.emit(\"payload\", response);\n                        resolve(response);\n                    }\n                }\n            };\n            xhr.open(\"POST\", this.url, true);\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n            xhr.timeout = 60 * 1000;\n            xhr.onerror = res;\n            xhr.ontimeout = res;\n            xhr.onreadystatechange = () => {\n                if (xhr.readyState === 4) {\n                    try {\n                        const response = JSON.parse(xhr.responseText);\n                        res(response.error, response.result);\n                    }\n                    catch (e) {\n                        res(e);\n                    }\n                }\n            };\n            xhr.send(JSON.stringify(payload));\n        });\n    }\n}\nexports.default = HTTPConnection;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}