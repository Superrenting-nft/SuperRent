{"ast":null,"code":"const pify = require('pify');\n\nconst BaseBlockTracker = require('./base');\n\nconst sec = 1000;\n\nclass PollingBlockTracker extends BaseBlockTracker {\n  constructor(opts = {}) {\n    // parse + validate args\n    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.');\n    const pollingInterval = opts.pollingInterval || 20 * sec;\n    const retryTimeout = opts.retryTimeout || pollingInterval / 10;\n    const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;\n    const setSkipCacheFlag = opts.setSkipCacheFlag || false; // BaseBlockTracker constructor\n\n    super(Object.assign({\n      blockResetDuration: pollingInterval\n    }, opts)); // config\n\n    this._provider = opts.provider;\n    this._pollingInterval = pollingInterval;\n    this._retryTimeout = retryTimeout;\n    this._keepEventLoopActive = keepEventLoopActive;\n    this._setSkipCacheFlag = setSkipCacheFlag;\n  } //\n  // public\n  //\n  // trigger block polling\n\n\n  async checkForLatestBlock() {\n    await this._updateLatestBlock();\n    return await this.getLatestBlock();\n  } //\n  // private\n  //\n\n\n  _start() {\n    this._performSync().catch(err => this.emit('error', err));\n  }\n\n  async _performSync() {\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock();\n        await timeout(this._pollingInterval, !this._keepEventLoopActive);\n      } catch (err) {\n        const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${err.stack}`);\n\n        try {\n          this.emit('error', newErr);\n        } catch (emitErr) {\n          console.error(newErr);\n        }\n\n        await timeout(this._retryTimeout, !this._keepEventLoopActive);\n      }\n    }\n  }\n\n  async _updateLatestBlock() {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock();\n\n    this._newPotentialLatest(latestBlock);\n  }\n\n  async _fetchLatestBlock() {\n    const req = {\n      jsonrpc: \"2.0\",\n      id: 1,\n      method: 'eth_blockNumber',\n      params: []\n    };\n    if (this._setSkipCacheFlag) req.skipCache = true;\n    const res = await pify(cb => this._provider.sendAsync(req, cb))();\n    if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error}`);\n    return res.result;\n  }\n\n}\n\nmodule.exports = PollingBlockTracker;\n\nfunction timeout(duration, unref) {\n  return new Promise(resolve => {\n    const timoutRef = setTimeout(resolve, duration); // don't keep process open\n\n    if (timoutRef.unref && unref) {\n      timoutRef.unref();\n    }\n  });\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/eth-block-tracker/src/polling.js"],"names":["pify","require","BaseBlockTracker","sec","PollingBlockTracker","constructor","opts","provider","Error","pollingInterval","retryTimeout","keepEventLoopActive","undefined","setSkipCacheFlag","Object","assign","blockResetDuration","_provider","_pollingInterval","_retryTimeout","_keepEventLoopActive","_setSkipCacheFlag","checkForLatestBlock","_updateLatestBlock","getLatestBlock","_start","_performSync","catch","err","emit","_isRunning","timeout","newErr","stack","emitErr","console","error","latestBlock","_fetchLatestBlock","_newPotentialLatest","req","jsonrpc","id","method","params","skipCache","res","cb","sendAsync","result","module","exports","duration","unref","Promise","resolve","timoutRef","setTimeout"],"mappings":"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","sourcesContent":["const pify = require('pify')\nconst BaseBlockTracker = require('./base')\n\nconst sec = 1000\n\nclass PollingBlockTracker extends BaseBlockTracker {\n\n  constructor (opts = {}) {\n    // parse + validate args\n    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.')\n    const pollingInterval = opts.pollingInterval || 20 * sec\n    const retryTimeout = opts.retryTimeout || pollingInterval / 10\n    const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true\n    const setSkipCacheFlag = opts.setSkipCacheFlag || false\n    // BaseBlockTracker constructor\n    super(Object.assign({\n      blockResetDuration: pollingInterval,\n    }, opts))\n    // config\n    this._provider = opts.provider\n    this._pollingInterval = pollingInterval\n    this._retryTimeout = retryTimeout\n    this._keepEventLoopActive = keepEventLoopActive\n    this._setSkipCacheFlag = setSkipCacheFlag\n  }\n\n  //\n  // public\n  //\n\n  // trigger block polling\n  async checkForLatestBlock () {\n    await this._updateLatestBlock()\n    return await this.getLatestBlock()\n  }\n\n  //\n  // private\n  //\n\n  _start () {\n    this._performSync().catch(err => this.emit('error', err))\n  }\n\n  async _performSync () {\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock()\n        await timeout(this._pollingInterval, !this._keepEventLoopActive)\n      } catch (err) {\n        const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${err.stack}`)\n        try {\n          this.emit('error', newErr)\n        } catch (emitErr) {\n          console.error(newErr)\n        }\n        await timeout(this._retryTimeout, !this._keepEventLoopActive)\n      }\n    }\n  }\n\n  async _updateLatestBlock () {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock()\n    this._newPotentialLatest(latestBlock)\n  }\n\n  async _fetchLatestBlock () {\n    const req = { jsonrpc: \"2.0\", id: 1, method: 'eth_blockNumber', params: [] }\n    if (this._setSkipCacheFlag) req.skipCache = true\n    const res = await pify((cb) => this._provider.sendAsync(req, cb))()\n    if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error}`)\n    return res.result\n  }\n\n}\n\nmodule.exports = PollingBlockTracker\n\nfunction timeout (duration, unref) {\n  return new Promise(resolve => {\n    const timoutRef = setTimeout(resolve, duration)\n    // don't keep process open\n    if (timoutRef.unref && unref) {\n      timoutRef.unref()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}