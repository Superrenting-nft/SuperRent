{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\n\nvar Semaphore =\n/** @class */\nfunction () {\n  function Semaphore(_maxConcurrency) {\n    this._maxConcurrency = _maxConcurrency;\n    this._queue = [];\n\n    if (_maxConcurrency <= 0) {\n      throw new Error('semaphore must be initialized to a positive value');\n    }\n\n    this._value = _maxConcurrency;\n  }\n\n  Semaphore.prototype.acquire = function () {\n    var _this = this;\n\n    var locked = this.isLocked();\n    var ticket = new Promise(function (r) {\n      return _this._queue.push(r);\n    });\n    if (!locked) this._dispatch();\n    return ticket;\n  };\n\n  Semaphore.prototype.runExclusive = function (callback) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, value, release;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.acquire()];\n\n          case 1:\n            _a = _b.sent(), value = _a[0], release = _a[1];\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2,, 4, 5]);\n\n            return [4\n            /*yield*/\n            , callback(value)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _b.sent()];\n\n          case 4:\n            release();\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Semaphore.prototype.isLocked = function () {\n    return this._value <= 0;\n  };\n\n  Semaphore.prototype.release = function () {\n    if (this._maxConcurrency > 1) {\n      throw new Error('this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead');\n    }\n\n    if (this._currentReleaser) {\n      var releaser = this._currentReleaser;\n      this._currentReleaser = undefined;\n      releaser();\n    }\n  };\n\n  Semaphore.prototype._dispatch = function () {\n    var _this = this;\n\n    var nextConsumer = this._queue.shift();\n\n    if (!nextConsumer) return;\n    var released = false;\n\n    this._currentReleaser = function () {\n      if (released) return;\n      released = true;\n      _this._value++;\n\n      _this._dispatch();\n    };\n\n    nextConsumer([this._value--, this._currentReleaser]);\n  };\n\n  return Semaphore;\n}();\n\nexport default Semaphore;","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/async-mutex/es6/Semaphore.js"],"names":["__awaiter","__generator","Semaphore","_maxConcurrency","_queue","Error","_value","prototype","acquire","_this","locked","isLocked","ticket","Promise","r","push","_dispatch","runExclusive","callback","_a","value","release","_b","label","sent","trys","_currentReleaser","releaser","undefined","nextConsumer","shift","released"],"mappings":"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","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nvar Semaphore = /** @class */ (function () {\n    function Semaphore(_maxConcurrency) {\n        this._maxConcurrency = _maxConcurrency;\n        this._queue = [];\n        if (_maxConcurrency <= 0) {\n            throw new Error('semaphore must be initialized to a positive value');\n        }\n        this._value = _maxConcurrency;\n    }\n    Semaphore.prototype.acquire = function () {\n        var _this = this;\n        var locked = this.isLocked();\n        var ticket = new Promise(function (r) { return _this._queue.push(r); });\n        if (!locked)\n            this._dispatch();\n        return ticket;\n    };\n    Semaphore.prototype.runExclusive = function (callback) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, value, release;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this.acquire()];\n                    case 1:\n                        _a = _b.sent(), value = _a[0], release = _a[1];\n                        _b.label = 2;\n                    case 2:\n                        _b.trys.push([2, , 4, 5]);\n                        return [4 /*yield*/, callback(value)];\n                    case 3: return [2 /*return*/, _b.sent()];\n                    case 4:\n                        release();\n                        return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Semaphore.prototype.isLocked = function () {\n        return this._value <= 0;\n    };\n    Semaphore.prototype.release = function () {\n        if (this._maxConcurrency > 1) {\n            throw new Error('this method is unavailabel on semaphores with concurrency > 1; use the scoped release returned by acquire instead');\n        }\n        if (this._currentReleaser) {\n            var releaser = this._currentReleaser;\n            this._currentReleaser = undefined;\n            releaser();\n        }\n    };\n    Semaphore.prototype._dispatch = function () {\n        var _this = this;\n        var nextConsumer = this._queue.shift();\n        if (!nextConsumer)\n            return;\n        var released = false;\n        this._currentReleaser = function () {\n            if (released)\n                return;\n            released = true;\n            _this._value++;\n            _this._dispatch();\n        };\n        nextConsumer([this._value--, this._currentReleaser]);\n    };\n    return Semaphore;\n}());\nexport default Semaphore;\n"]},"metadata":{},"sourceType":"module"}