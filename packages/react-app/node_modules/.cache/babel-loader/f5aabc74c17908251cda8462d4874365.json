{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getMobileLinkRegistry = exports.getMobileRegistryEntry = exports.saveMobileLinkInfo = exports.formatIOSMobile = exports.mobileLinkChoiceKey = void 0;\n\nconst local_1 = require(\"./local\");\n\nexports.mobileLinkChoiceKey = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n\nfunction formatIOSMobile(uri, entry) {\n  const encodedUri = encodeURIComponent(uri);\n  return entry.universalLink ? `${entry.universalLink}/wc?uri=${encodedUri}` : entry.deepLink ? `${entry.deepLink}${entry.deepLink.endsWith(\":\") ? \"//\" : \"/\"}wc?uri=${encodedUri}` : \"\";\n}\n\nexports.formatIOSMobile = formatIOSMobile;\n\nfunction saveMobileLinkInfo(data) {\n  const focusUri = data.href.split(\"?\")[0];\n  local_1.setLocal(exports.mobileLinkChoiceKey, Object.assign(Object.assign({}, data), {\n    href: focusUri\n  }));\n}\n\nexports.saveMobileLinkInfo = saveMobileLinkInfo;\n\nfunction getMobileRegistryEntry(registry, name) {\n  return registry.filter(entry => entry.name.toLowerCase().includes(name.toLowerCase()))[0];\n}\n\nexports.getMobileRegistryEntry = getMobileRegistryEntry;\n\nfunction getMobileLinkRegistry(registry, whitelist) {\n  let links = registry;\n\n  if (whitelist && whitelist.length) {\n    links = whitelist.map(name => getMobileRegistryEntry(registry, name));\n  }\n\n  return links;\n}\n\nexports.getMobileLinkRegistry = getMobileLinkRegistry;","map":{"version":3,"sources":["../../src/mobile.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEa,OAAA,CAAA,mBAAA,GAAsB,+BAAtB;;AAEb,SAAgB,eAAhB,CAAgC,GAAhC,EAA6C,KAA7C,EAAwE;AACtE,QAAM,UAAU,GAAW,kBAAkB,CAAC,GAAD,CAA7C;AACA,SAAO,KAAK,CAAC,aAAN,GACH,GAAG,KAAK,CAAC,aAAa,WAAW,UAAU,EADxC,GAEH,KAAK,CAAC,QAAN,GACA,GAAG,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,QAAN,CAAe,QAAf,CAAwB,GAAxB,IAA+B,IAA/B,GAAsC,GAAG,UAAU,UAAU,EADjF,GAEA,EAJJ;AAKD;;AAPD,OAAA,CAAA,eAAA,GAAA,eAAA;;AASA,SAAgB,kBAAhB,CAAmC,IAAnC,EAAwD;AACtD,QAAM,QAAQ,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAjB;AACA,EAAA,OAAA,CAAA,QAAA,CAAS,OAAA,CAAA,mBAAT,EAA4B,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,IAAP,CAAA,EAAW;AAAE,IAAA,IAAI,EAAE;AAAR,GAAX,CAA5B;AACD;;AAHD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAKA,SAAgB,sBAAhB,CACE,QADF,EAEE,IAFF,EAEc;AAEZ,SAAO,QAAQ,CAAC,MAAT,CAAiB,KAAD,IACrB,KAAK,CAAC,IAAN,CAAW,WAAX,GAAyB,QAAzB,CAAkC,IAAI,CAAC,WAAL,EAAlC,CADK,EAEL,CAFK,CAAP;AAGD;;AAPD,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AASA,SAAgB,qBAAhB,CAAsC,QAAtC,EAAiE,SAAjE,EAAqF;AACnF,MAAI,KAAK,GAAG,QAAZ;;AACA,MAAI,SAAS,IAAI,SAAS,CAAC,MAA3B,EAAmC;AACjC,IAAA,KAAK,GAAG,SAAS,CAAC,GAAV,CAAe,IAAD,IAAkB,sBAAsB,CAAC,QAAD,EAAW,IAAX,CAAtD,CAAR;AACD;;AACD,SAAO,KAAP;AACD;;AAND,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMobileLinkRegistry = exports.getMobileRegistryEntry = exports.saveMobileLinkInfo = exports.formatIOSMobile = exports.mobileLinkChoiceKey = void 0;\nconst local_1 = require(\"./local\");\nexports.mobileLinkChoiceKey = \"WALLETCONNECT_DEEPLINK_CHOICE\";\nfunction formatIOSMobile(uri, entry) {\n    const encodedUri = encodeURIComponent(uri);\n    return entry.universalLink\n        ? `${entry.universalLink}/wc?uri=${encodedUri}`\n        : entry.deepLink\n            ? `${entry.deepLink}${entry.deepLink.endsWith(\":\") ? \"//\" : \"/\"}wc?uri=${encodedUri}`\n            : \"\";\n}\nexports.formatIOSMobile = formatIOSMobile;\nfunction saveMobileLinkInfo(data) {\n    const focusUri = data.href.split(\"?\")[0];\n    local_1.setLocal(exports.mobileLinkChoiceKey, Object.assign(Object.assign({}, data), { href: focusUri }));\n}\nexports.saveMobileLinkInfo = saveMobileLinkInfo;\nfunction getMobileRegistryEntry(registry, name) {\n    return registry.filter((entry) => entry.name.toLowerCase().includes(name.toLowerCase()))[0];\n}\nexports.getMobileRegistryEntry = getMobileRegistryEntry;\nfunction getMobileLinkRegistry(registry, whitelist) {\n    let links = registry;\n    if (whitelist && whitelist.length) {\n        links = whitelist.map((name) => getMobileRegistryEntry(registry, name));\n    }\n    return links;\n}\nexports.getMobileLinkRegistry = getMobileLinkRegistry;\n//# sourceMappingURL=mobile.js.map"]},"metadata":{},"sourceType":"script"}