{"ast":null,"code":"/* eslint-disable import/no-dynamic-require */\n\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n/*\n  when you want to load an existing contract using just the provider, address, and ABI\n*/\n\n/*\n  ~ What it does? ~\n\n  Enables you to load an existing mainnet DAI contract using the provider, address and abi\n\n  ~ How can I use? ~\n\n  const mainnetDAIContract = useExternalContractLoader(mainnetProvider, DAI_ADDRESS, DAI_ABI)\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Specify DAI_ADDRESS and DAI_ABI, you can load/write them using constants.js\n*/\n\nexport default function useExternalContractLoader(provider, address, ABI, optionalBytecode) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if (typeof provider !== \"undefined\" && address && ABI) {\n        try {\n          // we need to check to see if this provider has a signer or not\n          let signer;\n          const accounts = await provider.listAccounts();\n\n          if (accounts && accounts.length > 0) {\n            signer = provider.getSigner();\n          } else {\n            signer = provider;\n          }\n\n          const customContract = new Contract(address, ABI, signer);\n          if (optionalBytecode) customContract.bytecode = optionalBytecode;\n          setContract(customContract);\n        } catch (e) {\n          console.log(\"ERROR LOADING EXTERNAL CONTRACT AT \" + address + \" (check provider, address, and ABI)!!\", e);\n        }\n      }\n    }\n\n    loadContract();\n  }, [provider, address, ABI, optionalBytecode]);\n  return contract;\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/hooks/ExternalContractLoader.js"],"names":["Contract","useState","useEffect","useExternalContractLoader","provider","address","ABI","optionalBytecode","contract","setContract","loadContract","signer","accounts","listAccounts","length","getSigner","customContract","bytecode","e","console","log"],"mappings":"AAAA;;AACA;AACA,SAASA,QAAT,QAAyB,0BAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,yBAAT,CAAmCC,QAAnC,EAA6CC,OAA7C,EAAsDC,GAAtD,EAA2DC,gBAA3D,EAA6E;AAC1F,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,EAAxC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeQ,YAAf,GAA8B;AAC5B,UAAI,OAAON,QAAP,KAAoB,WAApB,IAAmCC,OAAnC,IAA8CC,GAAlD,EAAuD;AACrD,YAAI;AACF;AACA,cAAIK,MAAJ;AACA,gBAAMC,QAAQ,GAAG,MAAMR,QAAQ,CAACS,YAAT,EAAvB;;AACA,cAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAlC,EAAqC;AACnCH,YAAAA,MAAM,GAAGP,QAAQ,CAACW,SAAT,EAAT;AACD,WAFD,MAEO;AACLJ,YAAAA,MAAM,GAAGP,QAAT;AACD;;AAED,gBAAMY,cAAc,GAAG,IAAIhB,QAAJ,CAAaK,OAAb,EAAsBC,GAAtB,EAA2BK,MAA3B,CAAvB;AACA,cAAGJ,gBAAH,EAAqBS,cAAc,CAACC,QAAf,GAA0BV,gBAA1B;AAErBE,UAAAA,WAAW,CAACO,cAAD,CAAX;AACD,SAdD,CAcE,OAAOE,CAAP,EAAU;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAY,wCAAsCf,OAAtC,GAA8C,uCAA1D,EAAmGa,CAAnG;AACD;AACF;AACF;;AACDR,IAAAA,YAAY;AACb,GAvBQ,EAuBN,CAACN,QAAD,EAAWC,OAAX,EAAoBC,GAApB,EAAyBC,gBAAzB,CAvBM,CAAT;AAwBA,SAAOC,QAAP;AACD","sourcesContent":["/* eslint-disable import/no-dynamic-require */\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n\n/*\n  when you want to load an existing contract using just the provider, address, and ABI\n*/\n\n/*\n  ~ What it does? ~\n\n  Enables you to load an existing mainnet DAI contract using the provider, address and abi\n\n  ~ How can I use? ~\n\n  const mainnetDAIContract = useExternalContractLoader(mainnetProvider, DAI_ADDRESS, DAI_ABI)\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Specify DAI_ADDRESS and DAI_ABI, you can load/write them using constants.js\n*/\nexport default function useExternalContractLoader(provider, address, ABI, optionalBytecode) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if (typeof provider !== \"undefined\" && address && ABI) {\n        try {\n          // we need to check to see if this provider has a signer or not\n          let signer;\n          const accounts = await provider.listAccounts();\n          if (accounts && accounts.length > 0) {\n            signer = provider.getSigner();\n          } else {\n            signer = provider;\n          }\n\n          const customContract = new Contract(address, ABI, signer);\n          if(optionalBytecode) customContract.bytecode = optionalBytecode\n\n          setContract(customContract);\n        } catch (e) {\n          console.log(\"ERROR LOADING EXTERNAL CONTRACT AT \"+address+\" (check provider, address, and ABI)!!\", e);\n        }\n      }\n    }\n    loadContract();\n  }, [provider, address, ABI, optionalBytecode]);\n  return contract;\n}\n"]},"metadata":{},"sourceType":"module"}