{"ast":null,"code":"/* eslint-disable import/no-dynamic-require */\n\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts \n                                              or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts \n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n*/\n\nconst loadContract = (contractName, signer) => {\n  const newContract = new Contract(require(`../contracts/${contractName}.address.js`), require(`../contracts/${contractName}.abi.js`), signer);\n\n  try {\n    newContract.bytecode = require(`../contracts/${contractName}.bytecode.js`);\n  } catch (e) {\n    console.log(e);\n  }\n\n  return newContract;\n};\n\nexport default function useContractLoader(providerOrSigner) {\n  const [contracts, setContracts] = useState();\n  useEffect(() => {\n    async function loadContracts() {\n      if (typeof providerOrSigner !== \"undefined\") {\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n          } else {\n            signer = providerOrSigner;\n          }\n\n          const contractList = require(\"../contracts/contracts.js\");\n\n          const newContracts = contractList.reduce((accumulator, contractName) => {\n            accumulator[contractName] = loadContract(contractName, signer);\n            return accumulator;\n          }, {});\n          setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n\n    loadContracts();\n  }, [providerOrSigner]);\n  return contracts;\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/hooks/ContractLoader.js"],"names":["Contract","useState","useEffect","loadContract","contractName","signer","newContract","require","bytecode","e","console","log","useContractLoader","providerOrSigner","contracts","setContracts","loadContracts","accounts","listAccounts","length","getSigner","contractList","newContracts","reduce","accumulator"],"mappings":"AAAA;;AACA;AACA,SAASA,QAAT,QAAyB,0BAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAY,GAAG,CAACC,YAAD,EAAeC,MAAf,KAA0B;AAC7C,QAAMC,WAAW,GAAG,IAAIN,QAAJ,CAClBO,OAAO,CAAE,gBAAeH,YAAa,aAA9B,CADW,EAElBG,OAAO,CAAE,gBAAeH,YAAa,SAA9B,CAFW,EAGlBC,MAHkB,CAApB;;AAKA,MAAI;AACFC,IAAAA,WAAW,CAACE,QAAZ,GAAuBD,OAAO,CAAE,gBAAeH,YAAa,cAA9B,CAA9B;AACD,GAFD,CAEE,OAAOK,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;;AACD,SAAOH,WAAP;AACD,CAZD;;AAcA,eAAe,SAASM,iBAAT,CAA2BC,gBAA3B,EAA6C;AAC1D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,EAA1C;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAec,aAAf,GAA+B;AAC7B,UAAI,OAAOH,gBAAP,KAA4B,WAAhC,EAA6C;AAC3C,YAAI;AACF;AACA,cAAIR,MAAJ;AACA,cAAIY,QAAJ;;AACA,cAAIJ,gBAAgB,IAAI,OAAOA,gBAAgB,CAACK,YAAxB,KAAyC,UAAjE,EAA6E;AAC3ED,YAAAA,QAAQ,GAAG,MAAMJ,gBAAgB,CAACK,YAAjB,EAAjB;AACD;;AAED,cAAID,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAlC,EAAqC;AACnCd,YAAAA,MAAM,GAAGQ,gBAAgB,CAACO,SAAjB,EAAT;AACD,WAFD,MAEO;AACLf,YAAAA,MAAM,GAAGQ,gBAAT;AACD;;AAED,gBAAMQ,YAAY,GAAGd,OAAO,CAAC,2BAAD,CAA5B;;AAEA,gBAAMe,YAAY,GAAGD,YAAY,CAACE,MAAb,CAAoB,CAACC,WAAD,EAAcpB,YAAd,KAA+B;AACtEoB,YAAAA,WAAW,CAACpB,YAAD,CAAX,GAA4BD,YAAY,CAACC,YAAD,EAAeC,MAAf,CAAxC;AACA,mBAAOmB,WAAP;AACD,WAHoB,EAGlB,EAHkB,CAArB;AAIAT,UAAAA,YAAY,CAACO,YAAD,CAAZ;AACD,SArBD,CAqBE,OAAOb,CAAP,EAAU;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCF,CAAzC;AACD;AACF;AACF;;AACDO,IAAAA,aAAa;AACd,GA9BQ,EA8BN,CAACH,gBAAD,CA9BM,CAAT;AA+BA,SAAOC,SAAP;AACD","sourcesContent":["/* eslint-disable import/no-dynamic-require */\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts \n                                              or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts \n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n*/\n\nconst loadContract = (contractName, signer) => {\n  const newContract = new Contract(\n    require(`../contracts/${contractName}.address.js`),\n    require(`../contracts/${contractName}.abi.js`),\n    signer,\n  );\n  try {\n    newContract.bytecode = require(`../contracts/${contractName}.bytecode.js`);\n  } catch (e) {\n    console.log(e);\n  }\n  return newContract;\n};\n\nexport default function useContractLoader(providerOrSigner) {\n  const [contracts, setContracts] = useState();\n  useEffect(() => {\n    async function loadContracts() {\n      if (typeof providerOrSigner !== \"undefined\") {\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let accounts;\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n          } else {\n            signer = providerOrSigner;\n          }\n\n          const contractList = require(\"../contracts/contracts.js\");\n\n          const newContracts = contractList.reduce((accumulator, contractName) => {\n            accumulator[contractName] = loadContract(contractName, signer);\n            return accumulator;\n          }, {});\n          setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n  }, [providerOrSigner]);\n  return contracts;\n}\n"]},"metadata":{},"sourceType":"module"}