{"ast":null,"code":"const extend = require('xtend');\n\nconst createRandomId = require('json-rpc-random-id')();\n\nmodule.exports = EthQuery;\n\nfunction EthQuery(provider) {\n  const self = this;\n  self.currentProvider = provider;\n} //\n// base queries\n//\n// default block\n\n\nEthQuery.prototype.getBalance = generateFnWithDefaultBlockFor(2, 'eth_getBalance');\nEthQuery.prototype.getCode = generateFnWithDefaultBlockFor(2, 'eth_getCode');\nEthQuery.prototype.getTransactionCount = generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount');\nEthQuery.prototype.getStorageAt = generateFnWithDefaultBlockFor(3, 'eth_getStorageAt');\nEthQuery.prototype.call = generateFnWithDefaultBlockFor(2, 'eth_call'); // standard\n\nEthQuery.prototype.protocolVersion = generateFnFor('eth_protocolVersion');\nEthQuery.prototype.syncing = generateFnFor('eth_syncing');\nEthQuery.prototype.coinbase = generateFnFor('eth_coinbase');\nEthQuery.prototype.mining = generateFnFor('eth_mining');\nEthQuery.prototype.hashrate = generateFnFor('eth_hashrate');\nEthQuery.prototype.gasPrice = generateFnFor('eth_gasPrice');\nEthQuery.prototype.accounts = generateFnFor('eth_accounts');\nEthQuery.prototype.blockNumber = generateFnFor('eth_blockNumber');\nEthQuery.prototype.getBlockTransactionCountByHash = generateFnFor('eth_getBlockTransactionCountByHash');\nEthQuery.prototype.getBlockTransactionCountByNumber = generateFnFor('eth_getBlockTransactionCountByNumber');\nEthQuery.prototype.getUncleCountByBlockHash = generateFnFor('eth_getUncleCountByBlockHash');\nEthQuery.prototype.getUncleCountByBlockNumber = generateFnFor('eth_getUncleCountByBlockNumber');\nEthQuery.prototype.sign = generateFnFor('eth_sign');\nEthQuery.prototype.sendTransaction = generateFnFor('eth_sendTransaction');\nEthQuery.prototype.sendRawTransaction = generateFnFor('eth_sendRawTransaction');\nEthQuery.prototype.estimateGas = generateFnFor('eth_estimateGas');\nEthQuery.prototype.getBlockByHash = generateFnFor('eth_getBlockByHash');\nEthQuery.prototype.getBlockByNumber = generateFnFor('eth_getBlockByNumber');\nEthQuery.prototype.getTransactionByHash = generateFnFor('eth_getTransactionByHash');\nEthQuery.prototype.getTransactionByBlockHashAndIndex = generateFnFor('eth_getTransactionByBlockHashAndIndex');\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex');\nEthQuery.prototype.getTransactionReceipt = generateFnFor('eth_getTransactionReceipt');\nEthQuery.prototype.getUncleByBlockHashAndIndex = generateFnFor('eth_getUncleByBlockHashAndIndex');\nEthQuery.prototype.getUncleByBlockNumberAndIndex = generateFnFor('eth_getUncleByBlockNumberAndIndex');\nEthQuery.prototype.getCompilers = generateFnFor('eth_getCompilers');\nEthQuery.prototype.compileLLL = generateFnFor('eth_compileLLL');\nEthQuery.prototype.compileSolidity = generateFnFor('eth_compileSolidity');\nEthQuery.prototype.compileSerpent = generateFnFor('eth_compileSerpent');\nEthQuery.prototype.newFilter = generateFnFor('eth_newFilter');\nEthQuery.prototype.newBlockFilter = generateFnFor('eth_newBlockFilter');\nEthQuery.prototype.newPendingTransactionFilter = generateFnFor('eth_newPendingTransactionFilter');\nEthQuery.prototype.uninstallFilter = generateFnFor('eth_uninstallFilter');\nEthQuery.prototype.getFilterChanges = generateFnFor('eth_getFilterChanges');\nEthQuery.prototype.getFilterLogs = generateFnFor('eth_getFilterLogs');\nEthQuery.prototype.getLogs = generateFnFor('eth_getLogs');\nEthQuery.prototype.getWork = generateFnFor('eth_getWork');\nEthQuery.prototype.submitWork = generateFnFor('eth_submitWork');\nEthQuery.prototype.submitHashrate = generateFnFor('eth_submitHashrate'); // network level\n\nEthQuery.prototype.sendAsync = function (opts, cb) {\n  const self = this;\n  self.currentProvider.sendAsync(createPayload(opts), function (err, response) {\n    if (!err && response.error) err = new Error('EthQuery - RPC Error - ' + response.error.message);\n    if (err) return cb(err);\n    cb(null, response.result);\n  });\n}; // util\n\n\nfunction generateFnFor(methodName) {\n  return function () {\n    const self = this;\n    var args = [].slice.call(arguments);\n    var cb = args.pop();\n    self.sendAsync({\n      method: methodName,\n      params: args\n    }, cb);\n  };\n}\n\nfunction generateFnWithDefaultBlockFor(argCount, methodName) {\n  return function () {\n    const self = this;\n    var args = [].slice.call(arguments);\n    var cb = args.pop(); // set optional default block param\n\n    if (args.length < argCount) args.push('latest');\n    self.sendAsync({\n      method: methodName,\n      params: args\n    }, cb);\n  };\n}\n\nfunction createPayload(data) {\n  return extend({\n    // defaults\n    id: createRandomId(),\n    jsonrpc: '2.0',\n    params: [] // user-specified\n\n  }, data);\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/eth-query/index.js"],"names":["extend","require","createRandomId","module","exports","EthQuery","provider","self","currentProvider","prototype","getBalance","generateFnWithDefaultBlockFor","getCode","getTransactionCount","getStorageAt","call","protocolVersion","generateFnFor","syncing","coinbase","mining","hashrate","gasPrice","accounts","blockNumber","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getUncleCountByBlockHash","getUncleCountByBlockNumber","sign","sendTransaction","sendRawTransaction","estimateGas","getBlockByHash","getBlockByNumber","getTransactionByHash","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getCompilers","compileLLL","compileSolidity","compileSerpent","newFilter","newBlockFilter","newPendingTransactionFilter","uninstallFilter","getFilterChanges","getFilterLogs","getLogs","getWork","submitWork","submitHashrate","sendAsync","opts","cb","createPayload","err","response","error","Error","message","result","methodName","args","slice","arguments","pop","method","params","argCount","length","push","data","id","jsonrpc"],"mappings":"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","sourcesContent":["const extend = require('xtend')\nconst createRandomId = require('json-rpc-random-id')()\n\nmodule.exports = EthQuery\n\n\nfunction EthQuery(provider){\n  const self = this\n  self.currentProvider = provider\n}\n\n//\n// base queries\n//\n\n// default block\nEthQuery.prototype.getBalance =                          generateFnWithDefaultBlockFor(2, 'eth_getBalance')\nEthQuery.prototype.getCode =                             generateFnWithDefaultBlockFor(2, 'eth_getCode')\nEthQuery.prototype.getTransactionCount =                 generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount')\nEthQuery.prototype.getStorageAt =                        generateFnWithDefaultBlockFor(3, 'eth_getStorageAt')\nEthQuery.prototype.call =                                generateFnWithDefaultBlockFor(2, 'eth_call')\n// standard\nEthQuery.prototype.protocolVersion =                     generateFnFor('eth_protocolVersion')\nEthQuery.prototype.syncing =                             generateFnFor('eth_syncing')\nEthQuery.prototype.coinbase =                            generateFnFor('eth_coinbase')\nEthQuery.prototype.mining =                              generateFnFor('eth_mining')\nEthQuery.prototype.hashrate =                            generateFnFor('eth_hashrate')\nEthQuery.prototype.gasPrice =                            generateFnFor('eth_gasPrice')\nEthQuery.prototype.accounts =                            generateFnFor('eth_accounts')\nEthQuery.prototype.blockNumber =                         generateFnFor('eth_blockNumber')\nEthQuery.prototype.getBlockTransactionCountByHash =      generateFnFor('eth_getBlockTransactionCountByHash')\nEthQuery.prototype.getBlockTransactionCountByNumber =    generateFnFor('eth_getBlockTransactionCountByNumber')\nEthQuery.prototype.getUncleCountByBlockHash =            generateFnFor('eth_getUncleCountByBlockHash')\nEthQuery.prototype.getUncleCountByBlockNumber =          generateFnFor('eth_getUncleCountByBlockNumber')\nEthQuery.prototype.sign =                                generateFnFor('eth_sign')\nEthQuery.prototype.sendTransaction =                     generateFnFor('eth_sendTransaction')\nEthQuery.prototype.sendRawTransaction =                  generateFnFor('eth_sendRawTransaction')\nEthQuery.prototype.estimateGas =                         generateFnFor('eth_estimateGas')\nEthQuery.prototype.getBlockByHash =                      generateFnFor('eth_getBlockByHash')\nEthQuery.prototype.getBlockByNumber =                    generateFnFor('eth_getBlockByNumber')\nEthQuery.prototype.getTransactionByHash =                generateFnFor('eth_getTransactionByHash')\nEthQuery.prototype.getTransactionByBlockHashAndIndex =   generateFnFor('eth_getTransactionByBlockHashAndIndex')\nEthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex')\nEthQuery.prototype.getTransactionReceipt =               generateFnFor('eth_getTransactionReceipt')\nEthQuery.prototype.getUncleByBlockHashAndIndex =         generateFnFor('eth_getUncleByBlockHashAndIndex')\nEthQuery.prototype.getUncleByBlockNumberAndIndex =       generateFnFor('eth_getUncleByBlockNumberAndIndex')\nEthQuery.prototype.getCompilers =                        generateFnFor('eth_getCompilers')\nEthQuery.prototype.compileLLL =                          generateFnFor('eth_compileLLL')\nEthQuery.prototype.compileSolidity =                     generateFnFor('eth_compileSolidity')\nEthQuery.prototype.compileSerpent =                      generateFnFor('eth_compileSerpent')\nEthQuery.prototype.newFilter =                           generateFnFor('eth_newFilter')\nEthQuery.prototype.newBlockFilter =                      generateFnFor('eth_newBlockFilter')\nEthQuery.prototype.newPendingTransactionFilter =         generateFnFor('eth_newPendingTransactionFilter')\nEthQuery.prototype.uninstallFilter =                     generateFnFor('eth_uninstallFilter')\nEthQuery.prototype.getFilterChanges =                    generateFnFor('eth_getFilterChanges')\nEthQuery.prototype.getFilterLogs =                       generateFnFor('eth_getFilterLogs')\nEthQuery.prototype.getLogs =                             generateFnFor('eth_getLogs')\nEthQuery.prototype.getWork =                             generateFnFor('eth_getWork')\nEthQuery.prototype.submitWork =                          generateFnFor('eth_submitWork')\nEthQuery.prototype.submitHashrate =                      generateFnFor('eth_submitHashrate')\n\n// network level\n\nEthQuery.prototype.sendAsync = function(opts, cb){\n  const self = this\n  self.currentProvider.sendAsync(createPayload(opts), function(err, response){\n    if (!err && response.error) err = new Error('EthQuery - RPC Error - '+response.error.message)\n    if (err) return cb(err)\n    cb(null, response.result)\n  })\n}\n\n// util\n\nfunction generateFnFor(methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction generateFnWithDefaultBlockFor(argCount, methodName){\n  return function(){\n    const self = this\n    var args = [].slice.call(arguments)\n    var cb = args.pop()\n    // set optional default block param\n    if (args.length < argCount) args.push('latest')\n    self.sendAsync({\n      method: methodName,\n      params: args,\n    }, cb)\n  }\n}\n\nfunction createPayload(data){\n  return extend({\n    // defaults\n    id: createRandomId(),\n    jsonrpc: '2.0',\n    params: [],\n    // user-specified\n  }, data)\n}\n"]},"metadata":{},"sourceType":"script"}