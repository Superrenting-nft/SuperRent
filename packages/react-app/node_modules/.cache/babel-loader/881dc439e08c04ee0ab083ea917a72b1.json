{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _require = require('ethereum-cryptography/keccak'),\n    keccak224 = _require.keccak224,\n    keccak384 = _require.keccak384,\n    k256 = _require.keccak256,\n    keccak512 = _require.keccak512;\n\nvar secp256k1 = require('./secp256k1-adapter');\n\nvar assert = require('assert');\n\nvar rlp = require('rlp');\n\nvar BN = require('bn.js');\n\nvar createHash = require('create-hash');\n\nvar Buffer = require('safe-buffer').Buffer;\n\nObject.assign(exports, require('ethjs-util'));\n/**\n * the max integer that this VM can handle (a ```BN```)\n * @var {BN} MAX_INTEGER\n */\n\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n/**\n * 2^256 (a ```BN```)\n * @var {BN} TWO_POW256\n */\n\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);\n/**\n * Keccak-256 hash of null (a ```String```)\n * @var {String} KECCAK256_NULL_S\n */\n\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\nexports.SHA3_NULL_S = exports.KECCAK256_NULL_S;\n/**\n * Keccak-256 hash of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_NULL\n */\n\nexports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');\nexports.SHA3_NULL = exports.KECCAK256_NULL;\n/**\n * Keccak-256 of an RLP of an empty array (a ```String```)\n * @var {String} KECCAK256_RLP_ARRAY_S\n */\n\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\nexports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;\n/**\n * Keccak-256 of an RLP of an empty array (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP_ARRAY\n */\n\nexports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\nexports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;\n/**\n * Keccak-256 hash of the RLP of null  (a ```String```)\n * @var {String} KECCAK256_RLP_S\n */\n\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\nexports.SHA3_RLP_S = exports.KECCAK256_RLP_S;\n/**\n * Keccak-256 hash of the RLP of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP\n */\n\nexports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');\nexports.SHA3_RLP = exports.KECCAK256_RLP;\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n * @var {Function}\n */\n\nexports.BN = BN;\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n * @var {Function}\n */\n\nexports.rlp = rlp;\n/**\n * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)\n * @var {Object}\n */\n\nexports.secp256k1 = secp256k1;\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\n\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n  * Returns a zero address\n  * @method zeroAddress\n  * @return {String}\n  */\n\n\nexports.zeroAddress = function () {\n  var addressLength = 20;\n  var zeroAddress = exports.zeros(addressLength);\n  return exports.bufferToHex(zeroAddress);\n};\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\n\n\nexports.setLengthLeft = exports.setLength = function (msg, length, right) {\n  var buf = exports.zeros(length);\n  msg = exports.toBuffer(msg);\n\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n\n    return msg.slice(-length);\n  }\n};\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\n\n\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer` or an `Array`\n * @param {Buffer|Array|String} a\n * @return {Buffer|Array|String}\n */\n\n\nexports.unpad = exports.stripZeros = function (a) {\n  a = exports.stripHexPrefix(a);\n  var first = a[0];\n\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n\n  return a;\n};\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param {*} v the value\n */\n\n\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (exports.isHexString(v)) {\n        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');\n      } else {\n        v = Buffer.from(v);\n      }\n    } else if (typeof v === 'number') {\n      v = exports.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n\n  return v;\n};\n/**\n * Converts a `Buffer` to a `Number`\n * @param {Buffer} buf\n * @return {Number}\n * @throws If the input number exceeds 53 bits.\n */\n\n\nexports.bufferToInt = function (buf) {\n  return new BN(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a hex `String`\n * @param {Buffer} buf\n * @return {String}\n */\n\n\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param {Buffer} num\n * @return {BN}\n */\n\n\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param {BN} num\n * @return {Buffer}\n */\n\n\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Creates Keccak hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the Keccak width\n * @return {Buffer}\n */\n\n\nexports.keccak = function (a, bits) {\n  a = exports.toBuffer(a);\n  if (!bits) bits = 256;\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n\n    case 256:\n      {\n        return k256(a);\n      }\n\n    case 384:\n      {\n        return keccak384(a);\n      }\n\n    case 512:\n      {\n        return keccak512(a);\n      }\n\n    default:\n      {\n        throw new Error('Invald algorithm: keccak' + bits);\n      }\n  }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256)\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\n\n\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n/**\n * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the SHA-3 width\n * @return {Buffer}\n */\n\n\nexports.sha3 = exports.keccak;\n/**\n * Creates SHA256 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\n\nexports.sha256 = function (a) {\n  a = exports.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n/**\n * Creates RIPEMD160 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Boolean} padded whether it should be padded to 256 bits or not\n * @return {Buffer}\n */\n\n\nexports.ripemd160 = function (a, padded) {\n  a = exports.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n\n  if (padded === true) {\n    return exports.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\n\n\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n * @param {Buffer} privateKey\n * @return {Boolean}\n */\n\n\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1.privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Boolean}\n */\n\n\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return secp256k1.publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Buffer}\n */\n\n\nexports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {\n  pubKey = exports.toBuffer(pubKey);\n\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n  }\n\n  assert(pubKey.length === 64); // Only take the lower 160bits of the hash\n\n  return exports.keccak(pubKey).slice(-20);\n};\n/**\n * Returns the ethereum public key of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\n\n\nvar privateToPublic = exports.privateToPublic = function (privateKey) {\n  privateKey = exports.toBuffer(privateKey); // skip the type flag and use the X, Y points\n\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n/**\n * Converts a public key to the Ethereum format.\n * @param {Buffer} publicKey\n * @return {Buffer}\n */\n\n\nexports.importPublic = function (publicKey) {\n  publicKey = exports.toBuffer(publicKey);\n\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n  }\n\n  return publicKey;\n};\n/**\n * ECDSA sign\n * @param {Buffer} msgHash\n * @param {Buffer} privateKey\n * @return {Object}\n */\n\n\nexports.ecsign = function (msgHash, privateKey) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n  var ret = {};\n  ret.r = sig.signature.slice(0, 32);\n  ret.s = sig.signature.slice(32, 64);\n  ret.v = sig.recovery + 27;\n  return ret;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n * @param message\n * @returns {Buffer} hash\n */\n\n\nexports.hashPersonalMessage = function (message) {\n  var prefix = exports.toBuffer('\\x19Ethereum Signed Message:\\n' + message.length.toString());\n  return exports.keccak(Buffer.concat([prefix, message]));\n};\n/**\n * ECDSA public key recovery from signature\n * @param {Buffer} msgHash\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {Buffer} publicKey\n */\n\n\nexports.ecrecover = function (msgHash, v, r, s) {\n  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);\n  var recovery = v - 27;\n\n  if (recovery !== 0 && recovery !== 1) {\n    throw new Error('Invalid signature v value');\n  }\n\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {String} sig\n */\n\n\nexports.toRpcSig = function (v, r, s) {\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (v !== 27 && v !== 28) {\n    throw new Error('Invalid recovery id');\n  } // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053\n\n\n  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * @param {String} sig\n * @return {Object}\n */\n\n\nexports.fromRpcSig = function (sig) {\n  sig = exports.toBuffer(sig); // NOTE: with potential introduction of chainId this might need to be updated\n\n  if (sig.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  var v = sig[64]; // support both versions of `eth_sign` responses\n\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64)\n  };\n};\n/**\n * Returns the ethereum address of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\n\n\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(privateToPublic(privateKey));\n};\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too\n * @param {String} address\n * @return {Boolean}\n */\n\n\nexports.isValidAddress = function (address) {\n  return /^0x[0-9a-fA-F]{40}$/.test(address);\n};\n/**\n  * Checks if a given address is a zero address\n  * @method isZeroAddress\n  * @param {String} address\n  * @return {Boolean}\n  */\n\n\nexports.isZeroAddress = function (address) {\n  var zeroAddress = exports.zeroAddress();\n  return zeroAddress === exports.addHexPrefix(address);\n};\n/**\n * Returns a checksummed address\n * @param {String} address\n * @return {String}\n */\n\n\nexports.toChecksumAddress = function (address) {\n  address = exports.stripHexPrefix(address).toLowerCase();\n  var hash = exports.keccak(address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n/**\n * Checks if the address is a valid checksummed address\n * @param {Buffer} address\n * @return {Boolean}\n */\n\n\nexports.isValidChecksumAddress = function (address) {\n  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;\n};\n/**\n * Generates an address of a newly created contract\n * @param {Buffer} from the address which is creating this new address\n * @param {Buffer} nonce the nonce of the from account\n * @return {Buffer}\n */\n\n\nexports.generateAddress = function (from, nonce) {\n  from = exports.toBuffer(from);\n  nonce = new BN(nonce);\n\n  if (nonce.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    nonce = null;\n  } else {\n    nonce = Buffer.from(nonce.toArray());\n  } // Only take the lower 160bits of the hash\n\n\n  return exports.rlphash([from, nonce]).slice(-20);\n};\n/**\n * Returns true if the supplied address belongs to a precompiled account (Byzantium)\n * @param {Buffer|String} address\n * @return {Boolean}\n */\n\n\nexports.isPrecompiled = function (address) {\n  var a = exports.unpad(address);\n  return a.length === 1 && a[0] >= 1 && a[0] <= 8;\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\"\n * @param {String} str\n * @return {String}\n */\n\n\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return exports.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Validate ECDSA signature\n * @method isValidSignature\n * @param {Buffer} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @param {Boolean} [homestead=true]\n * @return {Boolean}\n */\n\n\nexports.isValidSignature = function (v, r, s, homestead) {\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (v !== 27 && v !== 28) {\n    return false;\n  }\n\n  r = new BN(r);\n  s = new BN(s);\n\n  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON\n * @param {Buffer|Array} ba\n * @return {Array|String|null}\n */\n\n\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return '0x' + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n\n    return array;\n  }\n};\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param {Object} self the `Object` to define properties on\n * @param {Array} fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param {*} data data to be validated against the definitions\n */\n\n\nexports.defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = []; // attach the `toJSON`\n\n  self.toJSON = function (label) {\n    if (label) {\n      var obj = {};\n\n      self._fields.forEach(function (field) {\n        obj[field] = '0x' + self[field].toString('hex');\n      });\n\n      return obj;\n    }\n\n    return exports.baToJSON(this.raw);\n  };\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n\n    function getter() {\n      return self.raw[i];\n    }\n\n    function setter(v) {\n      v = exports.toBuffer(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = exports.stripZeros(v);\n        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    } // attach alias\n\n\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  }); // if the constuctor is passed data\n\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(exports.stripHexPrefix(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      } // make sure all the items are buffers\n\n\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = exports.toBuffer(d);\n      });\n    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n      var keys = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/ethereumjs-util/dist/index.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_require","require","keccak224","keccak384","k256","keccak256","keccak512","secp256k1","assert","rlp","BN","createHash","Buffer","Object","assign","exports","MAX_INTEGER","TWO_POW256","KECCAK256_NULL_S","SHA3_NULL_S","KECCAK256_NULL","from","SHA3_NULL","KECCAK256_RLP_ARRAY_S","SHA3_RLP_ARRAY_S","KECCAK256_RLP_ARRAY","SHA3_RLP_ARRAY","KECCAK256_RLP_S","SHA3_RLP_S","KECCAK256_RLP","SHA3_RLP","zeros","bytes","allocUnsafe","fill","zeroAddress","addressLength","bufferToHex","setLengthLeft","setLength","msg","length","right","buf","toBuffer","copy","slice","setLengthRight","unpad","stripZeros","a","stripHexPrefix","first","toString","v","isBuffer","Array","isArray","isHexString","padToEven","intToBuffer","undefined","isBN","toArrayLike","toArray","Error","bufferToInt","toNumber","fromSigned","num","fromTwos","toUnsigned","toTwos","keccak","bits","sha3","sha256","update","digest","ripemd160","padded","hash","rlphash","encode","isValidPrivate","privateKey","privateKeyVerify","isValidPublic","publicKey","sanitize","publicKeyVerify","concat","pubToAddress","publicToAddress","pubKey","publicKeyConvert","privateToPublic","publicKeyCreate","importPublic","ecsign","msgHash","sig","sign","ret","r","signature","s","recovery","hashPersonalMessage","message","prefix","ecrecover","senderPubKey","recover","toRpcSig","fromRpcSig","privateToAddress","isValidAddress","address","test","isZeroAddress","addHexPrefix","toChecksumAddress","toLowerCase","i","parseInt","toUpperCase","isValidChecksumAddress","generateAddress","nonce","isZero","isPrecompiled","str","isHexPrefixed","isValidSignature","homestead","SECP256K1_N_DIV_2","SECP256K1_N","gt","cmp","baToJSON","ba","array","push","defineProperties","self","fields","data","raw","_fields","toJSON","label","forEach","field","serialize","name","getter","setter","allowZero","allowLess","defineProperty","enumerable","configurable","get","set","default","alias","decode","d","keys","indexOf"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _require = require('ethereum-cryptography/keccak'),\n    keccak224 = _require.keccak224,\n    keccak384 = _require.keccak384,\n    k256 = _require.keccak256,\n    keccak512 = _require.keccak512;\n\nvar secp256k1 = require('./secp256k1-adapter');\nvar assert = require('assert');\nvar rlp = require('rlp');\nvar BN = require('bn.js');\nvar createHash = require('create-hash');\nvar Buffer = require('safe-buffer').Buffer;\nObject.assign(exports, require('ethjs-util'));\n\n/**\n * the max integer that this VM can handle (a ```BN```)\n * @var {BN} MAX_INTEGER\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n\n/**\n * 2^256 (a ```BN```)\n * @var {BN} TWO_POW256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);\n\n/**\n * Keccak-256 hash of null (a ```String```)\n * @var {String} KECCAK256_NULL_S\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\nexports.SHA3_NULL_S = exports.KECCAK256_NULL_S;\n\n/**\n * Keccak-256 hash of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_NULL\n */\nexports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');\nexports.SHA3_NULL = exports.KECCAK256_NULL;\n\n/**\n * Keccak-256 of an RLP of an empty array (a ```String```)\n * @var {String} KECCAK256_RLP_ARRAY_S\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\nexports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;\n\n/**\n * Keccak-256 of an RLP of an empty array (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP_ARRAY\n */\nexports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\nexports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;\n\n/**\n * Keccak-256 hash of the RLP of null  (a ```String```)\n * @var {String} KECCAK256_RLP_S\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\nexports.SHA3_RLP_S = exports.KECCAK256_RLP_S;\n\n/**\n * Keccak-256 hash of the RLP of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP\n */\nexports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');\nexports.SHA3_RLP = exports.KECCAK256_RLP;\n\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n * @var {Function}\n */\nexports.BN = BN;\n\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n * @var {Function}\n */\nexports.rlp = rlp;\n\n/**\n * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)\n * @var {Object}\n */\nexports.secp256k1 = secp256k1;\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\n/**\n  * Returns a zero address\n  * @method zeroAddress\n  * @return {String}\n  */\nexports.zeroAddress = function () {\n  var addressLength = 20;\n  var zeroAddress = exports.zeros(addressLength);\n  return exports.bufferToHex(zeroAddress);\n};\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nexports.setLengthLeft = exports.setLength = function (msg, length, right) {\n  var buf = exports.zeros(length);\n  msg = exports.toBuffer(msg);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true);\n};\n\n/**\n * Trims leading zeros from a `Buffer` or an `Array`\n * @param {Buffer|Array|String} a\n * @return {Buffer|Array|String}\n */\nexports.unpad = exports.stripZeros = function (a) {\n  a = exports.stripHexPrefix(a);\n  var first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param {*} v the value\n */\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (exports.isHexString(v)) {\n        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');\n      } else {\n        v = Buffer.from(v);\n      }\n    } else if (typeof v === 'number') {\n      v = exports.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n};\n\n/**\n * Converts a `Buffer` to a `Number`\n * @param {Buffer} buf\n * @return {Number}\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n  return new BN(exports.toBuffer(buf)).toNumber();\n};\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @param {Buffer} buf\n * @return {String}\n */\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param {Buffer} num\n * @return {BN}\n */\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256);\n};\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param {BN} num\n * @return {Buffer}\n */\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n\n/**\n * Creates Keccak hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the Keccak width\n * @return {Buffer}\n */\nexports.keccak = function (a, bits) {\n  a = exports.toBuffer(a);\n  if (!bits) bits = 256;\n\n  switch (bits) {\n    case 224:\n      {\n        return keccak224(a);\n      }\n    case 256:\n      {\n        return k256(a);\n      }\n    case 384:\n      {\n        return keccak384(a);\n      }\n    case 512:\n      {\n        return keccak512(a);\n      }\n    default:\n      {\n        throw new Error('Invald algorithm: keccak' + bits);\n      }\n  }\n};\n\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256)\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n\n/**\n * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the SHA-3 width\n * @return {Buffer}\n */\nexports.sha3 = exports.keccak;\n\n/**\n * Creates SHA256 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.sha256 = function (a) {\n  a = exports.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n\n/**\n * Creates RIPEMD160 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Boolean} padded whether it should be padded to 256 bits or not\n * @return {Buffer}\n */\nexports.ripemd160 = function (a, padded) {\n  a = exports.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return exports.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n * @param {Buffer} privateKey\n * @return {Boolean}\n */\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1.privateKeyVerify(privateKey);\n};\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Boolean}\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return secp256k1.publicKeyVerify(publicKey);\n};\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Buffer}\n */\nexports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {\n  pubKey = exports.toBuffer(pubKey);\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n  }\n  assert(pubKey.length === 64);\n  // Only take the lower 160bits of the hash\n  return exports.keccak(pubKey).slice(-20);\n};\n\n/**\n * Returns the ethereum public key of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nvar privateToPublic = exports.privateToPublic = function (privateKey) {\n  privateKey = exports.toBuffer(privateKey);\n  // skip the type flag and use the X, Y points\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n\n/**\n * Converts a public key to the Ethereum format.\n * @param {Buffer} publicKey\n * @return {Buffer}\n */\nexports.importPublic = function (publicKey) {\n  publicKey = exports.toBuffer(publicKey);\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n  }\n  return publicKey;\n};\n\n/**\n * ECDSA sign\n * @param {Buffer} msgHash\n * @param {Buffer} privateKey\n * @return {Object}\n */\nexports.ecsign = function (msgHash, privateKey) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n\n  var ret = {};\n  ret.r = sig.signature.slice(0, 32);\n  ret.s = sig.signature.slice(32, 64);\n  ret.v = sig.recovery + 27;\n  return ret;\n};\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n * @param message\n * @returns {Buffer} hash\n */\nexports.hashPersonalMessage = function (message) {\n  var prefix = exports.toBuffer('\\x19Ethereum Signed Message:\\n' + message.length.toString());\n  return exports.keccak(Buffer.concat([prefix, message]));\n};\n\n/**\n * ECDSA public key recovery from signature\n * @param {Buffer} msgHash\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {Buffer} publicKey\n */\nexports.ecrecover = function (msgHash, v, r, s) {\n  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);\n  var recovery = v - 27;\n  if (recovery !== 0 && recovery !== 1) {\n    throw new Error('Invalid signature v value');\n  }\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {String} sig\n */\nexports.toRpcSig = function (v, r, s) {\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (v !== 27 && v !== 28) {\n    throw new Error('Invalid recovery id');\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053\n  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));\n};\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * @param {String} sig\n * @return {Object}\n */\nexports.fromRpcSig = function (sig) {\n  sig = exports.toBuffer(sig);\n\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (sig.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  var v = sig[64];\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64)\n  };\n};\n\n/**\n * Returns the ethereum address of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(privateToPublic(privateKey));\n};\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too\n * @param {String} address\n * @return {Boolean}\n */\nexports.isValidAddress = function (address) {\n  return (/^0x[0-9a-fA-F]{40}$/.test(address)\n  );\n};\n\n/**\n  * Checks if a given address is a zero address\n  * @method isZeroAddress\n  * @param {String} address\n  * @return {Boolean}\n  */\nexports.isZeroAddress = function (address) {\n  var zeroAddress = exports.zeroAddress();\n  return zeroAddress === exports.addHexPrefix(address);\n};\n\n/**\n * Returns a checksummed address\n * @param {String} address\n * @return {String}\n */\nexports.toChecksumAddress = function (address) {\n  address = exports.stripHexPrefix(address).toLowerCase();\n  var hash = exports.keccak(address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Checks if the address is a valid checksummed address\n * @param {Buffer} address\n * @return {Boolean}\n */\nexports.isValidChecksumAddress = function (address) {\n  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;\n};\n\n/**\n * Generates an address of a newly created contract\n * @param {Buffer} from the address which is creating this new address\n * @param {Buffer} nonce the nonce of the from account\n * @return {Buffer}\n */\nexports.generateAddress = function (from, nonce) {\n  from = exports.toBuffer(from);\n  nonce = new BN(nonce);\n\n  if (nonce.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    nonce = null;\n  } else {\n    nonce = Buffer.from(nonce.toArray());\n  }\n\n  // Only take the lower 160bits of the hash\n  return exports.rlphash([from, nonce]).slice(-20);\n};\n\n/**\n * Returns true if the supplied address belongs to a precompiled account (Byzantium)\n * @param {Buffer|String} address\n * @return {Boolean}\n */\nexports.isPrecompiled = function (address) {\n  var a = exports.unpad(address);\n  return a.length === 1 && a[0] >= 1 && a[0] <= 8;\n};\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\"\n * @param {String} str\n * @return {String}\n */\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return exports.isHexPrefixed(str) ? str : '0x' + str;\n};\n\n/**\n * Validate ECDSA signature\n * @method isValidSignature\n * @param {Buffer} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @param {Boolean} [homestead=true]\n * @return {Boolean}\n */\n\nexports.isValidSignature = function (v, r, s, homestead) {\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (v !== 27 && v !== 28) {\n    return false;\n  }\n\n  r = new BN(r);\n  s = new BN(s);\n\n  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Converts a `Buffer` or `Array` to JSON\n * @param {Buffer|Array} ba\n * @return {Array|String|null}\n */\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return '0x' + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n    return array;\n  }\n};\n\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param {Object} self the `Object` to define properties on\n * @param {Array} fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param {*} data data to be validated against the definitions\n */\nexports.defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = [];\n\n  // attach the `toJSON`\n  self.toJSON = function (label) {\n    if (label) {\n      var obj = {};\n      self._fields.forEach(function (field) {\n        obj[field] = '0x' + self[field].toString('hex');\n      });\n      return obj;\n    }\n    return exports.baToJSON(this.raw);\n  };\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n    function getter() {\n      return self.raw[i];\n    }\n    function setter(v) {\n      v = exports.toBuffer(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = exports.stripZeros(v);\n        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    }\n\n    // attach alias\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  });\n\n  // if the constuctor is passed data\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(exports.stripHexPrefix(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      }\n\n      // make sure all the items are buffers\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = exports.toBuffer(d);\n      });\n    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n      var keys = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};"]},"metadata":{},"sourceType":"script"}