{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nodeRipemd160 = exports.nodeSha512 = exports.nodeSha256 = exports.nodeHmacSha512Sign = exports.nodeHmacSha256Sign = exports.nodeAesDecrypt = exports.nodeAesEncrypt = void 0;\n\nconst crypto_1 = __importDefault(require(\"crypto\"));\n\nconst enc_utils_1 = require(\"enc-utils\");\n\nconst constants_1 = require(\"../constants\");\n\nfunction nodeAesEncrypt(iv, key, data) {\n  const cipher = crypto_1.default.createCipheriv(constants_1.AES_NODE_ALGO, key, iv);\n  return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(cipher.update(data), cipher.final()));\n}\n\nexports.nodeAesEncrypt = nodeAesEncrypt;\n\nfunction nodeAesDecrypt(iv, key, data) {\n  const decipher = crypto_1.default.createDecipheriv(constants_1.AES_NODE_ALGO, key, iv);\n  return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(decipher.update(data), decipher.final()));\n}\n\nexports.nodeAesDecrypt = nodeAesDecrypt;\n\nfunction nodeHmacSha256Sign(key, data) {\n  const buf = crypto_1.default.createHmac(constants_1.HMAC_NODE_ALGO, new Uint8Array(key)).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeHmacSha256Sign = nodeHmacSha256Sign;\n\nfunction nodeHmacSha512Sign(key, data) {\n  const buf = crypto_1.default.createHmac(constants_1.SHA512_NODE_ALGO, new Uint8Array(key)).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeHmacSha512Sign = nodeHmacSha512Sign;\n\nfunction nodeSha256(data) {\n  const buf = crypto_1.default.createHash(constants_1.SHA256_NODE_ALGO).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeSha256 = nodeSha256;\n\nfunction nodeSha512(data) {\n  const buf = crypto_1.default.createHash(constants_1.SHA512_NODE_ALGO).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeSha512 = nodeSha512;\n\nfunction nodeRipemd160(data) {\n  const buf = crypto_1.default.createHash(constants_1.RIPEMD160_NODE_ALGO).update(data).digest();\n  return enc_utils_1.bufferToArray(buf);\n}\n\nexports.nodeRipemd160 = nodeRipemd160;","map":{"version":3,"sources":["../../../../src/helpers/env/node.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQA,SAAgB,cAAhB,CACE,EADF,EAEE,GAFF,EAGE,IAHF,EAGkB;AAEhB,QAAM,MAAM,GAAG,QAAA,CAAA,OAAA,CAAO,cAAP,CAAsB,WAAA,CAAA,aAAtB,EAAqC,GAArC,EAA0C,EAA1C,CAAf;AACA,SAAO,WAAA,CAAA,aAAA,CAAc,WAAA,CAAA,aAAA,CAAc,MAAM,CAAC,MAAP,CAAc,IAAd,CAAd,EAAmC,MAAM,CAAC,KAAP,EAAnC,CAAd,CAAP;AACD;;AAPD,OAAA,CAAA,cAAA,GAAA,cAAA;;AASA,SAAgB,cAAhB,CACE,EADF,EAEE,GAFF,EAGE,IAHF,EAGkB;AAEhB,QAAM,QAAQ,GAAG,QAAA,CAAA,OAAA,CAAO,gBAAP,CAAwB,WAAA,CAAA,aAAxB,EAAuC,GAAvC,EAA4C,EAA5C,CAAjB;AACA,SAAO,WAAA,CAAA,aAAA,CAAc,WAAA,CAAA,aAAA,CAAc,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAd,EAAqC,QAAQ,CAAC,KAAT,EAArC,CAAd,CAAP;AACD;;AAPD,OAAA,CAAA,cAAA,GAAA,cAAA;;AASA,SAAgB,kBAAhB,CACE,GADF,EAEE,IAFF,EAEkB;AAEhB,QAAM,GAAG,GAAG,QAAA,CAAA,OAAA,CACT,UADS,CACE,WAAA,CAAA,cADF,EACkB,IAAI,UAAJ,CAAe,GAAf,CADlB,EAET,MAFS,CAEF,IAFE,EAGT,MAHS,EAAZ;AAIA,SAAO,WAAA,CAAA,aAAA,CAAc,GAAd,CAAP;AACD;;AATD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAWA,SAAgB,kBAAhB,CACE,GADF,EAEE,IAFF,EAEkB;AAEhB,QAAM,GAAG,GAAG,QAAA,CAAA,OAAA,CACT,UADS,CACE,WAAA,CAAA,gBADF,EACoB,IAAI,UAAJ,CAAe,GAAf,CADpB,EAET,MAFS,CAEF,IAFE,EAGT,MAHS,EAAZ;AAIA,SAAO,WAAA,CAAA,aAAA,CAAc,GAAd,CAAP;AACD;;AATD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AAWA,SAAgB,UAAhB,CAA2B,IAA3B,EAA2C;AACzC,QAAM,GAAG,GAAG,QAAA,CAAA,OAAA,CACT,UADS,CACE,WAAA,CAAA,gBADF,EAET,MAFS,CAEF,IAFE,EAGT,MAHS,EAAZ;AAIA,SAAO,WAAA,CAAA,aAAA,CAAc,GAAd,CAAP;AACD;;AAND,OAAA,CAAA,UAAA,GAAA,UAAA;;AAQA,SAAgB,UAAhB,CAA2B,IAA3B,EAA2C;AACzC,QAAM,GAAG,GAAG,QAAA,CAAA,OAAA,CACT,UADS,CACE,WAAA,CAAA,gBADF,EAET,MAFS,CAEF,IAFE,EAGT,MAHS,EAAZ;AAIA,SAAO,WAAA,CAAA,aAAA,CAAc,GAAd,CAAP;AACD;;AAND,OAAA,CAAA,UAAA,GAAA,UAAA;;AAQA,SAAgB,aAAhB,CAA8B,IAA9B,EAA8C;AAC5C,QAAM,GAAG,GAAG,QAAA,CAAA,OAAA,CACT,UADS,CACE,WAAA,CAAA,mBADF,EAET,MAFS,CAEF,IAFE,EAGT,MAHS,EAAZ;AAIA,SAAO,WAAA,CAAA,aAAA,CAAc,GAAd,CAAP;AACD;;AAND,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.nodeRipemd160 = exports.nodeSha512 = exports.nodeSha256 = exports.nodeHmacSha512Sign = exports.nodeHmacSha256Sign = exports.nodeAesDecrypt = exports.nodeAesEncrypt = void 0;\nconst crypto_1 = __importDefault(require(\"crypto\"));\nconst enc_utils_1 = require(\"enc-utils\");\nconst constants_1 = require(\"../constants\");\nfunction nodeAesEncrypt(iv, key, data) {\n    const cipher = crypto_1.default.createCipheriv(constants_1.AES_NODE_ALGO, key, iv);\n    return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(cipher.update(data), cipher.final()));\n}\nexports.nodeAesEncrypt = nodeAesEncrypt;\nfunction nodeAesDecrypt(iv, key, data) {\n    const decipher = crypto_1.default.createDecipheriv(constants_1.AES_NODE_ALGO, key, iv);\n    return enc_utils_1.bufferToArray(enc_utils_1.concatBuffers(decipher.update(data), decipher.final()));\n}\nexports.nodeAesDecrypt = nodeAesDecrypt;\nfunction nodeHmacSha256Sign(key, data) {\n    const buf = crypto_1.default\n        .createHmac(constants_1.HMAC_NODE_ALGO, new Uint8Array(key))\n        .update(data)\n        .digest();\n    return enc_utils_1.bufferToArray(buf);\n}\nexports.nodeHmacSha256Sign = nodeHmacSha256Sign;\nfunction nodeHmacSha512Sign(key, data) {\n    const buf = crypto_1.default\n        .createHmac(constants_1.SHA512_NODE_ALGO, new Uint8Array(key))\n        .update(data)\n        .digest();\n    return enc_utils_1.bufferToArray(buf);\n}\nexports.nodeHmacSha512Sign = nodeHmacSha512Sign;\nfunction nodeSha256(data) {\n    const buf = crypto_1.default\n        .createHash(constants_1.SHA256_NODE_ALGO)\n        .update(data)\n        .digest();\n    return enc_utils_1.bufferToArray(buf);\n}\nexports.nodeSha256 = nodeSha256;\nfunction nodeSha512(data) {\n    const buf = crypto_1.default\n        .createHash(constants_1.SHA512_NODE_ALGO)\n        .update(data)\n        .digest();\n    return enc_utils_1.bufferToArray(buf);\n}\nexports.nodeSha512 = nodeSha512;\nfunction nodeRipemd160(data) {\n    const buf = crypto_1.default\n        .createHash(constants_1.RIPEMD160_NODE_ALGO)\n        .update(data)\n        .digest();\n    return enc_utils_1.bufferToArray(buf);\n}\nexports.nodeRipemd160 = nodeRipemd160;\n//# sourceMappingURL=node.js.map"]},"metadata":{},"sourceType":"script"}