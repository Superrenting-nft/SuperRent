{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseTransactionData = exports.parsePersonalSign = exports.isValidAddress = exports.toChecksumAddress = void 0;\n\nconst js_sha3_1 = require(\"js-sha3\");\n\nconst encoding_1 = require(\"./encoding\");\n\nconst misc_1 = require(\"./misc\");\n\nconst validators_1 = require(\"./validators\");\n\nconst enc_utils_1 = require(\"enc-utils\");\n\nfunction toChecksumAddress(address) {\n  address = enc_utils_1.removeHexPrefix(address.toLowerCase());\n  const hash = enc_utils_1.removeHexPrefix(js_sha3_1.keccak_256(encoding_1.convertUtf8ToBuffer(address)));\n  let checksum = \"\";\n\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) > 7) {\n      checksum += address[i].toUpperCase();\n    } else {\n      checksum += address[i];\n    }\n  }\n\n  return enc_utils_1.addHexPrefix(checksum);\n}\n\nexports.toChecksumAddress = toChecksumAddress;\n\nconst isValidAddress = address => {\n  if (!address) {\n    return false;\n  } else if (address.toLowerCase().substring(0, 2) !== \"0x\") {\n    return false;\n  } else if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n    return false;\n  } else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n    return true;\n  } else {\n    return address === toChecksumAddress(address);\n  }\n};\n\nexports.isValidAddress = isValidAddress;\n\nfunction parsePersonalSign(params) {\n  if (!validators_1.isEmptyArray(params) && !validators_1.isHexString(params[0])) {\n    params[0] = encoding_1.convertUtf8ToHex(params[0]);\n  }\n\n  return params;\n}\n\nexports.parsePersonalSign = parsePersonalSign;\n\nfunction parseTransactionData(txData) {\n  if (typeof txData.from === \"undefined\" || !exports.isValidAddress(txData.from)) {\n    throw new Error(`Transaction object must include a valid 'from' value.`);\n  }\n\n  function parseHexValues(value) {\n    let result = value;\n\n    if (typeof value === \"number\" || typeof value === \"string\" && !validators_1.isEmptyString(value)) {\n      if (!validators_1.isHexString(value)) {\n        result = encoding_1.convertNumberToHex(value);\n      } else if (typeof value === \"string\") {\n        result = misc_1.sanitizeHex(value);\n      }\n    }\n\n    if (typeof result === \"string\") {\n      result = misc_1.removeHexLeadingZeros(result);\n    }\n\n    return result;\n  }\n\n  const txDataRPC = {\n    from: misc_1.sanitizeHex(txData.from),\n    to: typeof txData.to === \"undefined\" ? \"\" : misc_1.sanitizeHex(txData.to),\n    gasPrice: typeof txData.gasPrice === \"undefined\" ? \"\" : parseHexValues(txData.gasPrice),\n    gas: typeof txData.gas === \"undefined\" ? typeof txData.gasLimit === \"undefined\" ? \"\" : parseHexValues(txData.gasLimit) : parseHexValues(txData.gas),\n    value: typeof txData.value === \"undefined\" ? \"\" : parseHexValues(txData.value),\n    nonce: typeof txData.nonce === \"undefined\" ? \"\" : parseHexValues(txData.nonce),\n    data: typeof txData.data === \"undefined\" ? \"\" : misc_1.sanitizeHex(txData.data) || \"0x\"\n  };\n  const prunable = [\"gasPrice\", \"gas\", \"value\", \"nonce\"];\n  Object.keys(txDataRPC).forEach(key => {\n    if (!txDataRPC[key].trim().length && prunable.includes(key)) {\n      delete txDataRPC[key];\n    }\n  });\n  return txDataRPC;\n}\n\nexports.parseTransactionData = parseTransactionData;","map":{"version":3,"sources":["../../src/ethereum.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTransactionData = exports.parsePersonalSign = exports.isValidAddress = exports.toChecksumAddress = void 0;\nconst js_sha3_1 = require(\"js-sha3\");\nconst encoding_1 = require(\"./encoding\");\nconst misc_1 = require(\"./misc\");\nconst validators_1 = require(\"./validators\");\nconst enc_utils_1 = require(\"enc-utils\");\nfunction toChecksumAddress(address) {\n    address = enc_utils_1.removeHexPrefix(address.toLowerCase());\n    const hash = enc_utils_1.removeHexPrefix(js_sha3_1.keccak_256(encoding_1.convertUtf8ToBuffer(address)));\n    let checksum = \"\";\n    for (let i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) > 7) {\n            checksum += address[i].toUpperCase();\n        }\n        else {\n            checksum += address[i];\n        }\n    }\n    return enc_utils_1.addHexPrefix(checksum);\n}\nexports.toChecksumAddress = toChecksumAddress;\nconst isValidAddress = (address) => {\n    if (!address) {\n        return false;\n    }\n    else if (address.toLowerCase().substring(0, 2) !== \"0x\") {\n        return false;\n    }\n    else if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\n        return false;\n    }\n    else if (/^(0x)?[0-9a-f]{40}$/.test(address) || /^(0x)?[0-9A-F]{40}$/.test(address)) {\n        return true;\n    }\n    else {\n        return address === toChecksumAddress(address);\n    }\n};\nexports.isValidAddress = isValidAddress;\nfunction parsePersonalSign(params) {\n    if (!validators_1.isEmptyArray(params) && !validators_1.isHexString(params[0])) {\n        params[0] = encoding_1.convertUtf8ToHex(params[0]);\n    }\n    return params;\n}\nexports.parsePersonalSign = parsePersonalSign;\nfunction parseTransactionData(txData) {\n    if (typeof txData.from === \"undefined\" || !exports.isValidAddress(txData.from)) {\n        throw new Error(`Transaction object must include a valid 'from' value.`);\n    }\n    function parseHexValues(value) {\n        let result = value;\n        if (typeof value === \"number\" || (typeof value === \"string\" && !validators_1.isEmptyString(value))) {\n            if (!validators_1.isHexString(value)) {\n                result = encoding_1.convertNumberToHex(value);\n            }\n            else if (typeof value === \"string\") {\n                result = misc_1.sanitizeHex(value);\n            }\n        }\n        if (typeof result === \"string\") {\n            result = misc_1.removeHexLeadingZeros(result);\n        }\n        return result;\n    }\n    const txDataRPC = {\n        from: misc_1.sanitizeHex(txData.from),\n        to: typeof txData.to === \"undefined\" ? \"\" : misc_1.sanitizeHex(txData.to),\n        gasPrice: typeof txData.gasPrice === \"undefined\" ? \"\" : parseHexValues(txData.gasPrice),\n        gas: typeof txData.gas === \"undefined\"\n            ? typeof txData.gasLimit === \"undefined\"\n                ? \"\"\n                : parseHexValues(txData.gasLimit)\n            : parseHexValues(txData.gas),\n        value: typeof txData.value === \"undefined\" ? \"\" : parseHexValues(txData.value),\n        nonce: typeof txData.nonce === \"undefined\" ? \"\" : parseHexValues(txData.nonce),\n        data: typeof txData.data === \"undefined\" ? \"\" : misc_1.sanitizeHex(txData.data) || \"0x\",\n    };\n    const prunable = [\"gasPrice\", \"gas\", \"value\", \"nonce\"];\n    Object.keys(txDataRPC).forEach((key) => {\n        if (!txDataRPC[key].trim().length && prunable.includes(key)) {\n            delete txDataRPC[key];\n        }\n    });\n    return txDataRPC;\n}\nexports.parseTransactionData = parseTransactionData;\n//# sourceMappingURL=ethereum.js.map"]},"metadata":{},"sourceType":"script"}