{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\n\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n  detectNetwork() {\n    const _super = Object.create(null, {\n      detectNetwork: {\n        get: () => super.detectNetwork\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let network = this.network;\n\n      if (network == null) {\n        network = yield _super.detectNetwork.call(this);\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // If still not set, set it\n\n\n        if (this._network == null) {\n          // A static network does not support \"any\"\n          defineReadOnly(this, \"_network\", network);\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return network;\n    });\n  }\n\n}\nexport class UrlJsonRpcProvider extends StaticJsonRpcProvider {\n  constructor(network, apiKey) {\n    logger.checkAbstract(new.target, UrlJsonRpcProvider); // Normalize the Network and API Key\n\n    network = getStatic(new.target, \"getNetwork\")(network);\n    apiKey = getStatic(new.target, \"getApiKey\")(apiKey);\n    const connection = getStatic(new.target, \"getUrl\")(network, apiKey);\n    super(connection, network);\n\n    if (typeof apiKey === \"string\") {\n      defineReadOnly(this, \"apiKey\", apiKey);\n    } else if (apiKey != null) {\n      Object.keys(apiKey).forEach(key => {\n        defineReadOnly(this, key, apiKey[key]);\n      });\n    }\n  }\n\n  _startPending() {\n    logger.warn(\"WARNING: API provider does not support pending filters\");\n  }\n\n  isCommunityResource() {\n    return false;\n  }\n\n  getSigner(address) {\n    return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"getSigner\"\n    });\n  }\n\n  listAccounts() {\n    return Promise.resolve([]);\n  } // Return a defaultApiKey if null, otherwise validate the API key\n\n\n  static getApiKey(apiKey) {\n    return apiKey;\n  } // Returns the url or connection for the given network and API key. The\n  // API key will have been sanitized by the getApiKey first, so any validation\n  // or transformations can be done there.\n\n\n  static getUrl(network, apiKey) {\n    return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: \"getUrl\"\n    });\n  }\n\n}","map":{"version":3,"sources":["../src.ts/url-json-rpc-provider.ts"],"names":[],"mappings":"AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAS,cAAT,EAAyB,SAAzB,QAA0C,2BAA1C;AAGA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAGA,SAAS,eAAT,QAA+C,qBAA/C,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAM,MAAO,qBAAP,SAAqC,eAArC,CAAoD;AAChD,EAAA,aAAa,GAAA;;;;;;;;AACf,UAAI,OAAO,GAAG,KAAK,OAAnB;;AACA,UAAI,OAAO,IAAI,IAAf,EAAqB;AACjB,QAAA,OAAO,GAAG,MAAM,MAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,CAAhB;;AAEA,YAAI,CAAC,OAAL,EAAc;AACV,UAAA,MAAM,CAAC,UAAP,CAAkB,qBAAlB,EAAyC,MAAM,CAAC,MAAP,CAAc,aAAvD,EAAsE,EAAtE;AACH,SALgB,CAOjB;;;AACA,YAAI,KAAK,QAAL,IAAiB,IAArB,EAA2B;AACvB;AACA,UAAA,cAAc,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,CAAd;AAEA,eAAK,IAAL,CAAU,SAAV,EAAqB,OAArB,EAA8B,IAA9B;AACH;AACJ;;AACD,aAAO,OAAP;AACH,K;AAAA;;AAnBqD;AAsB1D,OAAM,MAAgB,kBAAhB,SAA2C,qBAA3C,CAAgE;AAGlE,EAAA,WAAA,CAAY,OAAZ,EAAkC,MAAlC,EAA8C;AAC1C,IAAA,MAAM,CAAC,aAAP,CAAqB,GAAG,CAAC,MAAzB,EAAiC,kBAAjC,EAD0C,CAG1C;;AACA,IAAA,OAAO,GAAG,SAAS,CAAmC,GAAG,CAAC,MAAvC,EAA+C,YAA/C,CAAT,CAAsE,OAAtE,CAAV;AACA,IAAA,MAAM,GAAG,SAAS,CAA6B,GAAG,CAAC,MAAjC,EAAyC,WAAzC,CAAT,CAA+D,MAA/D,CAAT;AAEA,UAAM,UAAU,GAAG,SAAS,CAAa,GAAG,CAAC,MAAjB,EAAyB,QAAzB,CAAT,CAA4C,OAA5C,EAAqD,MAArD,CAAnB;AAEA,UAAM,UAAN,EAAkB,OAAlB;;AAEA,QAAI,OAAO,MAAP,KAAmB,QAAvB,EAAiC;AAC7B,MAAA,cAAc,CAAC,IAAD,EAAO,QAAP,EAAiB,MAAjB,CAAd;AACH,KAFD,MAEO,IAAI,MAAM,IAAI,IAAd,EAAoB;AACvB,MAAA,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA6B,GAAD,IAAQ;AAChC,QAAA,cAAc,CAAW,IAAX,EAAiB,GAAjB,EAAsB,MAAM,CAAC,GAAD,CAA5B,CAAd;AACH,OAFD;AAGH;AACJ;;AAED,EAAA,aAAa,GAAA;AACT,IAAA,MAAM,CAAC,IAAP,CAAY,wDAAZ;AACH;;AAED,EAAA,mBAAmB,GAAA;AACf,WAAO,KAAP;AACH;;AAED,EAAA,SAAS,CAAC,OAAD,EAAiB;AACtB,WAAO,MAAM,CAAC,UAAP,CACH,uCADG,EAEH,MAAM,CAAC,MAAP,CAAc,qBAFX,EAGH;AAAE,MAAA,SAAS,EAAE;AAAb,KAHG,CAAP;AAKH;;AAED,EAAA,YAAY,GAAA;AACR,WAAO,OAAO,CAAC,OAAR,CAAgB,EAAhB,CAAP;AACH,GAzCiE,CA2ClE;;;AACgB,SAAT,SAAS,CAAC,MAAD,EAAY;AACxB,WAAO,MAAP;AACH,GA9CiE,CAgDlE;AACA;AACA;;;AACa,SAAN,MAAM,CAAC,OAAD,EAAmB,MAAnB,EAA8B;AACvC,WAAO,MAAM,CAAC,UAAP,CAAkB,mDAAlB,EAAuE,MAAM,CAAC,MAAP,CAAc,eAArF,EAAsG;AACzG,MAAA,SAAS,EAAE;AAD8F,KAAtG,CAAP;AAGH;;AAvDiE","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    detectNetwork() {\n        const _super = Object.create(null, {\n            detectNetwork: { get: () => super.detectNetwork }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let network = this.network;\n            if (network == null) {\n                network = yield _super.detectNetwork.call(this);\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // If still not set, set it\n                if (this._network == null) {\n                    // A static network does not support \"any\"\n                    defineReadOnly(this, \"_network\", network);\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return network;\n        });\n    }\n}\nexport class UrlJsonRpcProvider extends StaticJsonRpcProvider {\n    constructor(network, apiKey) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n        // Normalize the Network and API Key\n        network = getStatic((new.target), \"getNetwork\")(network);\n        apiKey = getStatic((new.target), \"getApiKey\")(apiKey);\n        const connection = getStatic((new.target), \"getUrl\")(network, apiKey);\n        super(connection, network);\n        if (typeof (apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        }\n        else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly(this, key, apiKey[key]);\n            });\n        }\n    }\n    _startPending() {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n    isCommunityResource() {\n        return false;\n    }\n    getSigner(address) {\n        return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"getSigner\" });\n    }\n    listAccounts() {\n        return Promise.resolve([]);\n    }\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey) {\n        return apiKey;\n    }\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network, apiKey) {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n//# sourceMappingURL=url-json-rpc-provider.js.map"]},"metadata":{},"sourceType":"module"}