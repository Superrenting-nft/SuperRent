{"ast":null,"code":"var _jsxFileName = \"/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/Contract/FunctionForm.jsx\";\n\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState } from \"react\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify } from \"@ethersproject/bytes\";\nimport { Row, Col, Input, Divider, Tooltip, Button } from \"antd\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\nimport Blockies from \"react-blockies\";\n\nconst {\n  utils\n} = require(\"ethers\");\n\nexport default function FunctionForm({\n  contractFunction,\n  functionInfo,\n  provider,\n  gasPrice,\n  triggerRefresh\n}) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n  const tx = Transactor(provider, gasPrice);\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n    let buttons = \"\";\n\n    if (input.type === \"bytes32\") {\n      buttons = /*#__PURE__*/React.createElement(Tooltip, {\n        placement: \"right\",\n        title: \"to bytes32\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        type: \"dashed\",\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: async () => {\n          if (utils.isHexString(form[key])) {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.parseBytes32String(form[key]);\n            setForm(formUpdate);\n          } else {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.formatBytes32String(form[key]);\n            setForm(formUpdate);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }\n      }, \"#\\uFE0F\\u20E3\"));\n    } else if (input.type === \"bytes\") {\n      buttons = /*#__PURE__*/React.createElement(Tooltip, {\n        placement: \"right\",\n        title: \"to hex\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        type: \"dashed\",\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: async () => {\n          if (utils.isHexString(form[key])) {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.toUtf8String(form[key]);\n            setForm(formUpdate);\n          } else {\n            const formUpdate = { ...form\n            };\n            formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n            setForm(formUpdate);\n          }\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, \"#\\uFE0F\\u20E3\"));\n    } else if (input.type == \"uint256\") {\n      buttons = /*#__PURE__*/React.createElement(Tooltip, {\n        placement: \"right\",\n        title: \"* 10 ** 18\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        type: \"dashed\",\n        style: {\n          cursor: \"pointer\"\n        },\n        onClick: async () => {\n          const formUpdate = { ...form\n          };\n          formUpdate[key] = utils.parseEther(form[key]);\n          setForm(formUpdate);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }, \"\\u2734\\uFE0F\"));\n    } else if (input.type == \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n\n      if (possibleAddress && possibleAddress.length == 42) {\n        buttons = /*#__PURE__*/React.createElement(Tooltip, {\n          placement: \"right\",\n          title: \"blockie\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Blockies, {\n          seed: possibleAddress,\n          scale: 3,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }\n        }));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        margin: 2\n      },\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      size: \"large\",\n      placeholder: input.name ? input.type + \" \" + input.name : input.type,\n      autoComplete: \"off\",\n      value: form[key],\n      name: key,\n      onChange: event => {\n        const formUpdate = { ...form\n        };\n        formUpdate[event.target.name] = event.target.value;\n        setForm(formUpdate);\n      },\n      suffix: buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }));\n  });\n  const txValueInput = /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: 2\n    },\n    key: \"txValueInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"transaction value\",\n    onChange: e => setTxValue(e.target.value),\n    value: txValue,\n    addonAfter: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      span: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"right\",\n      title: \" * 10^18 \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      type: \"dashed\",\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: async () => {\n        let floatValue = parseFloat(txValue);\n        if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 19\n      }\n    }, \"\\u2733\\uFE0F\"))), /*#__PURE__*/React.createElement(Col, {\n      span: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Tooltip, {\n      placement: \"right\",\n      title: \"number to hex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      type: \"dashed\",\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: async () => {\n        setTxValue(BigNumber.from(txValue).toHexString());\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 19\n      }\n    }, \"#\\uFE0F\\u20E3\"))))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }));\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon = functionInfo.type === \"call\" ? /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginLeft: -32\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 53\n    }\n  }, \"Read\\uD83D\\uDCE1\") : /*#__PURE__*/React.createElement(Button, {\n    style: {\n      marginLeft: -32\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 107\n    }\n  }, \"Send\\uD83D\\uDCB8\");\n  inputs.push( /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      cursor: \"pointer\",\n      margin: 2\n    },\n    key: \"goButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: e => setReturnValue(e.target.value),\n    defaultValue: \"\",\n    bordered: false,\n    disabled: true,\n    value: returnValue,\n    suffix: /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: 50,\n        height: 30,\n        margin: 0\n      },\n      type: \"default\",\n      onClick: async () => {\n        let innerIndex = 0;\n        const args = functionInfo.inputs.map(input => {\n          const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n          let value = form[key];\n\n          if (input.baseType == \"array\") {\n            value = JSON.parse(value);\n          } else if (input.type === \"bool\") {\n            if (value === 'true' || value === '1' || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n              value = 1;\n            } else {\n              value = 0;\n            }\n          }\n\n          return value;\n        });\n        let result;\n\n        if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n          const returned = await contractFunction(...args);\n          result = tryToDisplay(returned);\n        } else {\n          const overrides = {};\n\n          if (txValue) {\n            overrides.value = txValue; // ethers.utils.parseEther()\n          } // Uncomment this if you want to skip the gas estimation for each transaction\n          // overrides.gasLimit = hexlify(1200000);\n          // console.log(\"Running with extras\",extras)\n\n\n          const returned = await tx(contractFunction(...args, overrides));\n          result = tryToDisplay(returned);\n        }\n\n        console.log(\"SETTING RESULT:\", result);\n        setReturnValue(result);\n        triggerRefresh(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, buttonIcon),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    style: {\n      textAlign: \"right\",\n      opacity: 0.333,\n      paddingRight: 6,\n      fontSize: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, functionInfo.name), /*#__PURE__*/React.createElement(Col, {\n    span: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, inputs)), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/Contract/FunctionForm.jsx"],"names":["React","useState","BigNumber","hexlify","Row","Col","Input","Divider","Tooltip","Button","Transactor","tryToDisplay","Blockies","utils","require","FunctionForm","contractFunction","functionInfo","provider","gasPrice","triggerRefresh","form","setForm","txValue","setTxValue","returnValue","setReturnValue","tx","inputIndex","inputs","map","input","key","name","type","buttons","cursor","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","parseEther","possibleAddress","toLowerCase","trim","length","margin","event","target","value","txValueInput","e","floatValue","parseFloat","from","toHexString","payable","push","buttonIcon","marginLeft","width","height","innerIndex","args","baseType","JSON","parse","result","stateMutability","returned","overrides","console","log","textAlign","opacity","paddingRight","fontSize"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/accessible-emoji */\nimport React, { useState } from \"react\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify } from \"@ethersproject/bytes\";\nimport { Row, Col, Input, Divider, Tooltip, Button } from \"antd\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\nimport Blockies from \"react-blockies\";\nconst { utils } = require(\"ethers\");\n\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++\n\n    let buttons = \"\"\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title={\"to bytes32\"}>\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n            </div>\n        </Tooltip>\n      )\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title={\"to hex\"}>\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]))\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n            </div>\n        </Tooltip>\n      )\n    } else if (input.type == \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title={\"* 10 ** 18\"}>\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key])\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n            </div>\n        </Tooltip>\n      )\n    } else if (input.type == \"address\") {\n      const possibleAddress = form[key]&&form[key].toLowerCase&&form[key].toLowerCase().trim()\n      if(possibleAddress && possibleAddress.length==42){\n        buttons = (\n          <Tooltip placement=\"right\" title={\"blockie\"}>\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        )\n      }\n    }\n\n\n\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={(event) => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    )\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key={\"txValueInput\"}>\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title={\" * 10^18 \"}>\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      let floatValue = parseFloat(txValue)\n                      if(floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title={\"number to hex\"}>\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon = functionInfo.type === \"call\" ? <Button style={{ marginLeft: -32 }}>Read📡</Button> : <Button style={{ marginLeft: -32 }}>Send💸</Button>;\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key={\"goButton\"}>\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled={true}\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0\n              const args = functionInfo.inputs.map((input) => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++\n                let value = form[key]\n                if(input.baseType==\"array\"){\n                  value = JSON.parse(value)\n                } else if(input.type === \"bool\"){\n                  if(value==='true' || value==='1' || value ===\"0x1\"|| value ===\"0x01\"|| value ===\"0x0001\"){\n                    value = 1;\n                  }else{\n                    value = 0;\n                  }\n                }\n                return value\n              });\n\n              let result\n              if(functionInfo.stateMutability === \"view\"||functionInfo.stateMutability === \"pure\"){\n                const returned = await contractFunction(...args)\n                result = tryToDisplay(returned);\n              }else{\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}