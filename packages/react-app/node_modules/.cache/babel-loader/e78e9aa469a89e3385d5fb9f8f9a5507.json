{"ast":null,"code":"import { hexlify } from \"@ethersproject/bytes\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { notification } from \"antd\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\nimport Notify from \"bnc-notify\"; // this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\n\nexport default function Transactor(provider, gasPrice, etherscan) {\n  if (typeof provider !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async tx => {\n      const signer = provider.getSigner();\n      const network = await provider.getNetwork();\n      console.log(\"network\", network);\n      const options = {\n        dappId: BLOCKNATIVE_DAPPID,\n        // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          console.log(\"HANDLE TX\", txInformation);\n        }\n      };\n      const notify = Notify(options);\n      let etherscanNetwork = \"\";\n\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n\n        if (tx instanceof Promise) {\n          console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || parseUnits(\"4.1\", \"gwei\");\n          }\n\n          if (!tx.gasLimit) {\n            tx.gasLimit = hexlify(120000);\n          }\n\n          console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n\n        console.log(\"RESULT:\", result); // console.log(\"Notify\", notify);\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n\n        if ([1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const {\n            emitter\n          } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash)\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\"\n          });\n        }\n\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: e.message\n        });\n      }\n    };\n  }\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/helpers/Transactor.js"],"names":["hexlify","parseUnits","notification","BLOCKNATIVE_DAPPID","Notify","Transactor","provider","gasPrice","etherscan","tx","signer","getSigner","network","getNetwork","console","log","options","dappId","system","networkId","chainId","transactionHandler","txInformation","notify","etherscanNetwork","name","etherscanTxUrl","result","Promise","gasLimit","sendTransaction","indexOf","emitter","hash","on","transaction","onclick","window","open","info","message","description","placement","e","error"],"mappings":"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","sourcesContent":["import { hexlify } from \"@ethersproject/bytes\";\nimport { parseUnits } from \"@ethersproject/units\";\nimport { notification } from \"antd\";\nimport { BLOCKNATIVE_DAPPID, } from \"../constants\";\n\nimport Notify from \"bnc-notify\";\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\n\nexport default function Transactor(provider, gasPrice, etherscan) {\n  if (typeof provider !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async tx => {\n      const signer = provider.getSigner();\n      const network = await provider.getNetwork();\n      console.log(\"network\", network);\n      const options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          console.log(\"HANDLE TX\", txInformation);\n        },\n      };\n      const notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = hexlify(120000);\n          }\n          console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if ([1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n        }\n\n        return result;\n      } catch (e) {\n        console.log(e);\n        console.log(\"Transaction Error:\", e.message);\n        notification.error({\n          message: \"Transaction Error\",\n          description: e.message,\n        });\n      }\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}