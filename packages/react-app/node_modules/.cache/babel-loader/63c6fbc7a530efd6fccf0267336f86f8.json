{"ast":null,"code":"var _jsxFileName = \"/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/EtherInput.jsx\";\nimport React, { useState, useEffect } from \"react\";\nimport { Input } from \"antd\"; // small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: () => {\n        if (mode === \"USD\") {\n          setMode(\"ETH\");\n          setDisplay(currentValue);\n        } else {\n          setMode(\"USD\");\n\n          if (currentValue) {\n            const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n            setDisplay(usdValue);\n          } else {\n            setDisplay(currentValue);\n          }\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, title);\n  };\n\n  let prefix;\n  let addonAfter;\n\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD ðŸ”€\");\n  } else {\n    prefix = \"Îž\";\n    addonAfter = option(\"ETH ðŸ”€\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n  return /*#__PURE__*/React.createElement(Input, {\n    placeholder: props.placeholder ? props.placeholder : \"amount in \" + mode,\n    autoFocus: props.autoFocus,\n    prefix: prefix,\n    value: display,\n    addonAfter: addonAfter,\n    onChange: async e => {\n      const newValue = e.target.value;\n\n      if (mode === \"USD\") {\n        const possibleNewValue = parseFloat(newValue);\n\n        if (possibleNewValue) {\n          const ethValue = possibleNewValue / props.price;\n          setValue(ethValue);\n\n          if (typeof props.onChange === \"function\") {\n            props.onChange(ethValue);\n          }\n\n          setDisplay(newValue);\n        } else {\n          setDisplay(newValue);\n        }\n      } else {\n        setValue(newValue);\n\n        if (typeof props.onChange === \"function\") {\n          props.onChange(newValue);\n        }\n\n        setDisplay(newValue);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/EtherInput.jsx"],"names":["React","useState","useEffect","Input","EtherInput","props","mode","setMode","price","display","setDisplay","value","setValue","currentValue","option","title","cursor","usdValue","parseFloat","toFixed","prefix","addonAfter","placeholder","autoFocus","e","newValue","target","possibleNewValue","ethValue","onChange"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Input } from \"antd\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD ðŸ”€\");\n  } else {\n    prefix = \"Îž\";\n    addonAfter = option(\"ETH ðŸ”€\");\n  }\n\n  useEffect(\n    ()=>{\n      if(!currentValue){\n        setDisplay(\"\");\n      }\n    }\n  ,[ currentValue ])\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue)\n          if(possibleNewValue){\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          }else{\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}