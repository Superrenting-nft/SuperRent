{"ast":null,"code":"\"use strict\";\n\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n; //export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\n\nexport class ForkEvent extends Description {\n  static isForkEvent(value) {\n    return !!(value && value._isForkEvent);\n  }\n\n}\nexport class BlockForkEvent extends ForkEvent {\n  constructor(blockHash, expiry) {\n    if (!isHexString(blockHash, 32)) {\n      logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isBlockForkEvent: true,\n      expiry: expiry || 0,\n      blockHash: blockHash\n    });\n  }\n\n}\nexport class TransactionForkEvent extends ForkEvent {\n  constructor(hash, expiry) {\n    if (!isHexString(hash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isTransactionForkEvent: true,\n      expiry: expiry || 0,\n      hash: hash\n    });\n  }\n\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n  constructor(beforeHash, afterHash, expiry) {\n    if (!isHexString(beforeHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n    }\n\n    if (!isHexString(afterHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n    }\n\n    super({\n      _isForkEvent: true,\n      _isTransactionOrderForkEvent: true,\n      expiry: expiry || 0,\n      beforeHash: beforeHash,\n      afterHash: afterHash\n    });\n  }\n\n} ///////////////////////////////\n// Exported Abstracts\n\nexport class Provider {\n  constructor() {\n    logger.checkAbstract(new.target, Provider);\n    defineReadOnly(this, \"_isProvider\", true);\n  } // Alias for \"on\"\n\n\n  addListener(eventName, listener) {\n    return this.on(eventName, listener);\n  } // Alias for \"off\"\n\n\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n\n  static isProvider(value) {\n    return !!(value && value._isProvider);\n  }\n\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\nexport class ForkEvent extends Description {\n    static isForkEvent(value) {\n        return !!(value && value._isForkEvent);\n    }\n}\nexport class BlockForkEvent extends ForkEvent {\n    constructor(blockHash, expiry) {\n        if (!isHexString(blockHash, 32)) {\n            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isBlockForkEvent: true,\n            expiry: (expiry || 0),\n            blockHash: blockHash\n        });\n    }\n}\nexport class TransactionForkEvent extends ForkEvent {\n    constructor(hash, expiry) {\n        if (!isHexString(hash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionForkEvent: true,\n            expiry: (expiry || 0),\n            hash: hash\n        });\n    }\n}\nexport class TransactionOrderForkEvent extends ForkEvent {\n    constructor(beforeHash, afterHash, expiry) {\n        if (!isHexString(beforeHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n        if (!isHexString(afterHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n        super({\n            _isForkEvent: true,\n            _isTransactionOrderForkEvent: true,\n            expiry: (expiry || 0),\n            beforeHash: beforeHash,\n            afterHash: afterHash\n        });\n    }\n}\n///////////////////////////////\n// Exported Abstracts\nexport class Provider {\n    constructor() {\n        logger.checkAbstract(new.target, Provider);\n        defineReadOnly(this, \"_isProvider\", true);\n    }\n    // Alias for \"on\"\n    addListener(eventName, listener) {\n        return this.on(eventName, listener);\n    }\n    // Alias for \"off\"\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n    static isProvider(value) {\n        return !!(value && value._isProvider);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}