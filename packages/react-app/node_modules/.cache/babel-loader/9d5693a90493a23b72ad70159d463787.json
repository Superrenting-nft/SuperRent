{"ast":null,"code":"import { useState } from \"react\";\nimport { Token, WETH, Fetcher, Route } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(mainnetProvider.network ? mainnetProvider.network.chainId : 1, \"0x6B175474E89094C44Da98b954EedeAC495271d0F\", 18);\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n\n    getPrice();\n  };\n\n  usePoller(pollPrice, pollTime || 9777);\n  return price;\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/hooks/ExchangePrice.js"],"names":["useState","Token","WETH","Fetcher","Route","usePoller","useExchangePrice","targetNetwork","mainnetProvider","pollTime","price","setPrice","pollPrice","getPrice","DAI","network","chainId","pair","fetchPairData","route","parseFloat","midPrice","toSignificant"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,OAAtB,EAA+BC,KAA/B,QAA4C,cAA5C;AACA,SAASC,SAAT,QAA0B,WAA1B;AAEA,eAAe,SAASC,gBAAT,CAA0BC,aAA1B,EAAyCC,eAAzC,EAA0DC,QAA1D,EAAoE;AACjF,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMY,SAAS,GAAG,MAAM;AACtB,mBAAeC,QAAf,GAA0B;AACxB,UAAGN,aAAa,CAACG,KAAjB,EAAuB;AACrBC,QAAAA,QAAQ,CAACJ,aAAa,CAACG,KAAf,CAAR;AACD,OAFD,MAEK;AACH,cAAMI,GAAG,GAAG,IAAIb,KAAJ,CACVO,eAAe,CAACO,OAAhB,GAA0BP,eAAe,CAACO,OAAhB,CAAwBC,OAAlD,GAA4D,CADlD,EAEV,4CAFU,EAGV,EAHU,CAAZ;AAKA,cAAMC,IAAI,GAAG,MAAMd,OAAO,CAACe,aAAR,CAAsBJ,GAAtB,EAA2BZ,IAAI,CAACY,GAAG,CAACE,OAAL,CAA/B,EAA8CR,eAA9C,CAAnB;AACA,cAAMW,KAAK,GAAG,IAAIf,KAAJ,CAAU,CAACa,IAAD,CAAV,EAAkBf,IAAI,CAACY,GAAG,CAACE,OAAL,CAAtB,CAAd;AACAL,QAAAA,QAAQ,CAACS,UAAU,CAACD,KAAK,CAACE,QAAN,CAAeC,aAAf,CAA6B,CAA7B,CAAD,CAAX,CAAR;AACD;AACF;;AACDT,IAAAA,QAAQ;AACT,GAhBD;;AAiBAR,EAAAA,SAAS,CAACO,SAAD,EAAYH,QAAQ,IAAI,IAAxB,CAAT;AAEA,SAAOC,KAAP;AACD","sourcesContent":["import { useState } from \"react\";\nimport { Token, WETH, Fetcher, Route } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if(targetNetwork.price){\n        setPrice(targetNetwork.price)\n      }else{\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n"]},"metadata":{},"sourceType":"module"}