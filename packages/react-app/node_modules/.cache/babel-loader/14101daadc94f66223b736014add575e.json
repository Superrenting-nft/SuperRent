{"ast":null,"code":"const Mutex = require('async-mutex').Mutex;\n\nconst {\n  createAsyncMiddleware\n} = require('json-rpc-engine');\n\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');\n\nconst LogFilter = require('./log-filter.js');\n\nconst BlockFilter = require('./block-filter.js');\n\nconst TxFilter = require('./tx-filter.js');\n\nconst {\n  intToHex,\n  hexToInt\n} = require('./hexUtils');\n\nmodule.exports = createEthFilterMiddleware;\n\nfunction createEthFilterMiddleware({\n  blockTracker,\n  provider\n}) {\n  // create filter collection\n  let filterIndex = 0;\n  let filters = {}; // create update mutex\n\n  const mutex = new Mutex();\n  const waitForFree = mutexMiddlewareWrapper({\n    mutex\n  });\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  }); // setup filter updating and destroy handler\n\n  const filterUpdater = async ({\n    oldBlock,\n    newBlock\n  }) => {\n    if (filters.length === 0) return; // lock update reads\n\n    const releaseLock = await mutex.acquire();\n\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async filter => {\n        try {\n          await filter.update({\n            oldBlock,\n            newBlock\n          });\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err);\n        }\n      }));\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err);\n    } // unlock update reads\n\n\n    releaseLock();\n  }; // expose filter methods directly\n\n\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs; // expose destroy method for cleanup\n\n  middleware.destroy = () => {\n    uninstallAllFilters();\n  };\n\n  return middleware; //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({\n      provider,\n      params\n    });\n    const filterIndex = await installFilter(filter);\n    return filter;\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({\n      provider\n    });\n    const filterIndex = await installFilter(filter);\n    return filter;\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({\n      provider\n    });\n    const filterIndex = await installFilter(filter);\n    return filter;\n  } //\n  // get filter changes\n  //\n\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex);\n    const filter = filters[filterIndex];\n\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`);\n    }\n\n    const results = filter.getChangesAndClear();\n    return results;\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex);\n    const filter = filters[filterIndex];\n\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`);\n    } // only return results for log filters\n\n\n    if (filter.type === 'log') {\n      results = filter.getAllResults();\n    } else {\n      results = [];\n    }\n\n    return results;\n  } //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex);\n    const filter = filters[filterIndex];\n    const result = Boolean(filter); // uninstall filter\n\n    if (result) {\n      await uninstallFilter(filterIndex);\n    }\n\n    return result;\n  } //\n  // utils\n  //\n\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length; // install filter\n\n    const currentBlock = await blockTracker.getLatestBlock();\n    await filter.initialize({\n      currentBlock\n    });\n    filterIndex++;\n    filters[filterIndex] = filter;\n    filter.id = filterIndex;\n    filter.idHex = intToHex(filterIndex); // update block tracker subs\n\n    const newFilterCount = objValues(filters).length;\n    updateBlockTrackerSubs({\n      prevFilterCount,\n      newFilterCount\n    });\n    return filterIndex;\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length;\n    delete filters[filterIndex]; // update block tracker subs\n\n    const newFilterCount = objValues(filters).length;\n    updateBlockTrackerSubs({\n      prevFilterCount,\n      newFilterCount\n    });\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length;\n    filters = {}; // update block tracker subs\n\n    updateBlockTrackerSubs({\n      prevFilterCount,\n      newFilterCount: 0\n    });\n  }\n\n  function updateBlockTrackerSubs({\n    prevFilterCount,\n    newFilterCount\n  }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    } // unsubscribe\n\n\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n} // helper for turning filter constructors into rpc middleware\n\n\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args);\n    const result = intToHex(filter.id);\n    return result;\n  });\n} // helper for pulling out req.params and setting res.result\n\n\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params);\n    res.result = result;\n  });\n}\n\nfunction mutexMiddlewareWrapper({\n  mutex\n}) {\n  return middleware => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire();\n      releaseLock();\n      middleware(req, res, next, end);\n    };\n  };\n}\n\nfunction objValues(obj, fn) {\n  const values = [];\n\n  for (let key in obj) {\n    values.push(obj[key]);\n  }\n\n  return values;\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/eth-json-rpc-filters/index.js"],"names":["Mutex","require","createAsyncMiddleware","createJsonRpcMiddleware","LogFilter","BlockFilter","TxFilter","intToHex","hexToInt","module","exports","createEthFilterMiddleware","blockTracker","provider","filterIndex","filters","mutex","waitForFree","mutexMiddlewareWrapper","middleware","eth_newFilter","toFilterCreationMiddleware","newLogFilter","eth_newBlockFilter","newBlockFilter","eth_newPendingTransactionFilter","newPendingTransactionFilter","eth_uninstallFilter","toAsyncRpcMiddleware","uninstallFilterHandler","eth_getFilterChanges","getFilterChanges","eth_getFilterLogs","getFilterLogs","filterUpdater","oldBlock","newBlock","length","releaseLock","acquire","Promise","all","objValues","map","filter","update","err","console","error","uninstallFilter","destroy","uninstallAllFilters","params","installFilter","filterIndexHex","Error","results","getChangesAndClear","type","getAllResults","result","Boolean","prevFilterCount","currentBlock","getLatestBlock","initialize","id","idHex","newFilterCount","updateBlockTrackerSubs","on","removeListener","createFilterFn","args","asyncFn","req","res","apply","next","end","obj","fn","values","key","push"],"mappings":"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","sourcesContent":["const Mutex = require('async-mutex').Mutex\nconst { createAsyncMiddleware } = require('json-rpc-engine')\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold')\nconst LogFilter = require('./log-filter.js')\nconst BlockFilter = require('./block-filter.js')\nconst TxFilter = require('./tx-filter.js')\nconst { intToHex, hexToInt } = require('./hexUtils')\n\nmodule.exports = createEthFilterMiddleware\n\nfunction createEthFilterMiddleware({ blockTracker, provider }) {\n\n  // create filter collection\n  let filterIndex = 0\n  let filters = {}\n  // create update mutex\n  const mutex = new Mutex()\n  const waitForFree = mutexMiddlewareWrapper({ mutex })\n\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter:                   waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter:              waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter:             waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges:            waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs:               waitForFree(toAsyncRpcMiddleware(getFilterLogs)),\n  })\n\n  // setup filter updating and destroy handler\n  const filterUpdater = async ({ oldBlock, newBlock }) => {\n    if (filters.length === 0) return\n    // lock update reads\n    const releaseLock = await mutex.acquire()\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async (filter) => {\n        try {\n         await filter.update({ oldBlock, newBlock })\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err)\n        }\n      }))\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err)\n    }\n    // unlock update reads\n    releaseLock()\n  }\n\n  // expose filter methods directly\n  middleware.newLogFilter = newLogFilter\n  middleware.newBlockFilter = newBlockFilter\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter\n  middleware.uninstallFilter = uninstallFilterHandler\n  middleware.getFilterChanges = getFilterChanges\n  middleware.getFilterLogs = getFilterLogs\n\n  // expose destroy method for cleanup\n  middleware.destroy = () => {\n    uninstallAllFilters()\n  }\n\n  return middleware\n\n  //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({ provider, params })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({ provider })\n    const filterIndex = await installFilter(filter)\n    return filter\n  }\n\n  //\n  // get filter changes\n  //\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    const results = filter.getChangesAndClear()\n    return results\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`)\n    }\n    // only return results for log filters\n    if (filter.type === 'log') {\n      results = filter.getAllResults()\n    } else {\n      results = []\n    }\n    return results\n  }\n\n\n  //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex)\n    const filter = filters[filterIndex]\n    const result = Boolean(filter)\n    // uninstall filter\n    if (result) {\n      await uninstallFilter(filterIndex)\n    }\n    return result\n  }\n\n  //\n  // utils\n  //\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length\n    // install filter\n    const currentBlock = await blockTracker.getLatestBlock()\n    await filter.initialize({ currentBlock })\n    filterIndex++\n    filters[filterIndex] = filter\n    filter.id = filterIndex\n    filter.idHex = intToHex(filterIndex)\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n    return filterIndex\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length\n    delete filters[filterIndex]\n    // update block tracker subs\n    const newFilterCount = objValues(filters).length\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount })\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length\n    filters = {}\n    // update block tracker subs\n    updateBlockTrackerSubs({ prevFilterCount, newFilterCount: 0 })\n  }\n\n  function updateBlockTrackerSubs({ prevFilterCount, newFilterCount }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater)\n      return\n    }\n    // unsubscribe\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater)\n      return\n    }\n  }\n\n}\n\n// helper for turning filter constructors into rpc middleware\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args)\n    const result = intToHex(filter.id)\n    return result\n  })\n}\n\n// helper for pulling out req.params and setting res.result\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params)\n    res.result = result\n  })\n}\n\nfunction mutexMiddlewareWrapper({ mutex }) {\n  return (middleware) => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire()\n      releaseLock()\n      middleware(req, res, next, end)\n    }\n  }\n}\n\nfunction objValues(obj, fn){\n  const values = []\n  for (let key in obj) {\n    values.push(obj[key])\n  }\n  return values\n}\n"]},"metadata":{},"sourceType":"script"}