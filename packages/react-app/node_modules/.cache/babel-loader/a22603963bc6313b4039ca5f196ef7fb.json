{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\"; // @TOOD remove dependences transactions\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n; ///////////////////////////////\n\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  from: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true\n};\n\nfunction resolveName(resolver, nameOrPromise) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const name = yield nameOrPromise; // If it is already an address, just use it (after adding checksum)\n\n    try {\n      return getAddress(name);\n    } catch (error) {}\n\n    if (!resolver) {\n      logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resolveName\"\n      });\n    }\n\n    const address = yield resolver.resolveName(name);\n\n    if (address == null) {\n      logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n  });\n} // Recursively replaces ENS names with promises to resolve the name and resolves all properties\n\n\nfunction resolveAddresses(resolver, value, paramType) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (Array.isArray(paramType)) {\n      return yield Promise.all(paramType.map((paramType, index) => {\n        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n      }));\n    }\n\n    if (paramType.type === \"address\") {\n      return yield resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n      return yield resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n      if (!Array.isArray(value)) {\n        return Promise.reject(new Error(\"invalid value for array\"));\n      }\n\n      return yield Promise.all(value.map(v => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n  });\n}\n\nfunction populateTransaction(contract, fragment, args) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // If an extra argument is given, it is overrides\n    let overrides = {};\n\n    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      overrides = shallowCopy(args.pop());\n    } // Make sure the parameter count matches\n\n\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\"); // Populate \"from\" override (allow promises)\n\n    if (contract.signer) {\n      if (overrides.from) {\n        // Contracts with a Signer are from the Signer's frame-of-reference;\n        // but we allow overriding \"from\" if it matches the signer\n        overrides.from = resolveProperties({\n          override: resolveName(contract.signer, overrides.from),\n          signer: contract.signer.getAddress()\n        }).then(check => __awaiter(this, void 0, void 0, function* () {\n          if (getAddress(check.signer) !== check.override) {\n            logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"overrides.from\"\n            });\n          }\n\n          return check.override;\n        }));\n      } else {\n        overrides.from = contract.signer.getAddress();\n      }\n    } else if (overrides.from) {\n      overrides.from = resolveName(contract.provider, overrides.from); //} else {\n      // Contracts without a signer can override \"from\", and if\n      // unspecified the zero address is used\n      //overrides.from = AddressZero;\n    } // Wait for all dependencies to be resolved (prefer the signer over the provider)\n\n\n    const resolved = yield resolveProperties({\n      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n      address: contract.resolvedAddress,\n      overrides: resolveProperties(overrides) || {}\n    }); // The ABI coded transaction\n\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx = {\n      data: data,\n      to: resolved.address\n    }; // Resolved Overrides\n\n    const ro = resolved.overrides; // Populate simple overrides\n\n    if (ro.nonce != null) {\n      tx.nonce = BigNumber.from(ro.nonce).toNumber();\n    }\n\n    if (ro.gasLimit != null) {\n      tx.gasLimit = BigNumber.from(ro.gasLimit);\n    }\n\n    if (ro.gasPrice != null) {\n      tx.gasPrice = BigNumber.from(ro.gasPrice);\n    }\n\n    if (ro.from != null) {\n      tx.from = ro.from;\n    } // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n\n\n    if (tx.gasLimit == null && fragment.gas != null) {\n      // Conmpute the intrinisic gas cost for this transaction\n      // @TODO: This is based on the yellow paper as of Petersburg; this is something\n      // we may wish to parameterize in v6 as part of the Network object. Since this\n      // is always a non-nil to address, we can ignore G_create, but may wish to add\n      // similar logic to the ContractFactory.\n      let intrinsic = 21000;\n      const bytes = arrayify(data);\n\n      for (let i = 0; i < bytes.length; i++) {\n        intrinsic += 4;\n\n        if (bytes[i]) {\n          intrinsic += 64;\n        }\n      }\n\n      tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    } // Populate \"value\" override\n\n\n    if (ro.value) {\n      const roValue = BigNumber.from(ro.value);\n\n      if (!roValue.isZero() && !fragment.payable) {\n        logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"overrides.value\",\n          value: overrides.value\n        });\n      }\n\n      tx.value = roValue;\n    } // Remvoe the overrides\n\n\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value; // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n\n    const leftovers = Object.keys(overrides).filter(key => overrides[key] != null);\n\n    if (leftovers.length) {\n      logger.throwError(`cannot override ${leftovers.map(l => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"overrides\",\n        overrides: leftovers\n      });\n    }\n\n    return tx;\n  });\n}\n\nfunction buildPopulate(contract, fragment) {\n  return function (...args) {\n    return populateTransaction(contract, fragment, args);\n  };\n}\n\nfunction buildEstimate(contract, fragment) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!signerOrProvider) {\n        logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"estimateGas\"\n        });\n      }\n\n      const tx = yield populateTransaction(contract, fragment, args);\n      return yield signerOrProvider.estimateGas(tx);\n    });\n  };\n}\n\nfunction buildCall(contract, fragment, collapseSimple) {\n  const signerOrProvider = contract.signer || contract.provider;\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Extract the \"blockTag\" override if present\n      let blockTag = undefined;\n\n      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n        const overrides = shallowCopy(args.pop());\n\n        if (overrides.blockTag != null) {\n          blockTag = yield overrides.blockTag;\n        }\n\n        delete overrides.blockTag;\n        args.push(overrides);\n      } // If the contract was just deployed, wait until it is mined\n\n\n      if (contract.deployTransaction != null) {\n        yield contract._deployed(blockTag);\n      } // Call a node and get the result\n\n\n      const tx = yield populateTransaction(contract, fragment, args);\n      const result = yield signerOrProvider.call(tx, blockTag);\n\n      try {\n        let value = contract.interface.decodeFunctionResult(fragment, result);\n\n        if (collapseSimple && fragment.outputs.length === 1) {\n          value = value[0];\n        }\n\n        return value;\n      } catch (error) {\n        if (error.code === Logger.errors.CALL_EXCEPTION) {\n          error.address = contract.address;\n          error.args = args;\n          error.transaction = tx;\n        }\n\n        throw error;\n      }\n    });\n  };\n}\n\nfunction buildSend(contract, fragment) {\n  return function (...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!contract.signer) {\n        logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"sendTransaction\"\n        });\n      } // If the contract was just deployed, wait until it is minded\n\n\n      if (contract.deployTransaction != null) {\n        yield contract._deployed();\n      }\n\n      const txRequest = yield populateTransaction(contract, fragment, args);\n      const tx = yield contract.signer.sendTransaction(txRequest); // Tweak the tw.wait so the receipt has extra properties\n\n      const wait = tx.wait.bind(tx);\n\n      tx.wait = confirmations => {\n        return wait(confirmations).then(receipt => {\n          receipt.events = receipt.logs.map(log => {\n            let event = deepCopy(log);\n            let parsed = null;\n\n            try {\n              parsed = contract.interface.parseLog(log);\n            } catch (e) {} // Successfully parsed the event log; include it\n\n\n            if (parsed) {\n              event.args = parsed.args;\n\n              event.decode = (data, topics) => {\n                return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n              };\n\n              event.event = parsed.name;\n              event.eventSignature = parsed.signature;\n            } // Useful operations\n\n\n            event.removeListener = () => {\n              return contract.provider;\n            };\n\n            event.getBlock = () => {\n              return contract.provider.getBlock(receipt.blockHash);\n            };\n\n            event.getTransaction = () => {\n              return contract.provider.getTransaction(receipt.transactionHash);\n            };\n\n            event.getTransactionReceipt = () => {\n              return Promise.resolve(receipt);\n            };\n\n            return event;\n          });\n          return receipt;\n        });\n      };\n\n      return tx;\n    });\n  };\n}\n\nfunction buildDefault(contract, fragment, collapseSimple) {\n  if (fragment.constant) {\n    return buildCall(contract, fragment, collapseSimple);\n  }\n\n  return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter) {\n  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n    return \"*\";\n  }\n\n  return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(topic => {\n    if (Array.isArray(topic)) {\n      return topic.join(\"|\");\n    }\n\n    return topic;\n  }).join(\":\") : \"\");\n}\n\nclass RunningEvent {\n  constructor(tag, filter) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"filter\", filter);\n    this._listeners = [];\n  }\n\n  addListener(listener, once) {\n    this._listeners.push({\n      listener: listener,\n      once: once\n    });\n  }\n\n  removeListener(listener) {\n    let done = false;\n    this._listeners = this._listeners.filter(item => {\n      if (done || item.listener !== listener) {\n        return true;\n      }\n\n      done = true;\n      return false;\n    });\n  }\n\n  removeAllListeners() {\n    this._listeners = [];\n  }\n\n  listeners() {\n    return this._listeners.map(i => i.listener);\n  }\n\n  listenerCount() {\n    return this._listeners.length;\n  }\n\n  run(args) {\n    const listenerCount = this.listenerCount();\n    this._listeners = this._listeners.filter(item => {\n      const argsCopy = args.slice(); // Call the callback in the next event loop\n\n      setTimeout(() => {\n        item.listener.apply(this, argsCopy);\n      }, 0); // Reschedule it if it not \"once\"\n\n      return !item.once;\n    });\n    return listenerCount;\n  }\n\n  prepareEvent(event) {} // Returns the array that will be applied to an emit\n\n\n  getEmit(event) {\n    return [event];\n  }\n\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n  constructor() {\n    super(\"error\", null);\n  }\n\n} // @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additioanlly dereference the arguments when emitting\n\n\nclass FragmentRunningEvent extends RunningEvent {\n  constructor(address, contractInterface, fragment, topics) {\n    const filter = {\n      address: address\n    };\n    let topic = contractInterface.getEventTopic(fragment);\n\n    if (topics) {\n      if (topic !== topics[0]) {\n        logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n      }\n\n      filter.topics = topics.slice();\n    } else {\n      filter.topics = [topic];\n    }\n\n    super(getEventTag(filter), filter);\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n    defineReadOnly(this, \"fragment\", fragment);\n  }\n\n  prepareEvent(event) {\n    super.prepareEvent(event);\n    event.event = this.fragment.name;\n    event.eventSignature = this.fragment.format();\n\n    event.decode = (data, topics) => {\n      return this.interface.decodeEventLog(this.fragment, data, topics);\n    };\n\n    try {\n      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n    } catch (error) {\n      event.args = null;\n      event.decodeError = error;\n    }\n  }\n\n  getEmit(event) {\n    const errors = checkResultErrors(event.args);\n\n    if (errors.length) {\n      throw errors[0].error;\n    }\n\n    const args = (event.args || []).slice();\n    args.push(event);\n    return args;\n  }\n\n} // A Wildard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\n\n\nclass WildcardRunningEvent extends RunningEvent {\n  constructor(address, contractInterface) {\n    super(\"*\", {\n      address: address\n    });\n    defineReadOnly(this, \"address\", address);\n    defineReadOnly(this, \"interface\", contractInterface);\n  }\n\n  prepareEvent(event) {\n    super.prepareEvent(event);\n\n    try {\n      const parsed = this.interface.parseLog(event);\n      event.event = parsed.name;\n      event.eventSignature = parsed.signature;\n\n      event.decode = (data, topics) => {\n        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n      };\n\n      event.args = parsed.args;\n    } catch (error) {// No matching event\n    }\n  }\n\n}\n\nexport class Contract {\n  constructor(addressOrName, contractInterface, signerOrProvider) {\n    logger.checkNew(new.target, Contract); // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n    //address = getAddress(address);\n\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n\n    if (signerOrProvider == null) {\n      defineReadOnly(this, \"provider\", null);\n      defineReadOnly(this, \"signer\", null);\n    } else if (Signer.isSigner(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n      defineReadOnly(this, \"signer\", signerOrProvider);\n    } else if (Provider.isProvider(signerOrProvider)) {\n      defineReadOnly(this, \"provider\", signerOrProvider);\n      defineReadOnly(this, \"signer\", null);\n    } else {\n      logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n    }\n\n    defineReadOnly(this, \"callStatic\", {});\n    defineReadOnly(this, \"estimateGas\", {});\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"populateTransaction\", {});\n    defineReadOnly(this, \"filters\", {});\n    {\n      const uniqueFilters = {};\n      Object.keys(this.interface.events).forEach(eventSignature => {\n        const event = this.interface.events[eventSignature];\n        defineReadOnly(this.filters, eventSignature, (...args) => {\n          return {\n            address: this.address,\n            topics: this.interface.encodeFilterTopics(event, args)\n          };\n        });\n\n        if (!uniqueFilters[event.name]) {\n          uniqueFilters[event.name] = [];\n        }\n\n        uniqueFilters[event.name].push(eventSignature);\n      });\n      Object.keys(uniqueFilters).forEach(name => {\n        const filters = uniqueFilters[name];\n\n        if (filters.length === 1) {\n          defineReadOnly(this.filters, name, this.filters[filters[0]]);\n        } else {\n          logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n        }\n      });\n    }\n    defineReadOnly(this, \"_runningEvents\", {});\n    defineReadOnly(this, \"_wrappedEmits\", {});\n\n    if (addressOrName == null) {\n      logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n    }\n\n    defineReadOnly(this, \"address\", addressOrName);\n\n    if (this.provider) {\n      defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n    } else {\n      try {\n        defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n      } catch (error) {\n        // Without a provider, we cannot use ENS names\n        logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new Contract\"\n        });\n      }\n    }\n\n    const uniqueNames = {};\n    const uniqueSignatures = {};\n    Object.keys(this.interface.functions).forEach(signature => {\n      const fragment = this.interface.functions[signature]; // Check that the signature is unique; if not the ABI generation has\n      // not been cleaned or may be incorrectly generated\n\n      if (uniqueSignatures[signature]) {\n        logger.warn(`Duplicate ABI entry for ${JSON.stringify(name)}`);\n        return;\n      }\n\n      uniqueSignatures[signature] = true; // Track unique names; we only expose bare named functions if they\n      // are ambiguous\n\n      {\n        const name = fragment.name;\n\n        if (!uniqueNames[name]) {\n          uniqueNames[name] = [];\n        }\n\n        uniqueNames[name].push(signature);\n      }\n\n      if (this[signature] == null) {\n        defineReadOnly(this, signature, buildDefault(this, fragment, true));\n      } // We do not collapse simple calls on this bucket, which allows\n      // frameworks to safely use this without introspection as well as\n      // allows decoding error recovery.\n\n\n      if (this.functions[signature] == null) {\n        defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n      }\n\n      if (this.callStatic[signature] == null) {\n        defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n      }\n\n      if (this.populateTransaction[signature] == null) {\n        defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n      }\n\n      if (this.estimateGas[signature] == null) {\n        defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n      }\n    });\n    Object.keys(uniqueNames).forEach(name => {\n      // Ambiguous names to not get attached as bare names\n      const signatures = uniqueNames[name];\n\n      if (signatures.length > 1) {\n        return;\n      }\n\n      const signature = signatures[0];\n\n      if (this[name] == null) {\n        defineReadOnly(this, name, this[signature]);\n      }\n\n      if (this.functions[name] == null) {\n        defineReadOnly(this.functions, name, this.functions[signature]);\n      }\n\n      if (this.callStatic[name] == null) {\n        defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n      }\n\n      if (this.populateTransaction[name] == null) {\n        defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n      }\n\n      if (this.estimateGas[name] == null) {\n        defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n      }\n    });\n  }\n\n  static getContractAddress(transaction) {\n    return getContractAddress(transaction);\n  }\n\n  static getInterface(contractInterface) {\n    if (Interface.isInterface(contractInterface)) {\n      return contractInterface;\n    }\n\n    return new Interface(contractInterface);\n  } // @TODO: Allow timeout?\n\n\n  deployed() {\n    return this._deployed();\n  }\n\n  _deployed(blockTag) {\n    if (!this._deployedPromise) {\n      // If we were just deployed, we know the transaction we should occur in\n      if (this.deployTransaction) {\n        this._deployedPromise = this.deployTransaction.wait().then(() => {\n          return this;\n        });\n      } else {\n        // @TODO: Once we allow a timeout to be passed in, we will wait\n        // up to that many blocks for getCode\n        // Otherwise, poll for our code to be deployed\n        this._deployedPromise = this.provider.getCode(this.address, blockTag).then(code => {\n          if (code === \"0x\") {\n            logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n              contractAddress: this.address,\n              operation: \"getDeployed\"\n            });\n          }\n\n          return this;\n        });\n      }\n    }\n\n    return this._deployedPromise;\n  } // @TODO:\n  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n  // @TODO:\n  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n\n  fallback(overrides) {\n    if (!this.signer) {\n      logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"sendTransaction(fallback)\"\n      });\n    }\n\n    const tx = shallowCopy(overrides || {});\n    [\"from\", \"to\"].forEach(function (key) {\n      if (tx[key] == null) {\n        return;\n      }\n\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    });\n    tx.to = this.resolvedAddress;\n    return this.deployed().then(() => {\n      return this.signer.sendTransaction(tx);\n    });\n  } // Reconnect to a different signer or provider\n\n\n  connect(signerOrProvider) {\n    if (typeof signerOrProvider === \"string\") {\n      signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n    }\n\n    const contract = new this.constructor(this.address, this.interface, signerOrProvider);\n\n    if (this.deployTransaction) {\n      defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n    }\n\n    return contract;\n  } // Re-attach to a different on-chain instance of this contract\n\n\n  attach(addressOrName) {\n    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n  }\n\n  static isIndexed(value) {\n    return Indexed.isIndexed(value);\n  }\n\n  _normalizeRunningEvent(runningEvent) {\n    // Already have an instance of this event running; we can re-use it\n    if (this._runningEvents[runningEvent.tag]) {\n      return this._runningEvents[runningEvent.tag];\n    }\n\n    return runningEvent;\n  }\n\n  _getRunningEvent(eventName) {\n    if (typeof eventName === \"string\") {\n      // Listen for \"error\" events (if your contract has an error event, include\n      // the full signature to bypass this special event keyword)\n      if (eventName === \"error\") {\n        return this._normalizeRunningEvent(new ErrorRunningEvent());\n      } // Listen for any event that is registered\n\n\n      if (eventName === \"event\") {\n        return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n      } // Listen for any event\n\n\n      if (eventName === \"*\") {\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n      } // Get the event Fragment (throws if ambiguous/unknown event)\n\n\n      const fragment = this.interface.getEvent(eventName);\n      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n    } // We have topics to filter by...\n\n\n    if (eventName.topics && eventName.topics.length > 0) {\n      // Is it a known topichash? (throws if no matching topichash)\n      try {\n        const topic = eventName.topics[0];\n\n        if (typeof topic !== \"string\") {\n          throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n        }\n\n        const fragment = this.interface.getEvent(topic);\n        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n      } catch (error) {} // Filter by the unknown topichash\n\n\n      const filter = {\n        address: this.address,\n        topics: eventName.topics\n      };\n      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n    }\n\n    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n  }\n\n  _checkRunningEvents(runningEvent) {\n    if (runningEvent.listenerCount() === 0) {\n      delete this._runningEvents[runningEvent.tag]; // If we have a poller for this, remove it\n\n      const emit = this._wrappedEmits[runningEvent.tag];\n\n      if (emit) {\n        this.provider.off(runningEvent.filter, emit);\n        delete this._wrappedEmits[runningEvent.tag];\n      }\n    }\n  } // Subclasses can override this to gracefully recover\n  // from parse errors if they wish\n\n\n  _wrapEvent(runningEvent, log, listener) {\n    const event = deepCopy(log);\n\n    event.removeListener = () => {\n      if (!listener) {\n        return;\n      }\n\n      runningEvent.removeListener(listener);\n\n      this._checkRunningEvents(runningEvent);\n    };\n\n    event.getBlock = () => {\n      return this.provider.getBlock(log.blockHash);\n    };\n\n    event.getTransaction = () => {\n      return this.provider.getTransaction(log.transactionHash);\n    };\n\n    event.getTransactionReceipt = () => {\n      return this.provider.getTransactionReceipt(log.transactionHash);\n    }; // This may throw if the topics and data mismatch the signature\n\n\n    runningEvent.prepareEvent(event);\n    return event;\n  }\n\n  _addEventListener(runningEvent, listener, once) {\n    if (!this.provider) {\n      logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"once\"\n      });\n    }\n\n    runningEvent.addListener(listener, once); // Track this running event and its listeners (may already be there; but no hard in updating)\n\n    this._runningEvents[runningEvent.tag] = runningEvent; // If we are not polling the provider, start polling\n\n    if (!this._wrappedEmits[runningEvent.tag]) {\n      const wrappedEmit = log => {\n        let event = this._wrapEvent(runningEvent, log, listener); // Try to emit the result for the parameterized event...\n\n\n        if (event.decodeError == null) {\n          try {\n            const args = runningEvent.getEmit(event);\n            this.emit(runningEvent.filter, ...args);\n          } catch (error) {\n            event.decodeError = error.error;\n          }\n        } // Always emit \"event\" for fragment-base events\n\n\n        if (runningEvent.filter != null) {\n          this.emit(\"event\", event);\n        } // Emit \"error\" if there was an error\n\n\n        if (event.decodeError != null) {\n          this.emit(\"error\", event.decodeError, event);\n        }\n      };\n\n      this._wrappedEmits[runningEvent.tag] = wrappedEmit; // Special events, like \"error\" do not have a filter\n\n      if (runningEvent.filter != null) {\n        this.provider.on(runningEvent.filter, wrappedEmit);\n      }\n    }\n  }\n\n  queryFilter(event, fromBlockOrBlockhash, toBlock) {\n    const runningEvent = this._getRunningEvent(event);\n\n    const filter = shallowCopy(runningEvent.filter);\n\n    if (typeof fromBlockOrBlockhash === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n      if (toBlock != null) {\n        logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n      }\n\n      filter.blockHash = fromBlockOrBlockhash;\n    } else {\n      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n      filter.toBlock = toBlock != null ? toBlock : \"latest\";\n    }\n\n    return this.provider.getLogs(filter).then(logs => {\n      return logs.map(log => this._wrapEvent(runningEvent, log, null));\n    });\n  }\n\n  on(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, false);\n\n    return this;\n  }\n\n  once(event, listener) {\n    this._addEventListener(this._getRunningEvent(event), listener, true);\n\n    return this;\n  }\n\n  emit(eventName, ...args) {\n    if (!this.provider) {\n      return false;\n    }\n\n    const runningEvent = this._getRunningEvent(eventName);\n\n    const result = runningEvent.run(args) > 0; // May have drained all the \"once\" events; check for living events\n\n    this._checkRunningEvents(runningEvent);\n\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!this.provider) {\n      return 0;\n    }\n\n    if (eventName == null) {\n      return Object.keys(this._runningEvents).reduce((accum, key) => {\n        return accum + this._runningEvents[key].listenerCount();\n      }, 0);\n    }\n\n    return this._getRunningEvent(eventName).listenerCount();\n  }\n\n  listeners(eventName) {\n    if (!this.provider) {\n      return [];\n    }\n\n    if (eventName == null) {\n      const result = [];\n\n      for (let tag in this._runningEvents) {\n        this._runningEvents[tag].listeners().forEach(listener => {\n          result.push(listener);\n        });\n      }\n\n      return result;\n    }\n\n    return this._getRunningEvent(eventName).listeners();\n  }\n\n  removeAllListeners(eventName) {\n    if (!this.provider) {\n      return this;\n    }\n\n    if (eventName == null) {\n      for (const tag in this._runningEvents) {\n        const runningEvent = this._runningEvents[tag];\n        runningEvent.removeAllListeners();\n\n        this._checkRunningEvents(runningEvent);\n      }\n\n      return this;\n    } // Delete any listeners\n\n\n    const runningEvent = this._getRunningEvent(eventName);\n\n    runningEvent.removeAllListeners();\n\n    this._checkRunningEvents(runningEvent);\n\n    return this;\n  }\n\n  off(eventName, listener) {\n    if (!this.provider) {\n      return this;\n    }\n\n    const runningEvent = this._getRunningEvent(eventName);\n\n    runningEvent.removeListener(listener);\n\n    this._checkRunningEvents(runningEvent);\n\n    return this;\n  }\n\n  removeListener(eventName, listener) {\n    return this.off(eventName, listener);\n  }\n\n}\nexport class ContractFactory {\n  constructor(contractInterface, bytecode, signer) {\n    let bytecodeHex = null;\n\n    if (typeof bytecode === \"string\") {\n      bytecodeHex = bytecode;\n    } else if (isBytes(bytecode)) {\n      bytecodeHex = hexlify(bytecode);\n    } else if (bytecode && typeof bytecode.object === \"string\") {\n      // Allow the bytecode object from the Solidity compiler\n      bytecodeHex = bytecode.object;\n    } else {\n      // Crash in the next verification step\n      bytecodeHex = \"!\";\n    } // Make sure it is 0x prefixed\n\n\n    if (bytecodeHex.substring(0, 2) !== \"0x\") {\n      bytecodeHex = \"0x\" + bytecodeHex;\n    } // Make sure the final result is valid bytecode\n\n\n    if (!isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n      logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n    } // If we have a signer, make sure it is valid\n\n\n    if (signer && !Signer.isSigner(signer)) {\n      logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n    }\n\n    defineReadOnly(this, \"bytecode\", bytecodeHex);\n    defineReadOnly(this, \"interface\", getStatic(new.target, \"getInterface\")(contractInterface));\n    defineReadOnly(this, \"signer\", signer || null);\n  } // @TODO: Future; rename to populteTransaction?\n\n\n  getDeployTransaction(...args) {\n    let tx = {}; // If we have 1 additional argument, we allow transaction overrides\n\n    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n      tx = shallowCopy(args.pop());\n\n      for (const key in tx) {\n        if (!allowedTransactionKeys[key]) {\n          throw new Error(\"unknown transaction override \" + key);\n        }\n      }\n    } // Do not allow these to be overridden in a deployment transaction\n\n\n    [\"data\", \"from\", \"to\"].forEach(key => {\n      if (tx[key] == null) {\n        return;\n      }\n\n      logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: key\n      });\n    }); // Make sure the call matches the constructor signature\n\n    logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\"); // Set the data to the bytecode + the encoded constructor arguments\n\n    tx.data = hexlify(concat([this.bytecode, this.interface.encodeDeploy(args)]));\n    return tx;\n  }\n\n  deploy(...args) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let overrides = {}; // If 1 extra parameter was passed in, it contains overrides\n\n      if (args.length === this.interface.deploy.inputs.length + 1) {\n        overrides = args.pop();\n      } // Make sure the call matches the constructor signature\n\n\n      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\"); // Resolve ENS names and promises in the arguments\n\n      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n      params.push(overrides); // Get the deployment transaction (with optional overrides)\n\n      const unsignedTx = this.getDeployTransaction(...params); // Send the deployment transaction\n\n      const tx = yield this.signer.sendTransaction(unsignedTx);\n      const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n      const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n      defineReadOnly(contract, \"deployTransaction\", tx);\n      return contract;\n    });\n  }\n\n  attach(address) {\n    return this.constructor.getContract(address, this.interface, this.signer);\n  }\n\n  connect(signer) {\n    return new this.constructor(this.interface, this.bytecode, signer);\n  }\n\n  static fromSolidity(compilerOutput, signer) {\n    if (compilerOutput == null) {\n      logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, {\n        argument: \"compilerOutput\"\n      });\n    }\n\n    if (typeof compilerOutput === \"string\") {\n      compilerOutput = JSON.parse(compilerOutput);\n    }\n\n    const abi = compilerOutput.abi;\n    let bytecode = null;\n\n    if (compilerOutput.bytecode) {\n      bytecode = compilerOutput.bytecode;\n    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n      bytecode = compilerOutput.evm.bytecode;\n    }\n\n    return new this(abi, bytecode, signer);\n  }\n\n  static getInterface(contractInterface) {\n    return Contract.getInterface(contractInterface);\n  }\n\n  static getContractAddress(tx) {\n    return getContractAddress(tx);\n  }\n\n  static getContract(address, contractInterface, signer) {\n    return new Contract(address, contractInterface, signer);\n  }\n\n}","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { checkResultErrors, Indexed, Interface } from \"@ethersproject/abi\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\n// @TOOD remove dependences transactions\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n;\n///////////////////////////////\nconst allowedTransactionKeys = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true\n};\nfunction resolveName(resolver, nameOrPromise) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const name = yield nameOrPromise;\n        // If it is already an address, just use it (after adding checksum)\n        try {\n            return getAddress(name);\n        }\n        catch (error) { }\n        if (!resolver) {\n            logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"resolveName\"\n            });\n        }\n        const address = yield resolver.resolveName(name);\n        if (address == null) {\n            logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n        }\n        return address;\n    });\n}\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nfunction resolveAddresses(resolver, value, paramType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (Array.isArray(paramType)) {\n            return yield Promise.all(paramType.map((paramType, index) => {\n                return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);\n            }));\n        }\n        if (paramType.type === \"address\") {\n            return yield resolveName(resolver, value);\n        }\n        if (paramType.type === \"tuple\") {\n            return yield resolveAddresses(resolver, value, paramType.components);\n        }\n        if (paramType.baseType === \"array\") {\n            if (!Array.isArray(value)) {\n                return Promise.reject(new Error(\"invalid value for array\"));\n            }\n            return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n        }\n        return value;\n    });\n}\nfunction populateTransaction(contract, fragment, args) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // If an extra argument is given, it is overrides\n        let overrides = {};\n        if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            overrides = shallowCopy(args.pop());\n        }\n        // Make sure the parameter count matches\n        logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n        // Populate \"from\" override (allow promises)\n        if (contract.signer) {\n            if (overrides.from) {\n                // Contracts with a Signer are from the Signer's frame-of-reference;\n                // but we allow overriding \"from\" if it matches the signer\n                overrides.from = resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                }).then((check) => __awaiter(this, void 0, void 0, function* () {\n                    if (getAddress(check.signer) !== check.override) {\n                        logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                        });\n                    }\n                    return check.override;\n                }));\n            }\n            else {\n                overrides.from = contract.signer.getAddress();\n            }\n        }\n        else if (overrides.from) {\n            overrides.from = resolveName(contract.provider, overrides.from);\n            //} else {\n            // Contracts without a signer can override \"from\", and if\n            // unspecified the zero address is used\n            //overrides.from = AddressZero;\n        }\n        // Wait for all dependencies to be resolved (prefer the signer over the provider)\n        const resolved = yield resolveProperties({\n            args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n            address: contract.resolvedAddress,\n            overrides: (resolveProperties(overrides) || {})\n        });\n        // The ABI coded transaction\n        const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n        const tx = {\n            data: data,\n            to: resolved.address\n        };\n        // Resolved Overrides\n        const ro = resolved.overrides;\n        // Populate simple overrides\n        if (ro.nonce != null) {\n            tx.nonce = BigNumber.from(ro.nonce).toNumber();\n        }\n        if (ro.gasLimit != null) {\n            tx.gasLimit = BigNumber.from(ro.gasLimit);\n        }\n        if (ro.gasPrice != null) {\n            tx.gasPrice = BigNumber.from(ro.gasPrice);\n        }\n        if (ro.from != null) {\n            tx.from = ro.from;\n        }\n        // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n        if (tx.gasLimit == null && fragment.gas != null) {\n            // Conmpute the intrinisic gas cost for this transaction\n            // @TODO: This is based on the yellow paper as of Petersburg; this is something\n            // we may wish to parameterize in v6 as part of the Network object. Since this\n            // is always a non-nil to address, we can ignore G_create, but may wish to add\n            // similar logic to the ContractFactory.\n            let intrinsic = 21000;\n            const bytes = arrayify(data);\n            for (let i = 0; i < bytes.length; i++) {\n                intrinsic += 4;\n                if (bytes[i]) {\n                    intrinsic += 64;\n                }\n            }\n            tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n        }\n        // Populate \"value\" override\n        if (ro.value) {\n            const roValue = BigNumber.from(ro.value);\n            if (!roValue.isZero() && !fragment.payable) {\n                logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                });\n            }\n            tx.value = roValue;\n        }\n        // Remvoe the overrides\n        delete overrides.nonce;\n        delete overrides.gasLimit;\n        delete overrides.gasPrice;\n        delete overrides.from;\n        delete overrides.value;\n        // Make sure there are no stray overrides, which may indicate a\n        // typo or using an unsupported key.\n        const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));\n        if (leftovers.length) {\n            logger.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(\",\")}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides\",\n                overrides: leftovers\n            });\n        }\n        return tx;\n    });\n}\nfunction buildPopulate(contract, fragment) {\n    return function (...args) {\n        return populateTransaction(contract, fragment, args);\n    };\n}\nfunction buildEstimate(contract, fragment) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!signerOrProvider) {\n                logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                });\n            }\n            const tx = yield populateTransaction(contract, fragment, args);\n            return yield signerOrProvider.estimateGas(tx);\n        });\n    };\n}\nfunction buildCall(contract, fragment, collapseSimple) {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Extract the \"blockTag\" override if present\n            let blockTag = undefined;\n            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n                const overrides = shallowCopy(args.pop());\n                if (overrides.blockTag != null) {\n                    blockTag = yield overrides.blockTag;\n                }\n                delete overrides.blockTag;\n                args.push(overrides);\n            }\n            // If the contract was just deployed, wait until it is mined\n            if (contract.deployTransaction != null) {\n                yield contract._deployed(blockTag);\n            }\n            // Call a node and get the result\n            const tx = yield populateTransaction(contract, fragment, args);\n            const result = yield signerOrProvider.call(tx, blockTag);\n            try {\n                let value = contract.interface.decodeFunctionResult(fragment, result);\n                if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                }\n                return value;\n            }\n            catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                }\n                throw error;\n            }\n        });\n    };\n}\nfunction buildSend(contract, fragment) {\n    return function (...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!contract.signer) {\n                logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                });\n            }\n            // If the contract was just deployed, wait until it is minded\n            if (contract.deployTransaction != null) {\n                yield contract._deployed();\n            }\n            const txRequest = yield populateTransaction(contract, fragment, args);\n            const tx = yield contract.signer.sendTransaction(txRequest);\n            // Tweak the tw.wait so the receipt has extra properties\n            const wait = tx.wait.bind(tx);\n            tx.wait = (confirmations) => {\n                return wait(confirmations).then((receipt) => {\n                    receipt.events = receipt.logs.map((log) => {\n                        let event = deepCopy(log);\n                        let parsed = null;\n                        try {\n                            parsed = contract.interface.parseLog(log);\n                        }\n                        catch (e) { }\n                        // Successfully parsed the event log; include it\n                        if (parsed) {\n                            event.args = parsed.args;\n                            event.decode = (data, topics) => {\n                                return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                            };\n                            event.event = parsed.name;\n                            event.eventSignature = parsed.signature;\n                        }\n                        // Useful operations\n                        event.removeListener = () => { return contract.provider; };\n                        event.getBlock = () => {\n                            return contract.provider.getBlock(receipt.blockHash);\n                        };\n                        event.getTransaction = () => {\n                            return contract.provider.getTransaction(receipt.transactionHash);\n                        };\n                        event.getTransactionReceipt = () => {\n                            return Promise.resolve(receipt);\n                        };\n                        return event;\n                    });\n                    return receipt;\n                });\n            };\n            return tx;\n        });\n    };\n}\nfunction buildDefault(contract, fragment, collapseSimple) {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\nfunction getEventTag(filter) {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\") : \"\");\n}\nclass RunningEvent {\n    constructor(tag, filter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n    }\n    addListener(listener, once) {\n        this._listeners.push({ listener: listener, once: once });\n    }\n    removeListener(listener) {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) {\n                return true;\n            }\n            done = true;\n            return false;\n        });\n    }\n    removeAllListeners() {\n        this._listeners = [];\n    }\n    listeners() {\n        return this._listeners.map((i) => i.listener);\n    }\n    listenerCount() {\n        return this._listeners.length;\n    }\n    run(args) {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n            const argsCopy = args.slice();\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n        return listenerCount;\n    }\n    prepareEvent(event) {\n    }\n    // Returns the array that will be applied to an emit\n    getEmit(event) {\n        return [event];\n    }\n}\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additioanlly dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    constructor(address, contractInterface, fragment, topics) {\n        const filter = {\n            address: address\n        };\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) {\n                logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n            }\n            filter.topics = topics.slice();\n        }\n        else {\n            filter.topics = [topic];\n        }\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n        event.decode = (data, topics) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        }\n        catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n    getEmit(event) {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) {\n            throw errors[0].error;\n        }\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n// A Wildard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    constructor(address, contractInterface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n    prepareEvent(event) {\n        super.prepareEvent(event);\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n            event.decode = (data, topics) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n            event.args = parsed.args;\n        }\n        catch (error) {\n            // No matching event\n        }\n    }\n}\nexport class Contract {\n    constructor(addressOrName, contractInterface, signerOrProvider) {\n        logger.checkNew(new.target, Contract);\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic((new.target), \"getInterface\")(contractInterface));\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        }\n        else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n        defineReadOnly(this, \"callStatic\", {});\n        defineReadOnly(this, \"estimateGas\", {});\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"populateTransaction\", {});\n        defineReadOnly(this, \"filters\", {});\n        {\n            const uniqueFilters = {};\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                    };\n                });\n                if (!uniqueFilters[event.name]) {\n                    uniqueFilters[event.name] = [];\n                }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                }\n                else {\n                    logger.warn(`Duplicate definition of ${name} (${filters.join(\", \")})`);\n                }\n            });\n        }\n        defineReadOnly(this, \"_runningEvents\", {});\n        defineReadOnly(this, \"_wrappedEmits\", {});\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        }\n        else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            }\n            catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n        const uniqueNames = {};\n        const uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${JSON.stringify(name)}`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[name]) {\n                    uniqueNames[name] = [];\n                }\n                uniqueNames[name].push(signature);\n            }\n            if (this[signature] == null) {\n                defineReadOnly(this, signature, buildDefault(this, fragment, true));\n            }\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) {\n                return;\n            }\n            const signature = signatures[0];\n            if (this[name] == null) {\n                defineReadOnly(this, name, this[signature]);\n            }\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n    static getContractAddress(transaction) {\n        return getContractAddress(transaction);\n    }\n    static getInterface(contractInterface) {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n    // @TODO: Allow timeout?\n    deployed() {\n        return this._deployed();\n    }\n    _deployed(blockTag) {\n        if (!this._deployedPromise) {\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n            }\n            else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n        return this._deployedPromise;\n    }\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n    fallback(overrides) {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" });\n        }\n        const tx = shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider) {\n        if (typeof (signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n        const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName) {\n        return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);\n    }\n    static isIndexed(value) {\n        return Indexed.isIndexed(value);\n    }\n    _normalizeRunningEvent(runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n        }\n        return runningEvent;\n    }\n    _getRunningEvent(eventName) {\n        if (typeof (eventName) === \"string\") {\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof (topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            }\n            catch (error) { }\n            // Filter by the unknown topichash\n            const filter = {\n                address: this.address,\n                topics: eventName.topics\n            };\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n    _checkRunningEvents(runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent, log, listener) {\n        const event = deepCopy(log);\n        event.removeListener = () => {\n            if (!listener) {\n                return;\n            }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); };\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n        return event;\n    }\n    _addEventListener(runningEvent, listener, once) {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" });\n        }\n        runningEvent.addListener(listener, once);\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    }\n                    catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n    queryFilter(event, fromBlockOrBlockhash, toBlock) {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n        if (typeof (fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            filter.blockHash = fromBlockOrBlockhash;\n        }\n        else {\n            filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);\n            filter.toBlock = ((toBlock != null) ? toBlock : \"latest\");\n        }\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n    on(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n    once(event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n    emit(eventName, ...args) {\n        if (!this.provider) {\n            return false;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!this.provider) {\n            return 0;\n        }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n    listeners(eventName) {\n        if (!this.provider) {\n            return [];\n        }\n        if (eventName == null) {\n            const result = [];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener);\n                });\n            }\n            return result;\n        }\n        return this._getRunningEvent(eventName).listeners();\n    }\n    removeAllListeners(eventName) {\n        if (!this.provider) {\n            return this;\n        }\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    off(eventName, listener) {\n        if (!this.provider) {\n            return this;\n        }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n    removeListener(eventName, listener) {\n        return this.off(eventName, listener);\n    }\n}\nexport class ContractFactory {\n    constructor(contractInterface, bytecode, signer) {\n        let bytecodeHex = null;\n        if (typeof (bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        }\n        else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        }\n        else if (bytecode && typeof (bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = bytecode.object;\n        }\n        else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n            bytecodeHex = \"0x\" + bytecodeHex;\n        }\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic((new.target), \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n    // @TODO: Future; rename to populteTransaction?\n    getDeployTransaction(...args) {\n        let tx = {};\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof (args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if (tx[key] == null) {\n                return;\n            }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });\n        });\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n        return tx;\n    }\n    deploy(...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let overrides = {};\n            // If 1 extra parameter was passed in, it contains overrides\n            if (args.length === this.interface.deploy.inputs.length + 1) {\n                overrides = args.pop();\n            }\n            // Make sure the call matches the constructor signature\n            logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n            // Resolve ENS names and promises in the arguments\n            const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n            params.push(overrides);\n            // Get the deployment transaction (with optional overrides)\n            const unsignedTx = this.getDeployTransaction(...params);\n            // Send the deployment transaction\n            const tx = yield this.signer.sendTransaction(unsignedTx);\n            const address = getStatic(this.constructor, \"getContractAddress\")(tx);\n            const contract = getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n            defineReadOnly(contract, \"deployTransaction\", tx);\n            return contract;\n        });\n    }\n    attach(address) {\n        return (this.constructor).getContract(address, this.interface, this.signer);\n    }\n    connect(signer) {\n        return new (this.constructor)(this.interface, this.bytecode, signer);\n    }\n    static fromSolidity(compilerOutput, signer) {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n        if (typeof (compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n        const abi = compilerOutput.abi;\n        let bytecode = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        }\n        else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n        return new this(abi, bytecode, signer);\n    }\n    static getInterface(contractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n    static getContractAddress(tx) {\n        return getContractAddress(tx);\n    }\n    static getContract(address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}