{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicats\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1; // For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n  constructor(url, network) {\n    // This will be added in the future; please open an issue to expedite\n    if (network === \"any\") {\n      logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"network:any\"\n      });\n    }\n\n    super(url, network);\n    this._pollingInterval = -1;\n    this._wsReady = false;\n    defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n    defineReadOnly(this, \"_requests\", {});\n    defineReadOnly(this, \"_subs\", {});\n    defineReadOnly(this, \"_subIds\", {});\n    defineReadOnly(this, \"_detectNetwork\", super.detectNetwork()); // Stall sending requests until the socket is open...\n\n    this._websocket.onopen = () => {\n      this._wsReady = true;\n      Object.keys(this._requests).forEach(id => {\n        this._websocket.send(this._requests[id].payload);\n      });\n    };\n\n    this._websocket.onmessage = messageEvent => {\n      const data = messageEvent.data;\n      const result = JSON.parse(data);\n\n      if (result.id != null) {\n        const id = String(result.id);\n        const request = this._requests[id];\n        delete this._requests[id];\n\n        if (result.result !== undefined) {\n          request.callback(null, result.result);\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: JSON.parse(request.payload),\n            response: result.result,\n            provider: this\n          });\n        } else {\n          let error = null;\n\n          if (result.error) {\n            error = new Error(result.error.message || \"unknown error\");\n            defineReadOnly(error, \"code\", result.error.code || null);\n            defineReadOnly(error, \"response\", data);\n          } else {\n            error = new Error(\"unknown error\");\n          }\n\n          request.callback(error, undefined);\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: JSON.parse(request.payload),\n            provider: this\n          });\n        }\n      } else if (result.method === \"eth_subscription\") {\n        // Subscription...\n        const sub = this._subs[result.params.subscription];\n\n        if (sub) {\n          //this.emit.apply(this,                  );\n          sub.processFunc(result.params.result);\n        }\n      } else {\n        console.warn(\"this should not happen\");\n      }\n    }; // This Provider does not actually poll, but we want to trigger\n    // poll events for things that depend on them (like stalling for\n    // block and transaction lookups)\n\n\n    const fauxPoll = setInterval(() => {\n      this.emit(\"poll\");\n    }, 1000);\n\n    if (fauxPoll.unref) {\n      fauxPoll.unref();\n    }\n  }\n\n  detectNetwork() {\n    return this._detectNetwork;\n  }\n\n  get pollingInterval() {\n    return 0;\n  }\n\n  resetEventsBlock(blockNumber) {\n    logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"resetEventBlock\"\n    });\n  }\n\n  set pollingInterval(value) {\n    logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPollingInterval\"\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return null;\n    });\n  }\n\n  set polling(value) {\n    if (!value) {\n      return;\n    }\n\n    logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPolling\"\n    });\n  }\n\n  send(method, params) {\n    const rid = NextId++;\n    return new Promise((resolve, reject) => {\n      function callback(error, result) {\n        if (error) {\n          return reject(error);\n        }\n\n        return resolve(result);\n      }\n\n      const payload = JSON.stringify({\n        method: method,\n        params: params,\n        id: rid,\n        jsonrpc: \"2.0\"\n      });\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: JSON.parse(payload),\n        provider: this\n      });\n      this._requests[String(rid)] = {\n        callback,\n        payload\n      };\n\n      if (this._wsReady) {\n        this._websocket.send(payload);\n      }\n    });\n  }\n\n  static defaultUrl() {\n    return \"ws:/\\/localhost:8546\";\n  }\n\n  _subscribe(tag, param, processFunc) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let subIdPromise = this._subIds[tag];\n\n      if (subIdPromise == null) {\n        subIdPromise = Promise.all(param).then(param => {\n          return this.send(\"eth_subscribe\", param);\n        });\n        this._subIds[tag] = subIdPromise;\n      }\n\n      const subId = yield subIdPromise;\n      this._subs[subId] = {\n        tag,\n        processFunc\n      };\n    });\n  }\n\n  _startEvent(event) {\n    switch (event.type) {\n      case \"block\":\n        this._subscribe(\"block\", [\"newHeads\"], result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit(\"block\", blockNumber);\n        });\n\n        break;\n\n      case \"pending\":\n        this._subscribe(\"pending\", [\"newPendingTransactions\"], result => {\n          this.emit(\"pending\", result);\n        });\n\n        break;\n\n      case \"filter\":\n        this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n\n          this.emit(event.filter, this.formatter.filterLog(result));\n        });\n\n        break;\n\n      case \"tx\":\n        {\n          const emitReceipt = event => {\n            const hash = event.hash;\n            this.getTransactionReceipt(hash).then(receipt => {\n              if (!receipt) {\n                return;\n              }\n\n              this.emit(hash, receipt);\n            });\n          }; // In case it is already mined\n\n\n          emitReceipt(event); // To keep things simple, we start up a single newHeads subscription\n          // to keep an eye out for transactions we are watching for.\n          // Starting a subscription for an event (i.e. \"tx\") that is already\n          // running is (basically) a nop.\n\n          this._subscribe(\"tx\", [\"newHeads\"], result => {\n            this._events.filter(e => e.type === \"tx\").forEach(emitReceipt);\n          });\n\n          break;\n        }\n      // Nothing is needed\n\n      case \"debug\":\n      case \"poll\":\n      case \"willPoll\":\n      case \"didPoll\":\n      case \"error\":\n        break;\n\n      default:\n        console.log(\"unhandled:\", event);\n        break;\n    }\n  }\n\n  _stopEvent(event) {\n    let tag = event.tag;\n\n    if (event.type === \"tx\") {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === \"tx\").length) {\n        return;\n      }\n\n      tag = \"tx\";\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n\n      delete this._subs[subId];\n      this.send(\"eth_unsubscribe\", [subId]);\n    });\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Wait until we have connected before trying to disconnect\n      if (this._websocket.readyState === WebSocket.CONNECTING) {\n        yield new Promise(resolve => {\n          this._websocket.onopen = function () {\n            resolve(true);\n          };\n\n          this._websocket.onerror = function () {\n            resolve(false);\n          };\n        });\n      } // Hangup\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n\n\n      this._websocket.close(1000);\n    });\n  }\n\n}","map":{"version":3,"sources":["../src.ts/websocket-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicats\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\nlet NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nexport class WebSocketProvider extends JsonRpcProvider {\n    constructor(url, network) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n        super(url, network);\n        this._pollingInterval = -1;\n        this._wsReady = false;\n        defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        defineReadOnly(this, \"_requests\", {});\n        defineReadOnly(this, \"_subs\", {});\n        defineReadOnly(this, \"_subIds\", {});\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n        // Stall sending requests until the socket is open...\n        this._websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this._websocket.send(this._requests[id].payload);\n            });\n        };\n        this._websocket.onmessage = (messageEvent) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n                }\n                else {\n                    let error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(error, \"code\", result.error.code || null);\n                        defineReadOnly(error, \"response\", data);\n                    }\n                    else {\n                        error = new Error(\"unknown error\");\n                    }\n                    request.callback(error, undefined);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n                }\n            }\n            else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result);\n                }\n            }\n            else {\n                console.warn(\"this should not happen\");\n            }\n        };\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) {\n            fauxPoll.unref();\n        }\n    }\n    detectNetwork() {\n        return this._detectNetwork;\n    }\n    get pollingInterval() {\n        return 0;\n    }\n    resetEventsBlock(blockNumber) {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n    set pollingInterval(value) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return null;\n        });\n    }\n    set polling(value) {\n        if (!value) {\n            return;\n        }\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n    send(method, params) {\n        const rid = NextId++;\n        return new Promise((resolve, reject) => {\n            function callback(error, result) {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(result);\n            }\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n            this._requests[String(rid)] = { callback, payload };\n            if (this._wsReady) {\n                this._websocket.send(payload);\n            }\n        });\n    }\n    static defaultUrl() {\n        return \"ws:/\\/localhost:8546\";\n    }\n    _subscribe(tag, param, processFunc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let subIdPromise = this._subIds[tag];\n            if (subIdPromise == null) {\n                subIdPromise = Promise.all(param).then((param) => {\n                    return this.send(\"eth_subscribe\", param);\n                });\n                this._subIds[tag] = subIdPromise;\n            }\n            const subId = yield subIdPromise;\n            this._subs[subId] = { tag, processFunc };\n        });\n    }\n    _startEvent(event) {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [\"newHeads\"], (result) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n            case \"pending\":\n                this._subscribe(\"pending\", [\"newPendingTransactions\"], (result) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n            case \"filter\":\n                this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], (result) => {\n                    if (result.removed == null) {\n                        result.removed = false;\n                    }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n            case \"tx\": {\n                const emitReceipt = (event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) {\n                            return;\n                        }\n                        this.emit(hash, receipt);\n                    });\n                };\n                // In case it is already mined\n                emitReceipt(event);\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [\"newHeads\"], (result) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n    _stopEvent(event) {\n        let tag = event.tag;\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        }\n        else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n        const subId = this._subIds[tag];\n        if (!subId) {\n            return;\n        }\n        delete this._subIds[tag];\n        subId.then((subId) => {\n            if (!this._subs[subId]) {\n                return;\n            }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [subId]);\n        });\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Wait until we have connected before trying to disconnect\n            if (this._websocket.readyState === WebSocket.CONNECTING) {\n                yield (new Promise((resolve) => {\n                    this._websocket.onopen = function () {\n                        resolve(true);\n                    };\n                    this._websocket.onerror = function () {\n                        resolve(false);\n                    };\n                }));\n            }\n            // Hangup\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n            this._websocket.close(1000);\n        });\n    }\n}\n//# sourceMappingURL=websocket-provider.js.map"]},"metadata":{},"sourceType":"module"}