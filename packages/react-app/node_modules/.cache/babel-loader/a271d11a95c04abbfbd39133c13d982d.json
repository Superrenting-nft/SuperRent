{"ast":null,"code":"const SafeEventEmitter = require('@metamask/safe-event-emitter').default;\n\nclass BaseFilter extends SafeEventEmitter {\n  constructor() {\n    super();\n    this.updates = [];\n  }\n\n  async initialize() {}\n\n  async update() {\n    throw new Error('BaseFilter - no update method specified');\n  }\n\n  addResults(newResults) {\n    this.updates = this.updates.concat(newResults);\n    newResults.forEach(result => this.emit('update', result));\n  }\n\n  addInitialResults(newResults) {}\n\n  getChangesAndClear() {\n    const updates = this.updates;\n    this.updates = [];\n    return updates;\n  }\n\n}\n\nmodule.exports = BaseFilter;","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/eth-json-rpc-filters/base-filter.js"],"names":["SafeEventEmitter","require","default","BaseFilter","constructor","updates","initialize","update","Error","addResults","newResults","concat","forEach","result","emit","addInitialResults","getChangesAndClear","module","exports"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,8BAAD,CAAP,CAAwCC,OAAjE;;AAEA,MAAMC,UAAN,SAAyBH,gBAAzB,CAA0C;AAExCI,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,OAAL,GAAe,EAAf;AACD;;AAEe,QAAVC,UAAU,GAAI,CAAE;;AAEV,QAANC,MAAM,GAAI;AACd,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAEDC,EAAAA,UAAU,CAAEC,UAAF,EAAc;AACtB,SAAKL,OAAL,GAAe,KAAKA,OAAL,CAAaM,MAAb,CAAoBD,UAApB,CAAf;AACAA,IAAAA,UAAU,CAACE,OAAX,CAAmBC,MAAM,IAAI,KAAKC,IAAL,CAAU,QAAV,EAAoBD,MAApB,CAA7B;AACD;;AAEDE,EAAAA,iBAAiB,CAAEL,UAAF,EAAc,CAAE;;AAEjCM,EAAAA,kBAAkB,GAAI;AACpB,UAAMX,OAAO,GAAG,KAAKA,OAArB;AACA,SAAKA,OAAL,GAAe,EAAf;AACA,WAAOA,OAAP;AACD;;AAxBuC;;AA4B1CY,MAAM,CAACC,OAAP,GAAiBf,UAAjB","sourcesContent":["const SafeEventEmitter = require('@metamask/safe-event-emitter').default\n\nclass BaseFilter extends SafeEventEmitter {\n\n  constructor () {\n    super()\n    this.updates = []\n  }\n\n  async initialize () {}\n\n  async update () {\n    throw new Error('BaseFilter - no update method specified')\n  }\n\n  addResults (newResults) {\n    this.updates = this.updates.concat(newResults)\n    newResults.forEach(result => this.emit('update', result))\n  }\n\n  addInitialResults (newResults) {}\n\n  getChangesAndClear () {\n    const updates = this.updates\n    this.updates = []\n    return updates\n  }\n  \n}\n\nmodule.exports = BaseFilter\n"]},"metadata":{},"sourceType":"script"}