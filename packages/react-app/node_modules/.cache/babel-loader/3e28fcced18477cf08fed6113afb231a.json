{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tslib_1 = require(\"tslib\");\n\nconst utils_1 = require(\"@walletconnect/utils\");\n\nconst socket_transport_1 = tslib_1.__importDefault(require(\"@walletconnect/socket-transport\"));\n\nconst errors_1 = require(\"./errors\");\n\nconst events_1 = tslib_1.__importDefault(require(\"./events\"));\n\nconst storage_1 = tslib_1.__importDefault(require(\"./storage\"));\n\nclass Connector {\n  constructor(opts) {\n    this.protocol = \"wc\";\n    this.version = 1;\n    this._bridge = \"\";\n    this._key = null;\n    this._clientId = \"\";\n    this._clientMeta = null;\n    this._peerId = \"\";\n    this._peerMeta = null;\n    this._handshakeId = 0;\n    this._handshakeTopic = \"\";\n    this._connected = false;\n    this._accounts = [];\n    this._chainId = 0;\n    this._networkId = 0;\n    this._rpcUrl = \"\";\n    this._eventManager = new events_1.default();\n    this._clientMeta = utils_1.getClientMeta() || opts.connectorOpts.clientMeta || null;\n    this._cryptoLib = opts.cryptoLib;\n    this._sessionStorage = opts.sessionStorage || new storage_1.default();\n    this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n    this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n\n    if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n      throw new Error(errors_1.ERROR_MISSING_REQUIRED);\n    }\n\n    if (opts.connectorOpts.bridge) {\n      this.bridge = opts.connectorOpts.bridge;\n    }\n\n    if (opts.connectorOpts.uri) {\n      this.uri = opts.connectorOpts.uri;\n    }\n\n    const session = opts.connectorOpts.session || this._getStorageSession();\n\n    if (session) {\n      this.session = session;\n    }\n\n    if (this.handshakeId) {\n      this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n    }\n\n    this._transport = opts.transport || new socket_transport_1.default({\n      protocol: this.protocol,\n      version: this.version,\n      url: this.bridge,\n      subscriptions: [this.clientId]\n    });\n\n    this._subscribeToInternalEvents();\n\n    this._initTransport();\n\n    if (opts.connectorOpts.uri) {\n      this._subscribeToSessionRequest();\n    }\n\n    if (opts.pushServerOpts) {\n      this._registerPushServer(opts.pushServerOpts);\n    }\n  }\n\n  set bridge(value) {\n    if (!value) {\n      return;\n    }\n\n    this._bridge = value;\n  }\n\n  get bridge() {\n    return this._bridge;\n  }\n\n  set key(value) {\n    if (!value) {\n      return;\n    }\n\n    const key = utils_1.convertHexToArrayBuffer(value);\n    this._key = key;\n  }\n\n  get key() {\n    if (this._key) {\n      const key = utils_1.convertArrayBufferToHex(this._key, true);\n      return key;\n    }\n\n    return \"\";\n  }\n\n  set clientId(value) {\n    if (!value) {\n      return;\n    }\n\n    this._clientId = value;\n  }\n\n  get clientId() {\n    let clientId = this._clientId;\n\n    if (!clientId) {\n      clientId = this._clientId = utils_1.uuid();\n    }\n\n    return this._clientId;\n  }\n\n  set peerId(value) {\n    if (!value) {\n      return;\n    }\n\n    this._peerId = value;\n  }\n\n  get peerId() {\n    return this._peerId;\n  }\n\n  set clientMeta(value) {}\n\n  get clientMeta() {\n    let clientMeta = this._clientMeta;\n\n    if (!clientMeta) {\n      clientMeta = this._clientMeta = utils_1.getClientMeta();\n    }\n\n    return clientMeta;\n  }\n\n  set peerMeta(value) {\n    this._peerMeta = value;\n  }\n\n  get peerMeta() {\n    const peerMeta = this._peerMeta;\n    return peerMeta;\n  }\n\n  set handshakeTopic(value) {\n    if (!value) {\n      return;\n    }\n\n    this._handshakeTopic = value;\n  }\n\n  get handshakeTopic() {\n    return this._handshakeTopic;\n  }\n\n  set handshakeId(value) {\n    if (!value) {\n      return;\n    }\n\n    this._handshakeId = value;\n  }\n\n  get handshakeId() {\n    return this._handshakeId;\n  }\n\n  get uri() {\n    const _uri = this._formatUri();\n\n    return _uri;\n  }\n\n  set uri(value) {\n    if (!value) {\n      return;\n    }\n\n    const {\n      handshakeTopic,\n      bridge,\n      key\n    } = this._parseUri(value);\n\n    this.handshakeTopic = handshakeTopic;\n    this.bridge = bridge;\n    this.key = key;\n  }\n\n  set chainId(value) {\n    this._chainId = value;\n  }\n\n  get chainId() {\n    const chainId = this._chainId;\n    return chainId;\n  }\n\n  set networkId(value) {\n    this._networkId = value;\n  }\n\n  get networkId() {\n    const networkId = this._networkId;\n    return networkId;\n  }\n\n  set accounts(value) {\n    this._accounts = value;\n  }\n\n  get accounts() {\n    const accounts = this._accounts;\n    return accounts;\n  }\n\n  set rpcUrl(value) {\n    this._rpcUrl = value;\n  }\n\n  get rpcUrl() {\n    const rpcUrl = this._rpcUrl;\n    return rpcUrl;\n  }\n\n  set connected(value) {}\n\n  get connected() {\n    return this._connected;\n  }\n\n  set pending(value) {}\n\n  get pending() {\n    return !!this._handshakeTopic;\n  }\n\n  get session() {\n    return {\n      connected: this.connected,\n      accounts: this.accounts,\n      chainId: this.chainId,\n      bridge: this.bridge,\n      key: this.key,\n      clientId: this.clientId,\n      clientMeta: this.clientMeta,\n      peerId: this.peerId,\n      peerMeta: this.peerMeta,\n      handshakeId: this.handshakeId,\n      handshakeTopic: this.handshakeTopic\n    };\n  }\n\n  set session(value) {\n    if (!value) {\n      return;\n    }\n\n    this._connected = value.connected;\n    this.accounts = value.accounts;\n    this.chainId = value.chainId;\n    this.bridge = value.bridge;\n    this.key = value.key;\n    this.clientId = value.clientId;\n    this.clientMeta = value.clientMeta;\n    this.peerId = value.peerId;\n    this.peerMeta = value.peerMeta;\n    this.handshakeId = value.handshakeId;\n    this.handshakeTopic = value.handshakeTopic;\n  }\n\n  on(event, callback) {\n    const eventEmitter = {\n      event,\n      callback\n    };\n\n    this._eventManager.subscribe(eventEmitter);\n  }\n\n  createInstantRequest(instantRequest) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      this._key = yield this._generateKey();\n\n      const request = this._formatRequest({\n        method: \"wc_instantRequest\",\n        params: [{\n          peerId: this.clientId,\n          peerMeta: this.clientMeta,\n          request: this._formatRequest(instantRequest)\n        }]\n      });\n\n      this.handshakeId = request.id;\n      this.handshakeTopic = utils_1.uuid();\n\n      this._eventManager.trigger({\n        event: \"display_uri\",\n        params: [this.uri]\n      });\n\n      this.on(\"modal_closed\", () => {\n        throw new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED);\n      });\n\n      const endInstantRequest = () => {\n        this.killSession();\n      };\n\n      try {\n        const result = yield this._sendCallRequest(request);\n\n        if (result) {\n          endInstantRequest();\n        }\n\n        return result;\n      } catch (error) {\n        endInstantRequest();\n        throw error;\n      }\n    });\n  }\n\n  connect(opts) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!this._qrcodeModal) {\n        throw new Error(errors_1.ERROR_QRCODE_MODAL_NOT_PROVIDED);\n      }\n\n      if (this.connected) {\n        return {\n          chainId: this.chainId,\n          accounts: this.accounts\n        };\n      }\n\n      yield this.createSession(opts);\n      return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n        this.on(\"modal_closed\", () => reject(new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED)));\n        this.on(\"connect\", (error, payload) => {\n          if (error) {\n            return reject(error);\n          }\n\n          resolve(payload.params[0]);\n        });\n      }));\n    });\n  }\n\n  createSession(opts) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n      }\n\n      if (this.pending) {\n        return;\n      }\n\n      this._key = yield this._generateKey();\n\n      const request = this._formatRequest({\n        method: \"wc_sessionRequest\",\n        params: [{\n          peerId: this.clientId,\n          peerMeta: this.clientMeta,\n          chainId: opts && opts.chainId ? opts.chainId : null\n        }]\n      });\n\n      this.handshakeId = request.id;\n      this.handshakeTopic = utils_1.uuid();\n\n      this._sendSessionRequest(request, \"Session update rejected\", {\n        topic: this.handshakeTopic\n      });\n\n      this._eventManager.trigger({\n        event: \"display_uri\",\n        params: [this.uri]\n      });\n    });\n  }\n\n  approveSession(sessionStatus) {\n    if (this._connected) {\n      throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n    }\n\n    this.chainId = sessionStatus.chainId;\n    this.accounts = sessionStatus.accounts;\n    this.networkId = sessionStatus.networkId || 0;\n    this.rpcUrl = sessionStatus.rpcUrl || \"\";\n    const sessionParams = {\n      approved: true,\n      chainId: this.chainId,\n      networkId: this.networkId,\n      accounts: this.accounts,\n      rpcUrl: this.rpcUrl,\n      peerId: this.clientId,\n      peerMeta: this.clientMeta\n    };\n    const response = {\n      id: this.handshakeId,\n      jsonrpc: \"2.0\",\n      result: sessionParams\n    };\n\n    this._sendResponse(response);\n\n    this._connected = true;\n\n    this._setStorageSession();\n\n    this._eventManager.trigger({\n      event: \"connect\",\n      params: [{\n        peerId: this.peerId,\n        peerMeta: this.peerMeta,\n        chainId: this.chainId,\n        accounts: this.accounts\n      }]\n    });\n  }\n\n  rejectSession(sessionError) {\n    if (this._connected) {\n      throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n    }\n\n    const message = sessionError && sessionError.message ? sessionError.message : errors_1.ERROR_SESSION_REJECTED;\n\n    const response = this._formatResponse({\n      id: this.handshakeId,\n      error: {\n        message\n      }\n    });\n\n    this._sendResponse(response);\n\n    this._connected = false;\n\n    this._eventManager.trigger({\n      event: \"disconnect\",\n      params: [{\n        message\n      }]\n    });\n\n    this._removeStorageSession();\n  }\n\n  updateSession(sessionStatus) {\n    if (!this._connected) {\n      throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n    }\n\n    this.chainId = sessionStatus.chainId;\n    this.accounts = sessionStatus.accounts;\n    this.networkId = sessionStatus.networkId || 0;\n    this.rpcUrl = sessionStatus.rpcUrl || \"\";\n    const sessionParams = {\n      approved: true,\n      chainId: this.chainId,\n      networkId: this.networkId,\n      accounts: this.accounts,\n      rpcUrl: this.rpcUrl\n    };\n\n    const request = this._formatRequest({\n      method: \"wc_sessionUpdate\",\n      params: [sessionParams]\n    });\n\n    this._sendSessionRequest(request, \"Session update rejected\");\n\n    this._eventManager.trigger({\n      event: \"session_update\",\n      params: [{\n        chainId: this.chainId,\n        accounts: this.accounts\n      }]\n    });\n\n    this._manageStorageSession();\n  }\n\n  killSession(sessionError) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const message = sessionError ? sessionError.message : \"Session Disconnected\";\n      const sessionParams = {\n        approved: false,\n        chainId: null,\n        networkId: null,\n        accounts: null\n      };\n\n      const request = this._formatRequest({\n        method: \"wc_sessionUpdate\",\n        params: [sessionParams]\n      });\n\n      yield this._sendRequest(request);\n\n      this._handleSessionDisconnect(message);\n    });\n  }\n\n  sendTransaction(tx) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n      }\n\n      const parsedTx = utils_1.parseTransactionData(tx);\n\n      const request = this._formatRequest({\n        method: \"eth_sendTransaction\",\n        params: [parsedTx]\n      });\n\n      const result = yield this._sendCallRequest(request);\n      return result;\n    });\n  }\n\n  signTransaction(tx) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n      }\n\n      const parsedTx = utils_1.parseTransactionData(tx);\n\n      const request = this._formatRequest({\n        method: \"eth_signTransaction\",\n        params: [parsedTx]\n      });\n\n      const result = yield this._sendCallRequest(request);\n      return result;\n    });\n  }\n\n  signMessage(params) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n      }\n\n      const request = this._formatRequest({\n        method: \"eth_sign\",\n        params\n      });\n\n      const result = yield this._sendCallRequest(request);\n      return result;\n    });\n  }\n\n  signPersonalMessage(params) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n      }\n\n      params = utils_1.parsePersonalSign(params);\n\n      const request = this._formatRequest({\n        method: \"personal_sign\",\n        params\n      });\n\n      const result = yield this._sendCallRequest(request);\n      return result;\n    });\n  }\n\n  signTypedData(params) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n      }\n\n      const request = this._formatRequest({\n        method: \"eth_signTypedData\",\n        params\n      });\n\n      const result = yield this._sendCallRequest(request);\n      return result;\n    });\n  }\n\n  updateChain(chainParams) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!this._connected) {\n        throw new Error(\"Session currently disconnected\");\n      }\n\n      const request = this._formatRequest({\n        method: \"wallet_updateChain\",\n        params: [chainParams]\n      });\n\n      const result = yield this._sendCallRequest(request);\n      return result;\n    });\n  }\n\n  unsafeSend(request, options) {\n    this._sendRequest(request, options);\n\n    return new Promise((resolve, reject) => {\n      this._subscribeToResponse(request.id, (error, payload) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (!payload) {\n          throw new Error(errors_1.ERROR_MISSING_JSON_RPC);\n        }\n\n        resolve(payload);\n      });\n    });\n  }\n\n  sendCustomRequest(request, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (!this._connected) {\n        throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n      }\n\n      switch (request.method) {\n        case \"eth_accounts\":\n          return this.accounts;\n\n        case \"eth_chainId\":\n          return utils_1.convertNumberToHex(this.chainId);\n\n        case \"eth_sendTransaction\":\n        case \"eth_signTransaction\":\n          if (request.params) {\n            request.params[0] = utils_1.parseTransactionData(request.params[0]);\n          }\n\n          break;\n\n        case \"personal_sign\":\n          if (request.params) {\n            request.params = utils_1.parsePersonalSign(request.params);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      const formattedRequest = this._formatRequest(request);\n\n      const result = yield this._sendCallRequest(formattedRequest, options);\n      return result;\n    });\n  }\n\n  approveRequest(response) {\n    if (utils_1.isJsonRpcResponseSuccess(response)) {\n      const formattedResponse = this._formatResponse(response);\n\n      this._sendResponse(formattedResponse);\n    } else {\n      throw new Error(errors_1.ERROR_MISSING_RESULT);\n    }\n  }\n\n  rejectRequest(response) {\n    if (utils_1.isJsonRpcResponseError(response)) {\n      const formattedResponse = this._formatResponse(response);\n\n      this._sendResponse(formattedResponse);\n    } else {\n      throw new Error(errors_1.ERROR_MISSING_ERROR);\n    }\n  }\n\n  _sendRequest(request, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const callRequest = this._formatRequest(request);\n\n      const encryptionPayload = yield this._encrypt(callRequest);\n      const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== \"undefined\" ? options.topic : this.peerId;\n      const payload = JSON.stringify(encryptionPayload);\n      const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== \"undefined\" ? !options.forcePushNotification : utils_1.isSilentPayload(callRequest);\n\n      this._transport.send(payload, topic, silent);\n    });\n  }\n\n  _sendResponse(response) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const encryptionPayload = yield this._encrypt(response);\n      const topic = this.peerId;\n      const payload = JSON.stringify(encryptionPayload);\n      const silent = true;\n\n      this._transport.send(payload, topic, silent);\n    });\n  }\n\n  _sendSessionRequest(request, errorMsg, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      this._sendRequest(request, options);\n\n      this._subscribeToSessionResponse(request.id, errorMsg);\n    });\n  }\n\n  _sendCallRequest(request, options) {\n    this._sendRequest(request, options);\n\n    this._eventManager.trigger({\n      event: \"call_request_sent\",\n      params: [{\n        request,\n        options\n      }]\n    });\n\n    if (utils_1.isMobile() && utils_1.signingMethods.includes(request.method)) {\n      const mobileLinkUrl = utils_1.getLocal(utils_1.mobileLinkChoiceKey);\n\n      if (mobileLinkUrl) {\n        window.location.href = mobileLinkUrl.href;\n      }\n    }\n\n    return this._subscribeToCallResponse(request.id);\n  }\n\n  _formatRequest(request) {\n    if (typeof request.method === \"undefined\") {\n      throw new Error(errors_1.ERROR_MISSING_METHOD);\n    }\n\n    const formattedRequest = {\n      id: typeof request.id === \"undefined\" ? utils_1.payloadId() : request.id,\n      jsonrpc: \"2.0\",\n      method: request.method,\n      params: typeof request.params === \"undefined\" ? [] : request.params\n    };\n    return formattedRequest;\n  }\n\n  _formatResponse(response) {\n    if (typeof response.id === \"undefined\") {\n      throw new Error(errors_1.ERROR_MISSING_ID);\n    }\n\n    const baseResponse = {\n      id: response.id,\n      jsonrpc: \"2.0\"\n    };\n\n    if (utils_1.isJsonRpcResponseError(response)) {\n      const error = utils_1.formatRpcError(response.error);\n      const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), {\n        error\n      });\n      return errorResponse;\n    } else if (utils_1.isJsonRpcResponseSuccess(response)) {\n      const successResponse = Object.assign(Object.assign({}, baseResponse), response);\n      return successResponse;\n    }\n\n    throw new Error(errors_1.ERROR_INVALID_RESPONSE);\n  }\n\n  _handleSessionDisconnect(errorMsg) {\n    const message = errorMsg || \"Session Disconnected\";\n\n    if (!this._connected) {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.close();\n      }\n\n      utils_1.removeLocal(utils_1.mobileLinkChoiceKey);\n    }\n\n    if (this._connected) {\n      this._connected = false;\n    }\n\n    if (this._handshakeId) {\n      this._handshakeId = 0;\n    }\n\n    if (this._handshakeTopic) {\n      this._handshakeTopic = \"\";\n    }\n\n    this._eventManager.trigger({\n      event: \"disconnect\",\n      params: [{\n        message\n      }]\n    });\n\n    this._removeStorageSession();\n\n    this._transport.close();\n  }\n\n  _handleSessionResponse(errorMsg, sessionParams) {\n    if (sessionParams) {\n      if (sessionParams.approved) {\n        if (!this._connected) {\n          this._connected = true;\n\n          if (sessionParams.chainId) {\n            this.chainId = sessionParams.chainId;\n          }\n\n          if (sessionParams.accounts) {\n            this.accounts = sessionParams.accounts;\n          }\n\n          if (sessionParams.peerId && !this.peerId) {\n            this.peerId = sessionParams.peerId;\n          }\n\n          if (sessionParams.peerMeta && !this.peerMeta) {\n            this.peerMeta = sessionParams.peerMeta;\n          }\n\n          this._eventManager.trigger({\n            event: \"connect\",\n            params: [{\n              peerId: this.peerId,\n              peerMeta: this.peerMeta,\n              chainId: this.chainId,\n              accounts: this.accounts\n            }]\n          });\n        } else {\n          if (sessionParams.chainId) {\n            this.chainId = sessionParams.chainId;\n          }\n\n          if (sessionParams.accounts) {\n            this.accounts = sessionParams.accounts;\n          }\n\n          this._eventManager.trigger({\n            event: \"session_update\",\n            params: [{\n              chainId: this.chainId,\n              accounts: this.accounts\n            }]\n          });\n        }\n\n        this._manageStorageSession();\n      } else {\n        this._handleSessionDisconnect(errorMsg);\n      }\n    } else {\n      this._handleSessionDisconnect(errorMsg);\n    }\n  }\n\n  _handleIncomingMessages(socketMessage) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const activeTopics = [this.clientId, this.handshakeTopic];\n\n      if (!activeTopics.includes(socketMessage.topic)) {\n        return;\n      }\n\n      let encryptionPayload;\n\n      try {\n        encryptionPayload = JSON.parse(socketMessage.payload);\n      } catch (error) {\n        return;\n      }\n\n      const payload = yield this._decrypt(encryptionPayload);\n\n      if (payload) {\n        this._eventManager.trigger(payload);\n      }\n    });\n  }\n\n  _subscribeToSessionRequest() {\n    this._transport.subscribe(this.handshakeTopic);\n  }\n\n  _subscribeToResponse(id, callback) {\n    this.on(`response:${id}`, callback);\n  }\n\n  _subscribeToSessionResponse(id, errorMsg) {\n    this._subscribeToResponse(id, (error, payload) => {\n      if (error) {\n        this._handleSessionResponse(error.message);\n\n        return;\n      }\n\n      if (payload.result) {\n        this._handleSessionResponse(errorMsg, payload.result);\n      } else if (payload.error && payload.error.message) {\n        this._handleSessionResponse(payload.error.message);\n      } else {\n        this._handleSessionResponse(errorMsg);\n      }\n    });\n  }\n\n  _subscribeToCallResponse(id) {\n    return new Promise((resolve, reject) => {\n      this._subscribeToResponse(id, (error, payload) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        if (payload.result) {\n          resolve(payload.result);\n        } else if (payload.error && payload.error.message) {\n          reject(new Error(payload.error.message));\n        } else {\n          reject(new Error(errors_1.ERROR_INVALID_RESPONSE));\n        }\n      });\n    });\n  }\n\n  _subscribeToInternalEvents() {\n    this.on(\"display_uri\", () => {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.open(this.uri, () => {\n          this._eventManager.trigger({\n            event: \"modal_closed\",\n            params: []\n          });\n        }, this._qrcodeModalOptions);\n      }\n    });\n    this.on(\"connect\", () => {\n      if (this._qrcodeModal) {\n        this._qrcodeModal.close();\n      }\n    });\n    this.on(\"wc_sessionRequest\", (error, payload) => {\n      if (error) {\n        this._eventManager.trigger({\n          event: \"error\",\n          params: [{\n            code: \"SESSION_REQUEST_ERROR\",\n            message: error.toString()\n          }]\n        });\n      }\n\n      this.handshakeId = payload.id;\n      this.peerId = payload.params[0].peerId;\n      this.peerMeta = payload.params[0].peerMeta;\n      const internalPayload = Object.assign(Object.assign({}, payload), {\n        method: \"session_request\"\n      });\n\n      this._eventManager.trigger(internalPayload);\n    });\n    this.on(\"wc_sessionUpdate\", (error, payload) => {\n      if (error) {\n        this._handleSessionResponse(error.message);\n      }\n\n      this._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n    });\n  }\n\n  _initTransport() {\n    this._transport.on(\"message\", socketMessage => this._handleIncomingMessages(socketMessage));\n\n    this._transport.on(\"open\", () => this._eventManager.trigger({\n      event: \"transport_open\",\n      params: []\n    }));\n\n    this._transport.on(\"close\", () => this._eventManager.trigger({\n      event: \"transport_close\",\n      params: []\n    }));\n\n    this._transport.on(\"error\", () => this._eventManager.trigger({\n      event: \"transport_error\",\n      params: [\"Websocket connection failed\"]\n    }));\n\n    this._transport.open();\n  }\n\n  _formatUri() {\n    const protocol = this.protocol;\n    const handshakeTopic = this.handshakeTopic;\n    const version = this.version;\n    const bridge = encodeURIComponent(this.bridge);\n    const key = this.key;\n    const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;\n    return uri;\n  }\n\n  _parseUri(uri) {\n    const result = utils_1.parseWalletConnectUri(uri);\n\n    if (result.protocol === this.protocol) {\n      if (!result.handshakeTopic) {\n        throw Error(\"Invalid or missing handshakeTopic parameter value\");\n      }\n\n      const handshakeTopic = result.handshakeTopic;\n\n      if (!result.bridge) {\n        throw Error(\"Invalid or missing bridge url parameter value\");\n      }\n\n      const bridge = decodeURIComponent(result.bridge);\n\n      if (!result.key) {\n        throw Error(\"Invalid or missing key parameter value\");\n      }\n\n      const key = result.key;\n      return {\n        handshakeTopic,\n        bridge,\n        key\n      };\n    } else {\n      throw new Error(errors_1.ERROR_INVALID_URI);\n    }\n  }\n\n  _generateKey() {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (this._cryptoLib) {\n        const result = yield this._cryptoLib.generateKey();\n        return result;\n      }\n\n      return null;\n    });\n  }\n\n  _encrypt(data) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const key = this._key;\n\n      if (this._cryptoLib && key) {\n        const result = yield this._cryptoLib.encrypt(data, key);\n        return result;\n      }\n\n      return null;\n    });\n  }\n\n  _decrypt(payload) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const key = this._key;\n\n      if (this._cryptoLib && key) {\n        const result = yield this._cryptoLib.decrypt(payload, key);\n        return result;\n      }\n\n      return null;\n    });\n  }\n\n  _getStorageSession() {\n    let result = null;\n\n    if (this._sessionStorage) {\n      result = this._sessionStorage.getSession();\n    }\n\n    return result;\n  }\n\n  _setStorageSession() {\n    if (this._sessionStorage) {\n      this._sessionStorage.setSession(this.session);\n    }\n  }\n\n  _removeStorageSession() {\n    if (this._sessionStorage) {\n      this._sessionStorage.removeSession();\n    }\n  }\n\n  _manageStorageSession() {\n    if (this._connected) {\n      this._setStorageSession();\n    } else {\n      this._removeStorageSession();\n    }\n  }\n\n  _registerPushServer(pushServerOpts) {\n    if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n    }\n\n    if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n    }\n\n    if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n      throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n    }\n\n    const pushSubscription = {\n      bridge: this.bridge,\n      topic: this.clientId,\n      type: pushServerOpts.type,\n      token: pushServerOpts.token,\n      peerName: \"\",\n      language: pushServerOpts.language || \"\"\n    };\n    this.on(\"connect\", (error, payload) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n      if (error) {\n        throw error;\n      }\n\n      if (pushServerOpts.peerMeta) {\n        const peerName = payload.params[0].peerMeta.name;\n        pushSubscription.peerName = peerName;\n      }\n\n      try {\n        const response = yield fetch(`${pushServerOpts.url}/new`, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(pushSubscription)\n        });\n        const json = yield response.json();\n\n        if (!json.success) {\n          throw Error(\"Failed to register in Push Server\");\n        }\n      } catch (error) {\n        throw Error(\"Failed to register in Push Server\");\n      }\n    }));\n  }\n\n}\n\nexports.default = Connector;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst utils_1 = require(\"@walletconnect/utils\");\nconst socket_transport_1 = tslib_1.__importDefault(require(\"@walletconnect/socket-transport\"));\nconst errors_1 = require(\"./errors\");\nconst events_1 = tslib_1.__importDefault(require(\"./events\"));\nconst storage_1 = tslib_1.__importDefault(require(\"./storage\"));\nclass Connector {\n    constructor(opts) {\n        this.protocol = \"wc\";\n        this.version = 1;\n        this._bridge = \"\";\n        this._key = null;\n        this._clientId = \"\";\n        this._clientMeta = null;\n        this._peerId = \"\";\n        this._peerMeta = null;\n        this._handshakeId = 0;\n        this._handshakeTopic = \"\";\n        this._connected = false;\n        this._accounts = [];\n        this._chainId = 0;\n        this._networkId = 0;\n        this._rpcUrl = \"\";\n        this._eventManager = new events_1.default();\n        this._clientMeta = utils_1.getClientMeta() || opts.connectorOpts.clientMeta || null;\n        this._cryptoLib = opts.cryptoLib;\n        this._sessionStorage = opts.sessionStorage || new storage_1.default();\n        this._qrcodeModal = opts.connectorOpts.qrcodeModal;\n        this._qrcodeModalOptions = opts.connectorOpts.qrcodeModalOptions;\n        if (!opts.connectorOpts.bridge && !opts.connectorOpts.uri && !opts.connectorOpts.session) {\n            throw new Error(errors_1.ERROR_MISSING_REQUIRED);\n        }\n        if (opts.connectorOpts.bridge) {\n            this.bridge = opts.connectorOpts.bridge;\n        }\n        if (opts.connectorOpts.uri) {\n            this.uri = opts.connectorOpts.uri;\n        }\n        const session = opts.connectorOpts.session || this._getStorageSession();\n        if (session) {\n            this.session = session;\n        }\n        if (this.handshakeId) {\n            this._subscribeToSessionResponse(this.handshakeId, \"Session request rejected\");\n        }\n        this._transport =\n            opts.transport ||\n                new socket_transport_1.default({\n                    protocol: this.protocol,\n                    version: this.version,\n                    url: this.bridge,\n                    subscriptions: [this.clientId],\n                });\n        this._subscribeToInternalEvents();\n        this._initTransport();\n        if (opts.connectorOpts.uri) {\n            this._subscribeToSessionRequest();\n        }\n        if (opts.pushServerOpts) {\n            this._registerPushServer(opts.pushServerOpts);\n        }\n    }\n    set bridge(value) {\n        if (!value) {\n            return;\n        }\n        this._bridge = value;\n    }\n    get bridge() {\n        return this._bridge;\n    }\n    set key(value) {\n        if (!value) {\n            return;\n        }\n        const key = utils_1.convertHexToArrayBuffer(value);\n        this._key = key;\n    }\n    get key() {\n        if (this._key) {\n            const key = utils_1.convertArrayBufferToHex(this._key, true);\n            return key;\n        }\n        return \"\";\n    }\n    set clientId(value) {\n        if (!value) {\n            return;\n        }\n        this._clientId = value;\n    }\n    get clientId() {\n        let clientId = this._clientId;\n        if (!clientId) {\n            clientId = this._clientId = utils_1.uuid();\n        }\n        return this._clientId;\n    }\n    set peerId(value) {\n        if (!value) {\n            return;\n        }\n        this._peerId = value;\n    }\n    get peerId() {\n        return this._peerId;\n    }\n    set clientMeta(value) {\n    }\n    get clientMeta() {\n        let clientMeta = this._clientMeta;\n        if (!clientMeta) {\n            clientMeta = this._clientMeta = utils_1.getClientMeta();\n        }\n        return clientMeta;\n    }\n    set peerMeta(value) {\n        this._peerMeta = value;\n    }\n    get peerMeta() {\n        const peerMeta = this._peerMeta;\n        return peerMeta;\n    }\n    set handshakeTopic(value) {\n        if (!value) {\n            return;\n        }\n        this._handshakeTopic = value;\n    }\n    get handshakeTopic() {\n        return this._handshakeTopic;\n    }\n    set handshakeId(value) {\n        if (!value) {\n            return;\n        }\n        this._handshakeId = value;\n    }\n    get handshakeId() {\n        return this._handshakeId;\n    }\n    get uri() {\n        const _uri = this._formatUri();\n        return _uri;\n    }\n    set uri(value) {\n        if (!value) {\n            return;\n        }\n        const { handshakeTopic, bridge, key } = this._parseUri(value);\n        this.handshakeTopic = handshakeTopic;\n        this.bridge = bridge;\n        this.key = key;\n    }\n    set chainId(value) {\n        this._chainId = value;\n    }\n    get chainId() {\n        const chainId = this._chainId;\n        return chainId;\n    }\n    set networkId(value) {\n        this._networkId = value;\n    }\n    get networkId() {\n        const networkId = this._networkId;\n        return networkId;\n    }\n    set accounts(value) {\n        this._accounts = value;\n    }\n    get accounts() {\n        const accounts = this._accounts;\n        return accounts;\n    }\n    set rpcUrl(value) {\n        this._rpcUrl = value;\n    }\n    get rpcUrl() {\n        const rpcUrl = this._rpcUrl;\n        return rpcUrl;\n    }\n    set connected(value) {\n    }\n    get connected() {\n        return this._connected;\n    }\n    set pending(value) {\n    }\n    get pending() {\n        return !!this._handshakeTopic;\n    }\n    get session() {\n        return {\n            connected: this.connected,\n            accounts: this.accounts,\n            chainId: this.chainId,\n            bridge: this.bridge,\n            key: this.key,\n            clientId: this.clientId,\n            clientMeta: this.clientMeta,\n            peerId: this.peerId,\n            peerMeta: this.peerMeta,\n            handshakeId: this.handshakeId,\n            handshakeTopic: this.handshakeTopic,\n        };\n    }\n    set session(value) {\n        if (!value) {\n            return;\n        }\n        this._connected = value.connected;\n        this.accounts = value.accounts;\n        this.chainId = value.chainId;\n        this.bridge = value.bridge;\n        this.key = value.key;\n        this.clientId = value.clientId;\n        this.clientMeta = value.clientMeta;\n        this.peerId = value.peerId;\n        this.peerMeta = value.peerMeta;\n        this.handshakeId = value.handshakeId;\n        this.handshakeTopic = value.handshakeTopic;\n    }\n    on(event, callback) {\n        const eventEmitter = {\n            event,\n            callback,\n        };\n        this._eventManager.subscribe(eventEmitter);\n    }\n    createInstantRequest(instantRequest) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this._key = yield this._generateKey();\n            const request = this._formatRequest({\n                method: \"wc_instantRequest\",\n                params: [\n                    {\n                        peerId: this.clientId,\n                        peerMeta: this.clientMeta,\n                        request: this._formatRequest(instantRequest),\n                    },\n                ],\n            });\n            this.handshakeId = request.id;\n            this.handshakeTopic = utils_1.uuid();\n            this._eventManager.trigger({\n                event: \"display_uri\",\n                params: [this.uri],\n            });\n            this.on(\"modal_closed\", () => {\n                throw new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED);\n            });\n            const endInstantRequest = () => {\n                this.killSession();\n            };\n            try {\n                const result = yield this._sendCallRequest(request);\n                if (result) {\n                    endInstantRequest();\n                }\n                return result;\n            }\n            catch (error) {\n                endInstantRequest();\n                throw error;\n            }\n        });\n    }\n    connect(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._qrcodeModal) {\n                throw new Error(errors_1.ERROR_QRCODE_MODAL_NOT_PROVIDED);\n            }\n            if (this.connected) {\n                return {\n                    chainId: this.chainId,\n                    accounts: this.accounts,\n                };\n            }\n            yield this.createSession(opts);\n            return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n                this.on(\"modal_closed\", () => reject(new Error(errors_1.ERROR_QRCODE_MODAL_USER_CLOSED)));\n                this.on(\"connect\", (error, payload) => {\n                    if (error) {\n                        return reject(error);\n                    }\n                    resolve(payload.params[0]);\n                });\n            }));\n        });\n    }\n    createSession(opts) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n            }\n            if (this.pending) {\n                return;\n            }\n            this._key = yield this._generateKey();\n            const request = this._formatRequest({\n                method: \"wc_sessionRequest\",\n                params: [\n                    {\n                        peerId: this.clientId,\n                        peerMeta: this.clientMeta,\n                        chainId: opts && opts.chainId ? opts.chainId : null,\n                    },\n                ],\n            });\n            this.handshakeId = request.id;\n            this.handshakeTopic = utils_1.uuid();\n            this._sendSessionRequest(request, \"Session update rejected\", {\n                topic: this.handshakeTopic,\n            });\n            this._eventManager.trigger({\n                event: \"display_uri\",\n                params: [this.uri],\n            });\n        });\n    }\n    approveSession(sessionStatus) {\n        if (this._connected) {\n            throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n        }\n        this.chainId = sessionStatus.chainId;\n        this.accounts = sessionStatus.accounts;\n        this.networkId = sessionStatus.networkId || 0;\n        this.rpcUrl = sessionStatus.rpcUrl || \"\";\n        const sessionParams = {\n            approved: true,\n            chainId: this.chainId,\n            networkId: this.networkId,\n            accounts: this.accounts,\n            rpcUrl: this.rpcUrl,\n            peerId: this.clientId,\n            peerMeta: this.clientMeta,\n        };\n        const response = {\n            id: this.handshakeId,\n            jsonrpc: \"2.0\",\n            result: sessionParams,\n        };\n        this._sendResponse(response);\n        this._connected = true;\n        this._setStorageSession();\n        this._eventManager.trigger({\n            event: \"connect\",\n            params: [\n                {\n                    peerId: this.peerId,\n                    peerMeta: this.peerMeta,\n                    chainId: this.chainId,\n                    accounts: this.accounts,\n                },\n            ],\n        });\n    }\n    rejectSession(sessionError) {\n        if (this._connected) {\n            throw new Error(errors_1.ERROR_SESSION_CONNECTED);\n        }\n        const message = sessionError && sessionError.message ? sessionError.message : errors_1.ERROR_SESSION_REJECTED;\n        const response = this._formatResponse({\n            id: this.handshakeId,\n            error: { message },\n        });\n        this._sendResponse(response);\n        this._connected = false;\n        this._eventManager.trigger({\n            event: \"disconnect\",\n            params: [{ message }],\n        });\n        this._removeStorageSession();\n    }\n    updateSession(sessionStatus) {\n        if (!this._connected) {\n            throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n        }\n        this.chainId = sessionStatus.chainId;\n        this.accounts = sessionStatus.accounts;\n        this.networkId = sessionStatus.networkId || 0;\n        this.rpcUrl = sessionStatus.rpcUrl || \"\";\n        const sessionParams = {\n            approved: true,\n            chainId: this.chainId,\n            networkId: this.networkId,\n            accounts: this.accounts,\n            rpcUrl: this.rpcUrl,\n        };\n        const request = this._formatRequest({\n            method: \"wc_sessionUpdate\",\n            params: [sessionParams],\n        });\n        this._sendSessionRequest(request, \"Session update rejected\");\n        this._eventManager.trigger({\n            event: \"session_update\",\n            params: [\n                {\n                    chainId: this.chainId,\n                    accounts: this.accounts,\n                },\n            ],\n        });\n        this._manageStorageSession();\n    }\n    killSession(sessionError) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const message = sessionError ? sessionError.message : \"Session Disconnected\";\n            const sessionParams = {\n                approved: false,\n                chainId: null,\n                networkId: null,\n                accounts: null,\n            };\n            const request = this._formatRequest({\n                method: \"wc_sessionUpdate\",\n                params: [sessionParams],\n            });\n            yield this._sendRequest(request);\n            this._handleSessionDisconnect(message);\n        });\n    }\n    sendTransaction(tx) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const parsedTx = utils_1.parseTransactionData(tx);\n            const request = this._formatRequest({\n                method: \"eth_sendTransaction\",\n                params: [parsedTx],\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signTransaction(tx) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const parsedTx = utils_1.parseTransactionData(tx);\n            const request = this._formatRequest({\n                method: \"eth_signTransaction\",\n                params: [parsedTx],\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signMessage(params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const request = this._formatRequest({\n                method: \"eth_sign\",\n                params,\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signPersonalMessage(params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            params = utils_1.parsePersonalSign(params);\n            const request = this._formatRequest({\n                method: \"personal_sign\",\n                params,\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    signTypedData(params) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            const request = this._formatRequest({\n                method: \"eth_signTypedData\",\n                params,\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    updateChain(chainParams) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(\"Session currently disconnected\");\n            }\n            const request = this._formatRequest({\n                method: \"wallet_updateChain\",\n                params: [chainParams],\n            });\n            const result = yield this._sendCallRequest(request);\n            return result;\n        });\n    }\n    unsafeSend(request, options) {\n        this._sendRequest(request, options);\n        return new Promise((resolve, reject) => {\n            this._subscribeToResponse(request.id, (error, payload) => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (!payload) {\n                    throw new Error(errors_1.ERROR_MISSING_JSON_RPC);\n                }\n                resolve(payload);\n            });\n        });\n    }\n    sendCustomRequest(request, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this._connected) {\n                throw new Error(errors_1.ERROR_SESSION_DISCONNECTED);\n            }\n            switch (request.method) {\n                case \"eth_accounts\":\n                    return this.accounts;\n                case \"eth_chainId\":\n                    return utils_1.convertNumberToHex(this.chainId);\n                case \"eth_sendTransaction\":\n                case \"eth_signTransaction\":\n                    if (request.params) {\n                        request.params[0] = utils_1.parseTransactionData(request.params[0]);\n                    }\n                    break;\n                case \"personal_sign\":\n                    if (request.params) {\n                        request.params = utils_1.parsePersonalSign(request.params);\n                    }\n                    break;\n                default:\n                    break;\n            }\n            const formattedRequest = this._formatRequest(request);\n            const result = yield this._sendCallRequest(formattedRequest, options);\n            return result;\n        });\n    }\n    approveRequest(response) {\n        if (utils_1.isJsonRpcResponseSuccess(response)) {\n            const formattedResponse = this._formatResponse(response);\n            this._sendResponse(formattedResponse);\n        }\n        else {\n            throw new Error(errors_1.ERROR_MISSING_RESULT);\n        }\n    }\n    rejectRequest(response) {\n        if (utils_1.isJsonRpcResponseError(response)) {\n            const formattedResponse = this._formatResponse(response);\n            this._sendResponse(formattedResponse);\n        }\n        else {\n            throw new Error(errors_1.ERROR_MISSING_ERROR);\n        }\n    }\n    _sendRequest(request, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const callRequest = this._formatRequest(request);\n            const encryptionPayload = yield this._encrypt(callRequest);\n            const topic = typeof (options === null || options === void 0 ? void 0 : options.topic) !== \"undefined\" ? options.topic : this.peerId;\n            const payload = JSON.stringify(encryptionPayload);\n            const silent = typeof (options === null || options === void 0 ? void 0 : options.forcePushNotification) !== \"undefined\"\n                ? !options.forcePushNotification\n                : utils_1.isSilentPayload(callRequest);\n            this._transport.send(payload, topic, silent);\n        });\n    }\n    _sendResponse(response) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const encryptionPayload = yield this._encrypt(response);\n            const topic = this.peerId;\n            const payload = JSON.stringify(encryptionPayload);\n            const silent = true;\n            this._transport.send(payload, topic, silent);\n        });\n    }\n    _sendSessionRequest(request, errorMsg, options) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this._sendRequest(request, options);\n            this._subscribeToSessionResponse(request.id, errorMsg);\n        });\n    }\n    _sendCallRequest(request, options) {\n        this._sendRequest(request, options);\n        this._eventManager.trigger({\n            event: \"call_request_sent\",\n            params: [{ request, options }],\n        });\n        if (utils_1.isMobile() && utils_1.signingMethods.includes(request.method)) {\n            const mobileLinkUrl = utils_1.getLocal(utils_1.mobileLinkChoiceKey);\n            if (mobileLinkUrl) {\n                window.location.href = mobileLinkUrl.href;\n            }\n        }\n        return this._subscribeToCallResponse(request.id);\n    }\n    _formatRequest(request) {\n        if (typeof request.method === \"undefined\") {\n            throw new Error(errors_1.ERROR_MISSING_METHOD);\n        }\n        const formattedRequest = {\n            id: typeof request.id === \"undefined\" ? utils_1.payloadId() : request.id,\n            jsonrpc: \"2.0\",\n            method: request.method,\n            params: typeof request.params === \"undefined\" ? [] : request.params,\n        };\n        return formattedRequest;\n    }\n    _formatResponse(response) {\n        if (typeof response.id === \"undefined\") {\n            throw new Error(errors_1.ERROR_MISSING_ID);\n        }\n        const baseResponse = { id: response.id, jsonrpc: \"2.0\" };\n        if (utils_1.isJsonRpcResponseError(response)) {\n            const error = utils_1.formatRpcError(response.error);\n            const errorResponse = Object.assign(Object.assign(Object.assign({}, baseResponse), response), { error });\n            return errorResponse;\n        }\n        else if (utils_1.isJsonRpcResponseSuccess(response)) {\n            const successResponse = Object.assign(Object.assign({}, baseResponse), response);\n            return successResponse;\n        }\n        throw new Error(errors_1.ERROR_INVALID_RESPONSE);\n    }\n    _handleSessionDisconnect(errorMsg) {\n        const message = errorMsg || \"Session Disconnected\";\n        if (!this._connected) {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.close();\n            }\n            utils_1.removeLocal(utils_1.mobileLinkChoiceKey);\n        }\n        if (this._connected) {\n            this._connected = false;\n        }\n        if (this._handshakeId) {\n            this._handshakeId = 0;\n        }\n        if (this._handshakeTopic) {\n            this._handshakeTopic = \"\";\n        }\n        this._eventManager.trigger({\n            event: \"disconnect\",\n            params: [{ message }],\n        });\n        this._removeStorageSession();\n        this._transport.close();\n    }\n    _handleSessionResponse(errorMsg, sessionParams) {\n        if (sessionParams) {\n            if (sessionParams.approved) {\n                if (!this._connected) {\n                    this._connected = true;\n                    if (sessionParams.chainId) {\n                        this.chainId = sessionParams.chainId;\n                    }\n                    if (sessionParams.accounts) {\n                        this.accounts = sessionParams.accounts;\n                    }\n                    if (sessionParams.peerId && !this.peerId) {\n                        this.peerId = sessionParams.peerId;\n                    }\n                    if (sessionParams.peerMeta && !this.peerMeta) {\n                        this.peerMeta = sessionParams.peerMeta;\n                    }\n                    this._eventManager.trigger({\n                        event: \"connect\",\n                        params: [\n                            {\n                                peerId: this.peerId,\n                                peerMeta: this.peerMeta,\n                                chainId: this.chainId,\n                                accounts: this.accounts,\n                            },\n                        ],\n                    });\n                }\n                else {\n                    if (sessionParams.chainId) {\n                        this.chainId = sessionParams.chainId;\n                    }\n                    if (sessionParams.accounts) {\n                        this.accounts = sessionParams.accounts;\n                    }\n                    this._eventManager.trigger({\n                        event: \"session_update\",\n                        params: [\n                            {\n                                chainId: this.chainId,\n                                accounts: this.accounts,\n                            },\n                        ],\n                    });\n                }\n                this._manageStorageSession();\n            }\n            else {\n                this._handleSessionDisconnect(errorMsg);\n            }\n        }\n        else {\n            this._handleSessionDisconnect(errorMsg);\n        }\n    }\n    _handleIncomingMessages(socketMessage) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const activeTopics = [this.clientId, this.handshakeTopic];\n            if (!activeTopics.includes(socketMessage.topic)) {\n                return;\n            }\n            let encryptionPayload;\n            try {\n                encryptionPayload = JSON.parse(socketMessage.payload);\n            }\n            catch (error) {\n                return;\n            }\n            const payload = yield this._decrypt(encryptionPayload);\n            if (payload) {\n                this._eventManager.trigger(payload);\n            }\n        });\n    }\n    _subscribeToSessionRequest() {\n        this._transport.subscribe(this.handshakeTopic);\n    }\n    _subscribeToResponse(id, callback) {\n        this.on(`response:${id}`, callback);\n    }\n    _subscribeToSessionResponse(id, errorMsg) {\n        this._subscribeToResponse(id, (error, payload) => {\n            if (error) {\n                this._handleSessionResponse(error.message);\n                return;\n            }\n            if (payload.result) {\n                this._handleSessionResponse(errorMsg, payload.result);\n            }\n            else if (payload.error && payload.error.message) {\n                this._handleSessionResponse(payload.error.message);\n            }\n            else {\n                this._handleSessionResponse(errorMsg);\n            }\n        });\n    }\n    _subscribeToCallResponse(id) {\n        return new Promise((resolve, reject) => {\n            this._subscribeToResponse(id, (error, payload) => {\n                if (error) {\n                    reject(error);\n                    return;\n                }\n                if (payload.result) {\n                    resolve(payload.result);\n                }\n                else if (payload.error && payload.error.message) {\n                    reject(new Error(payload.error.message));\n                }\n                else {\n                    reject(new Error(errors_1.ERROR_INVALID_RESPONSE));\n                }\n            });\n        });\n    }\n    _subscribeToInternalEvents() {\n        this.on(\"display_uri\", () => {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.open(this.uri, () => {\n                    this._eventManager.trigger({\n                        event: \"modal_closed\",\n                        params: [],\n                    });\n                }, this._qrcodeModalOptions);\n            }\n        });\n        this.on(\"connect\", () => {\n            if (this._qrcodeModal) {\n                this._qrcodeModal.close();\n            }\n        });\n        this.on(\"wc_sessionRequest\", (error, payload) => {\n            if (error) {\n                this._eventManager.trigger({\n                    event: \"error\",\n                    params: [\n                        {\n                            code: \"SESSION_REQUEST_ERROR\",\n                            message: error.toString(),\n                        },\n                    ],\n                });\n            }\n            this.handshakeId = payload.id;\n            this.peerId = payload.params[0].peerId;\n            this.peerMeta = payload.params[0].peerMeta;\n            const internalPayload = Object.assign(Object.assign({}, payload), { method: \"session_request\" });\n            this._eventManager.trigger(internalPayload);\n        });\n        this.on(\"wc_sessionUpdate\", (error, payload) => {\n            if (error) {\n                this._handleSessionResponse(error.message);\n            }\n            this._handleSessionResponse(\"Session disconnected\", payload.params[0]);\n        });\n    }\n    _initTransport() {\n        this._transport.on(\"message\", (socketMessage) => this._handleIncomingMessages(socketMessage));\n        this._transport.on(\"open\", () => this._eventManager.trigger({ event: \"transport_open\", params: [] }));\n        this._transport.on(\"close\", () => this._eventManager.trigger({ event: \"transport_close\", params: [] }));\n        this._transport.on(\"error\", () => this._eventManager.trigger({\n            event: \"transport_error\",\n            params: [\"Websocket connection failed\"],\n        }));\n        this._transport.open();\n    }\n    _formatUri() {\n        const protocol = this.protocol;\n        const handshakeTopic = this.handshakeTopic;\n        const version = this.version;\n        const bridge = encodeURIComponent(this.bridge);\n        const key = this.key;\n        const uri = `${protocol}:${handshakeTopic}@${version}?bridge=${bridge}&key=${key}`;\n        return uri;\n    }\n    _parseUri(uri) {\n        const result = utils_1.parseWalletConnectUri(uri);\n        if (result.protocol === this.protocol) {\n            if (!result.handshakeTopic) {\n                throw Error(\"Invalid or missing handshakeTopic parameter value\");\n            }\n            const handshakeTopic = result.handshakeTopic;\n            if (!result.bridge) {\n                throw Error(\"Invalid or missing bridge url parameter value\");\n            }\n            const bridge = decodeURIComponent(result.bridge);\n            if (!result.key) {\n                throw Error(\"Invalid or missing key parameter value\");\n            }\n            const key = result.key;\n            return { handshakeTopic, bridge, key };\n        }\n        else {\n            throw new Error(errors_1.ERROR_INVALID_URI);\n        }\n    }\n    _generateKey() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this._cryptoLib) {\n                const result = yield this._cryptoLib.generateKey();\n                return result;\n            }\n            return null;\n        });\n    }\n    _encrypt(data) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const key = this._key;\n            if (this._cryptoLib && key) {\n                const result = yield this._cryptoLib.encrypt(data, key);\n                return result;\n            }\n            return null;\n        });\n    }\n    _decrypt(payload) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const key = this._key;\n            if (this._cryptoLib && key) {\n                const result = yield this._cryptoLib.decrypt(payload, key);\n                return result;\n            }\n            return null;\n        });\n    }\n    _getStorageSession() {\n        let result = null;\n        if (this._sessionStorage) {\n            result = this._sessionStorage.getSession();\n        }\n        return result;\n    }\n    _setStorageSession() {\n        if (this._sessionStorage) {\n            this._sessionStorage.setSession(this.session);\n        }\n    }\n    _removeStorageSession() {\n        if (this._sessionStorage) {\n            this._sessionStorage.removeSession();\n        }\n    }\n    _manageStorageSession() {\n        if (this._connected) {\n            this._setStorageSession();\n        }\n        else {\n            this._removeStorageSession();\n        }\n    }\n    _registerPushServer(pushServerOpts) {\n        if (!pushServerOpts.url || typeof pushServerOpts.url !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.url parameter value\");\n        }\n        if (!pushServerOpts.type || typeof pushServerOpts.type !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.type parameter value\");\n        }\n        if (!pushServerOpts.token || typeof pushServerOpts.token !== \"string\") {\n            throw Error(\"Invalid or missing pushServerOpts.token parameter value\");\n        }\n        const pushSubscription = {\n            bridge: this.bridge,\n            topic: this.clientId,\n            type: pushServerOpts.type,\n            token: pushServerOpts.token,\n            peerName: \"\",\n            language: pushServerOpts.language || \"\",\n        };\n        this.on(\"connect\", (error, payload) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (error) {\n                throw error;\n            }\n            if (pushServerOpts.peerMeta) {\n                const peerName = payload.params[0].peerMeta.name;\n                pushSubscription.peerName = peerName;\n            }\n            try {\n                const response = yield fetch(`${pushServerOpts.url}/new`, {\n                    method: \"POST\",\n                    headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify(pushSubscription),\n                });\n                const json = yield response.json();\n                if (!json.success) {\n                    throw Error(\"Failed to register in Push Server\");\n                }\n            }\n            catch (error) {\n                throw Error(\"Failed to register in Push Server\");\n            }\n        }));\n    }\n}\nexports.default = Connector;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}