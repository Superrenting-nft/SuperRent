{"ast":null,"code":"var _jsxFileName = \"/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/Faucet.jsx\";\nimport React, { useState, useCallback } from \"react\";\nimport { Input, Button, Tooltip } from \"antd\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\nimport { useLookupAddress } from \"eth-hooks\"; // improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet \n    price={price}\n    localProvider={localProvider}  \n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  let blockie;\n\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = /*#__PURE__*/React.createElement(Blockies, {\n      seed: address.toLowerCase(),\n      size: 8,\n      scale: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 15\n      }\n    });\n  } else {\n    blockie = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }\n    });\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n  const updateAddress = useCallback(async newValue => {\n    if (typeof newValue !== \"undefined\") {\n      let address = newValue;\n\n      if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n        try {\n          const possibleAddress = await props.ensProvider.resolveName(address);\n\n          if (possibleAddress) {\n            address = possibleAddress;\n          } // eslint-disable-next-line no-empty\n\n        } catch (e) {}\n      }\n\n      setAddress(address);\n    }\n  }, [props.ensProvider, props.onChange]);\n  const tx = Transactor(props.localProvider);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    size: \"large\",\n    placeholder: props.placeholder ? props.placeholder : \"local faucet\",\n    prefix: blockie //value={address}\n    ,\n    value: ens || address,\n    onChange: e => {\n      //setAddress(e.target.value);\n      updateAddress(e.target.value);\n    },\n    suffix: /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Faucet: Send local ether to an address.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => {\n        tx({\n          to: address,\n          value: parseEther(\"0.01\")\n        });\n        setAddress(\"\");\n      },\n      shape: \"circle\",\n      icon: /*#__PURE__*/React.createElement(SendOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Wallet, {\n      color: \"#888888\",\n      provider: props.localProvider,\n      ensProvider: props.ensProvider,\n      price: props.price,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/components/Faucet.jsx"],"names":["React","useState","useCallback","Input","Button","Tooltip","Blockies","SendOutlined","parseEther","Transactor","Wallet","useLookupAddress","Faucet","props","address","setAddress","blockie","toLowerCase","ens","ensProvider","updateAddress","newValue","indexOf","possibleAddress","resolveName","e","onChange","tx","localProvider","placeholder","target","value","to","price"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { Input, Button, Tooltip } from \"antd\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { parseEther } from \"@ethersproject/units\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\nimport { useLookupAddress } from \"eth-hooks\";\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet \n    price={price}\n    localProvider={localProvider}  \n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        //value={address}\n        value={ens || address}\n        onChange={e => {\n          //setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet color=\"#888888\" provider={props.localProvider} ensProvider={props.ensProvider} price={props.price} />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}