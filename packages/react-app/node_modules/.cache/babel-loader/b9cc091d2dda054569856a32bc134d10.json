{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { isAddress } from \"@ethersproject/address\";\n/*\n  ~ What it does? ~\n\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n\n  ~ How can I use? ~\n\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\n\n  ~ Features ~\n\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n*/\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false); // We can look at the blockchain and see what's stored at `contractAddress`\n  // If we find code then we know that a contract exists there.\n  // If we find nothing (0x0) then there is no contract deployed to that address\n\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n  return contractIsDeployed;\n};\n\nexport default useContractExistsAtAddress;","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/hooks/ContractExistsAtAddress.js"],"names":["useEffect","useState","isAddress","useContractExistsAtAddress","provider","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","bytecode","getCode"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,0BAA0B,GAAG,CAACC,QAAD,EAAWC,eAAX,KAA+B;AAChE,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D,CADgE,CAGhE;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMQ,eAAe,GAAG,YAAY;AAClC,UAAI,CAACN,SAAS,CAACG,eAAD,CAAd,EAAiC,OAAO,KAAP;AACjC,YAAMI,QAAQ,GAAG,MAAML,QAAQ,CAACM,OAAT,CAAiBL,eAAjB,CAAvB;AACAE,MAAAA,qBAAqB,CAACE,QAAQ,KAAK,KAAd,CAArB;AACD,KAJD;;AAKA,QAAIL,QAAJ,EAAcI,eAAe;AAC9B,GARQ,EAQN,CAACJ,QAAD,EAAWC,eAAX,CARM,CAAT;AAUA,SAAOC,kBAAP;AACD,CAjBD;;AAmBA,eAAeH,0BAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { isAddress } from \"@ethersproject/address\";\n\n/*\n  ~ What it does? ~\n\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n\n  ~ How can I use? ~\n\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\n\n  ~ Features ~\n\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n*/\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n\n  // We can look at the blockchain and see what's stored at `contractAddress`\n  // If we find code then we know that a contract exists there.\n  // If we find nothing (0x0) then there is no contract deployed to that address\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n\n  return contractIsDeployed;\n};\n\nexport default useContractExistsAtAddress;\n"]},"metadata":{},"sourceType":"module"}