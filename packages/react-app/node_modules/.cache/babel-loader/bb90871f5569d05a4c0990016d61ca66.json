{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst is_typedarray_1 = __importDefault(require(\"is-typedarray\"));\n\nconst typedarray_to_buffer_1 = __importDefault(require(\"typedarray-to-buffer\"));\n\nconst ENC_HEX = 'hex';\nconst ENC_UTF8 = 'utf8';\nconst ENC_BIN = 'binary';\nconst TYPE_BUFFER = 'buffer';\nconst TYPE_ARRAY = 'array';\nconst TYPE_TYPED_ARRAY = 'typed-array';\nconst TYPE_ARRAY_BUFFER = 'array-buffer';\nconst STRING_ZERO = '0';\n\nfunction bufferToArray(buf) {\n  return new Uint8Array(buf);\n}\n\nexports.bufferToArray = bufferToArray;\n\nfunction bufferToHex(buf, prefixed = false) {\n  const hex = buf.toString(ENC_HEX);\n  return prefixed ? addHexPrefix(hex) : hex;\n}\n\nexports.bufferToHex = bufferToHex;\n\nfunction bufferToUtf8(buf) {\n  return buf.toString(ENC_UTF8);\n}\n\nexports.bufferToUtf8 = bufferToUtf8;\n\nfunction bufferToNumber(buf) {\n  return buf.readUIntBE(0, buf.length);\n}\n\nexports.bufferToNumber = bufferToNumber;\n\nfunction bufferToBinary(buf) {\n  return arrayToBinary(bufferToArray(buf));\n}\n\nexports.bufferToBinary = bufferToBinary;\n\nfunction arrayToBuffer(arr) {\n  return typedarray_to_buffer_1.default(arr);\n}\n\nexports.arrayToBuffer = arrayToBuffer;\n\nfunction arrayToHex(arr, prefixed = false) {\n  return bufferToHex(arrayToBuffer(arr), prefixed);\n}\n\nexports.arrayToHex = arrayToHex;\n\nfunction arrayToUtf8(arr) {\n  return bufferToUtf8(arrayToBuffer(arr));\n}\n\nexports.arrayToUtf8 = arrayToUtf8;\n\nfunction arrayToNumber(arr) {\n  return bufferToNumber(arrayToBuffer(arr));\n}\n\nexports.arrayToNumber = arrayToNumber;\n\nfunction arrayToBinary(arr) {\n  return Array.from(arr).map(numberToBinary).join('');\n}\n\nexports.arrayToBinary = arrayToBinary;\n\nfunction hexToBuffer(hex) {\n  return Buffer.from(removeHexPrefix(hex), ENC_HEX);\n}\n\nexports.hexToBuffer = hexToBuffer;\n\nfunction hexToArray(hex) {\n  return bufferToArray(hexToBuffer(hex));\n}\n\nexports.hexToArray = hexToArray;\n\nfunction hexToUtf8(hex) {\n  return bufferToUtf8(hexToBuffer(hex));\n}\n\nexports.hexToUtf8 = hexToUtf8;\n\nfunction hexToNumber(hex) {\n  return arrayToNumber(hexToArray(hex));\n}\n\nexports.hexToNumber = hexToNumber;\n\nfunction hexToBinary(hex) {\n  return arrayToBinary(hexToArray(hex));\n}\n\nexports.hexToBinary = hexToBinary;\n\nfunction utf8ToBuffer(utf8) {\n  return Buffer.from(utf8, ENC_UTF8);\n}\n\nexports.utf8ToBuffer = utf8ToBuffer;\n\nfunction utf8ToArray(utf8) {\n  return bufferToArray(utf8ToBuffer(utf8));\n}\n\nexports.utf8ToArray = utf8ToArray;\n\nfunction utf8ToHex(utf8, prefixed = false) {\n  return bufferToHex(utf8ToBuffer(utf8), prefixed);\n}\n\nexports.utf8ToHex = utf8ToHex;\n\nfunction utf8ToNumber(utf8) {\n  const num = parseInt(utf8, 10);\n  assert(isDefined(num), 'Number can only safely store up to 53 bits');\n  return num;\n}\n\nexports.utf8ToNumber = utf8ToNumber;\n\nfunction utf8ToBinary(utf8) {\n  return arrayToBinary(utf8ToArray(utf8));\n}\n\nexports.utf8ToBinary = utf8ToBinary;\n\nfunction numberToBuffer(num) {\n  return binaryToBuffer(numberToBinary(num));\n}\n\nexports.numberToBuffer = numberToBuffer;\n\nfunction numberToArray(num) {\n  return binaryToArray(numberToBinary(num));\n}\n\nexports.numberToArray = numberToArray;\n\nfunction numberToHex(num, prefixed) {\n  return binaryToHex(numberToBinary(num), prefixed);\n}\n\nexports.numberToHex = numberToHex;\n\nfunction numberToUtf8(num) {\n  return `${num}`;\n}\n\nexports.numberToUtf8 = numberToUtf8;\n\nfunction numberToBinary(num) {\n  const bin = (num >>> 0).toString(2);\n  return sanitizeBytes(bin);\n}\n\nexports.numberToBinary = numberToBinary;\n\nfunction binaryToBuffer(bin) {\n  return arrayToBuffer(binaryToArray(bin));\n}\n\nexports.binaryToBuffer = binaryToBuffer;\n\nfunction binaryToArray(bin) {\n  return new Uint8Array(splitBytes(bin).map(x => parseInt(x, 2)));\n}\n\nexports.binaryToArray = binaryToArray;\n\nfunction binaryToHex(bin, prefixed) {\n  return arrayToHex(binaryToArray(bin), prefixed);\n}\n\nexports.binaryToHex = binaryToHex;\n\nfunction binaryToUtf8(bin) {\n  return arrayToUtf8(binaryToArray(bin));\n}\n\nexports.binaryToUtf8 = binaryToUtf8;\n\nfunction binaryToNumber(bin) {\n  return arrayToNumber(binaryToArray(bin));\n}\n\nexports.binaryToNumber = binaryToNumber;\n\nfunction isBinaryString(str) {\n  if (typeof str !== 'string' || !new RegExp(/^[01]+$/).test(str)) {\n    return false;\n  }\n\n  if (str.length % 8 !== 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isBinaryString = isBinaryString;\n\nfunction isHexString(str, length) {\n  if (typeof str !== 'string' || !str.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && str.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isHexString = isHexString;\n\nfunction isBuffer(val) {\n  return Buffer.isBuffer(val);\n}\n\nexports.isBuffer = isBuffer;\n\nfunction isTypedArray(val) {\n  return is_typedarray_1.default.strict(val) && !isBuffer(val);\n}\n\nexports.isTypedArray = isTypedArray;\n\nfunction isArrayBuffer(val) {\n  return !isTypedArray(val) && !isBuffer(val) && typeof val.byteLength !== 'undefined';\n}\n\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction getType(val) {\n  if (isBuffer(val)) {\n    return TYPE_BUFFER;\n  } else if (isTypedArray(val)) {\n    return TYPE_TYPED_ARRAY;\n  } else if (isArrayBuffer(val)) {\n    return TYPE_ARRAY_BUFFER;\n  } else if (Array.isArray(val)) {\n    return TYPE_ARRAY;\n  } else {\n    return typeof val;\n  }\n}\n\nexports.getType = getType;\n\nfunction getEncoding(str) {\n  if (isBinaryString(str)) {\n    return ENC_BIN;\n  }\n\n  if (isHexString(str)) {\n    return ENC_HEX;\n  }\n\n  return ENC_UTF8;\n}\n\nexports.getEncoding = getEncoding;\n\nfunction concatBuffers(...args) {\n  const result = Buffer.concat(args);\n  return result;\n}\n\nexports.concatBuffers = concatBuffers;\n\nfunction concatArrays(...args) {\n  let result = [];\n  args.forEach(arg => result = result.concat(Array.from(arg)));\n  return new Uint8Array([...result]);\n}\n\nexports.concatArrays = concatArrays;\n\nfunction trimLeft(data, length) {\n  const diff = data.length - length;\n\n  if (diff > 0) {\n    data = data.slice(diff);\n  }\n\n  return data;\n}\n\nexports.trimLeft = trimLeft;\n\nfunction trimRight(data, length) {\n  return data.slice(0, length);\n}\n\nexports.trimRight = trimRight;\n\nfunction calcByteLength(length, byteSize = 8) {\n  const remainder = length % byteSize;\n  return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;\n}\n\nexports.calcByteLength = calcByteLength;\n\nfunction splitBytes(str, byteSize = 8) {\n  const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, 'gi'));\n  return Array.from(bytes || []);\n}\n\nexports.splitBytes = splitBytes;\n\nfunction swapBytes(str) {\n  return splitBytes(str).map(reverseString).join('');\n}\n\nexports.swapBytes = swapBytes;\n\nfunction swapHex(str) {\n  return binaryToHex(swapBytes(hexToBinary(str)));\n}\n\nexports.swapHex = swapHex;\n\nfunction sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {\n  return padLeft(str, calcByteLength(str.length, byteSize), padding);\n}\n\nexports.sanitizeBytes = sanitizeBytes;\n\nfunction padLeft(str, length, padding = STRING_ZERO) {\n  return padString(str, length, true, padding);\n}\n\nexports.padLeft = padLeft;\n\nfunction padRight(str, length, padding = STRING_ZERO) {\n  return padString(str, length, false, padding);\n}\n\nexports.padRight = padRight;\n\nfunction removeHexPrefix(hex) {\n  return hex.replace(/^0x/, '');\n}\n\nexports.removeHexPrefix = removeHexPrefix;\n\nfunction addHexPrefix(hex) {\n  return hex.startsWith('0x') ? hex : `0x${hex}`;\n}\n\nexports.addHexPrefix = addHexPrefix;\n\nfunction sanitizeHex(hex) {\n  hex = removeHexPrefix(hex);\n  hex = sanitizeBytes(hex, 2);\n\n  if (hex) {\n    hex = addHexPrefix(hex);\n  }\n\n  return hex;\n}\n\nexports.sanitizeHex = sanitizeHex;\n\nfunction removeHexLeadingZeros(hex) {\n  const prefixed = hex.startsWith('0x');\n  hex = removeHexPrefix(hex);\n  hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;\n  return prefixed ? addHexPrefix(hex) : hex;\n}\n\nexports.removeHexLeadingZeros = removeHexLeadingZeros;\n\nfunction isUndefined(value) {\n  return typeof value === 'undefined';\n}\n\nfunction isDefined(value) {\n  return !isUndefined(value);\n}\n\nfunction assert(assertion, errorMessage) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\n\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}\n\nfunction padString(str, length, left, padding = STRING_ZERO) {\n  const diff = length - str.length;\n  let result = str;\n\n  if (diff > 0) {\n    const pad = padding.repeat(diff);\n    result = left ? pad + str : str + pad;\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst is_typedarray_1 = __importDefault(require(\"is-typedarray\"));\nconst typedarray_to_buffer_1 = __importDefault(require(\"typedarray-to-buffer\"));\nconst ENC_HEX = 'hex';\nconst ENC_UTF8 = 'utf8';\nconst ENC_BIN = 'binary';\nconst TYPE_BUFFER = 'buffer';\nconst TYPE_ARRAY = 'array';\nconst TYPE_TYPED_ARRAY = 'typed-array';\nconst TYPE_ARRAY_BUFFER = 'array-buffer';\nconst STRING_ZERO = '0';\nfunction bufferToArray(buf) {\n    return new Uint8Array(buf);\n}\nexports.bufferToArray = bufferToArray;\nfunction bufferToHex(buf, prefixed = false) {\n    const hex = buf.toString(ENC_HEX);\n    return prefixed ? addHexPrefix(hex) : hex;\n}\nexports.bufferToHex = bufferToHex;\nfunction bufferToUtf8(buf) {\n    return buf.toString(ENC_UTF8);\n}\nexports.bufferToUtf8 = bufferToUtf8;\nfunction bufferToNumber(buf) {\n    return buf.readUIntBE(0, buf.length);\n}\nexports.bufferToNumber = bufferToNumber;\nfunction bufferToBinary(buf) {\n    return arrayToBinary(bufferToArray(buf));\n}\nexports.bufferToBinary = bufferToBinary;\nfunction arrayToBuffer(arr) {\n    return typedarray_to_buffer_1.default(arr);\n}\nexports.arrayToBuffer = arrayToBuffer;\nfunction arrayToHex(arr, prefixed = false) {\n    return bufferToHex(arrayToBuffer(arr), prefixed);\n}\nexports.arrayToHex = arrayToHex;\nfunction arrayToUtf8(arr) {\n    return bufferToUtf8(arrayToBuffer(arr));\n}\nexports.arrayToUtf8 = arrayToUtf8;\nfunction arrayToNumber(arr) {\n    return bufferToNumber(arrayToBuffer(arr));\n}\nexports.arrayToNumber = arrayToNumber;\nfunction arrayToBinary(arr) {\n    return Array.from(arr)\n        .map(numberToBinary)\n        .join('');\n}\nexports.arrayToBinary = arrayToBinary;\nfunction hexToBuffer(hex) {\n    return Buffer.from(removeHexPrefix(hex), ENC_HEX);\n}\nexports.hexToBuffer = hexToBuffer;\nfunction hexToArray(hex) {\n    return bufferToArray(hexToBuffer(hex));\n}\nexports.hexToArray = hexToArray;\nfunction hexToUtf8(hex) {\n    return bufferToUtf8(hexToBuffer(hex));\n}\nexports.hexToUtf8 = hexToUtf8;\nfunction hexToNumber(hex) {\n    return arrayToNumber(hexToArray(hex));\n}\nexports.hexToNumber = hexToNumber;\nfunction hexToBinary(hex) {\n    return arrayToBinary(hexToArray(hex));\n}\nexports.hexToBinary = hexToBinary;\nfunction utf8ToBuffer(utf8) {\n    return Buffer.from(utf8, ENC_UTF8);\n}\nexports.utf8ToBuffer = utf8ToBuffer;\nfunction utf8ToArray(utf8) {\n    return bufferToArray(utf8ToBuffer(utf8));\n}\nexports.utf8ToArray = utf8ToArray;\nfunction utf8ToHex(utf8, prefixed = false) {\n    return bufferToHex(utf8ToBuffer(utf8), prefixed);\n}\nexports.utf8ToHex = utf8ToHex;\nfunction utf8ToNumber(utf8) {\n    const num = parseInt(utf8, 10);\n    assert(isDefined(num), 'Number can only safely store up to 53 bits');\n    return num;\n}\nexports.utf8ToNumber = utf8ToNumber;\nfunction utf8ToBinary(utf8) {\n    return arrayToBinary(utf8ToArray(utf8));\n}\nexports.utf8ToBinary = utf8ToBinary;\nfunction numberToBuffer(num) {\n    return binaryToBuffer(numberToBinary(num));\n}\nexports.numberToBuffer = numberToBuffer;\nfunction numberToArray(num) {\n    return binaryToArray(numberToBinary(num));\n}\nexports.numberToArray = numberToArray;\nfunction numberToHex(num, prefixed) {\n    return binaryToHex(numberToBinary(num), prefixed);\n}\nexports.numberToHex = numberToHex;\nfunction numberToUtf8(num) {\n    return `${num}`;\n}\nexports.numberToUtf8 = numberToUtf8;\nfunction numberToBinary(num) {\n    const bin = (num >>> 0).toString(2);\n    return sanitizeBytes(bin);\n}\nexports.numberToBinary = numberToBinary;\nfunction binaryToBuffer(bin) {\n    return arrayToBuffer(binaryToArray(bin));\n}\nexports.binaryToBuffer = binaryToBuffer;\nfunction binaryToArray(bin) {\n    return new Uint8Array(splitBytes(bin).map(x => parseInt(x, 2)));\n}\nexports.binaryToArray = binaryToArray;\nfunction binaryToHex(bin, prefixed) {\n    return arrayToHex(binaryToArray(bin), prefixed);\n}\nexports.binaryToHex = binaryToHex;\nfunction binaryToUtf8(bin) {\n    return arrayToUtf8(binaryToArray(bin));\n}\nexports.binaryToUtf8 = binaryToUtf8;\nfunction binaryToNumber(bin) {\n    return arrayToNumber(binaryToArray(bin));\n}\nexports.binaryToNumber = binaryToNumber;\nfunction isBinaryString(str) {\n    if (typeof str !== 'string' || !new RegExp(/^[01]+$/).test(str)) {\n        return false;\n    }\n    if (str.length % 8 !== 0) {\n        return false;\n    }\n    return true;\n}\nexports.isBinaryString = isBinaryString;\nfunction isHexString(str, length) {\n    if (typeof str !== 'string' || !str.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && str.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nexports.isHexString = isHexString;\nfunction isBuffer(val) {\n    return Buffer.isBuffer(val);\n}\nexports.isBuffer = isBuffer;\nfunction isTypedArray(val) {\n    return is_typedarray_1.default.strict(val) && !isBuffer(val);\n}\nexports.isTypedArray = isTypedArray;\nfunction isArrayBuffer(val) {\n    return (!isTypedArray(val) &&\n        !isBuffer(val) &&\n        typeof val.byteLength !== 'undefined');\n}\nexports.isArrayBuffer = isArrayBuffer;\nfunction getType(val) {\n    if (isBuffer(val)) {\n        return TYPE_BUFFER;\n    }\n    else if (isTypedArray(val)) {\n        return TYPE_TYPED_ARRAY;\n    }\n    else if (isArrayBuffer(val)) {\n        return TYPE_ARRAY_BUFFER;\n    }\n    else if (Array.isArray(val)) {\n        return TYPE_ARRAY;\n    }\n    else {\n        return typeof val;\n    }\n}\nexports.getType = getType;\nfunction getEncoding(str) {\n    if (isBinaryString(str)) {\n        return ENC_BIN;\n    }\n    if (isHexString(str)) {\n        return ENC_HEX;\n    }\n    return ENC_UTF8;\n}\nexports.getEncoding = getEncoding;\nfunction concatBuffers(...args) {\n    const result = Buffer.concat(args);\n    return result;\n}\nexports.concatBuffers = concatBuffers;\nfunction concatArrays(...args) {\n    let result = [];\n    args.forEach(arg => (result = result.concat(Array.from(arg))));\n    return new Uint8Array([...result]);\n}\nexports.concatArrays = concatArrays;\nfunction trimLeft(data, length) {\n    const diff = data.length - length;\n    if (diff > 0) {\n        data = data.slice(diff);\n    }\n    return data;\n}\nexports.trimLeft = trimLeft;\nfunction trimRight(data, length) {\n    return data.slice(0, length);\n}\nexports.trimRight = trimRight;\nfunction calcByteLength(length, byteSize = 8) {\n    const remainder = length % byteSize;\n    return remainder\n        ? ((length - remainder) / byteSize) * byteSize + byteSize\n        : length;\n}\nexports.calcByteLength = calcByteLength;\nfunction splitBytes(str, byteSize = 8) {\n    const bytes = sanitizeBytes(str).match(new RegExp(`.{${byteSize}}`, 'gi'));\n    return Array.from(bytes || []);\n}\nexports.splitBytes = splitBytes;\nfunction swapBytes(str) {\n    return splitBytes(str)\n        .map(reverseString)\n        .join('');\n}\nexports.swapBytes = swapBytes;\nfunction swapHex(str) {\n    return binaryToHex(swapBytes(hexToBinary(str)));\n}\nexports.swapHex = swapHex;\nfunction sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {\n    return padLeft(str, calcByteLength(str.length, byteSize), padding);\n}\nexports.sanitizeBytes = sanitizeBytes;\nfunction padLeft(str, length, padding = STRING_ZERO) {\n    return padString(str, length, true, padding);\n}\nexports.padLeft = padLeft;\nfunction padRight(str, length, padding = STRING_ZERO) {\n    return padString(str, length, false, padding);\n}\nexports.padRight = padRight;\nfunction removeHexPrefix(hex) {\n    return hex.replace(/^0x/, '');\n}\nexports.removeHexPrefix = removeHexPrefix;\nfunction addHexPrefix(hex) {\n    return hex.startsWith('0x') ? hex : `0x${hex}`;\n}\nexports.addHexPrefix = addHexPrefix;\nfunction sanitizeHex(hex) {\n    hex = removeHexPrefix(hex);\n    hex = sanitizeBytes(hex, 2);\n    if (hex) {\n        hex = addHexPrefix(hex);\n    }\n    return hex;\n}\nexports.sanitizeHex = sanitizeHex;\nfunction removeHexLeadingZeros(hex) {\n    const prefixed = hex.startsWith('0x');\n    hex = removeHexPrefix(hex);\n    hex = hex.startsWith(STRING_ZERO) ? hex.substring(1) : hex;\n    return prefixed ? addHexPrefix(hex) : hex;\n}\nexports.removeHexLeadingZeros = removeHexLeadingZeros;\nfunction isUndefined(value) {\n    return typeof value === 'undefined';\n}\nfunction isDefined(value) {\n    return !isUndefined(value);\n}\nfunction assert(assertion, errorMessage) {\n    if (!assertion) {\n        throw new Error(errorMessage);\n    }\n}\nfunction reverseString(str) {\n    return str\n        .split('')\n        .reverse()\n        .join('');\n}\nfunction padString(str, length, left, padding = STRING_ZERO) {\n    const diff = length - str.length;\n    let result = str;\n    if (diff > 0) {\n        const pad = padding.repeat(diff);\n        result = left ? pad + str : str + pad;\n    }\n    return result;\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}