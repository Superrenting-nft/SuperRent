{"ast":null,"code":"var BufferUtil = require('../utils/buffer');\n/**\n * Helper class to handle QR Code symbol modules\n *\n * @param {Number} size Symbol size\n */\n\n\nfunction BitMatrix(size) {\n  if (!size || size < 1) {\n    throw new Error('BitMatrix size must be defined and greater than 0');\n  }\n\n  this.size = size;\n  this.data = BufferUtil.alloc(size * size);\n  this.reservedBit = BufferUtil.alloc(size * size);\n}\n/**\n * Set bit value at specified location\n * If reserved flag is set, this bit will be ignored during masking process\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n * @param {Boolean} reserved\n */\n\n\nBitMatrix.prototype.set = function (row, col, value, reserved) {\n  var index = row * this.size + col;\n  this.data[index] = value;\n  if (reserved) this.reservedBit[index] = true;\n};\n/**\n * Returns bit value at specified location\n *\n * @param  {Number}  row\n * @param  {Number}  col\n * @return {Boolean}\n */\n\n\nBitMatrix.prototype.get = function (row, col) {\n  return this.data[row * this.size + col];\n};\n/**\n * Applies xor operator at specified location\n * (used during masking process)\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n */\n\n\nBitMatrix.prototype.xor = function (row, col, value) {\n  this.data[row * this.size + col] ^= value;\n};\n/**\n * Check if bit at specified location is reserved\n *\n * @param {Number}   row\n * @param {Number}   col\n * @return {Boolean}\n */\n\n\nBitMatrix.prototype.isReserved = function (row, col) {\n  return this.reservedBit[row * this.size + col];\n};\n\nmodule.exports = BitMatrix;","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/node_modules/qrcode/lib/core/bit-matrix.js"],"names":["BufferUtil","require","BitMatrix","size","Error","data","alloc","reservedBit","prototype","set","row","col","value","reserved","index","get","xor","isReserved","module","exports"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,SAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAI,CAACA,IAAD,IAASA,IAAI,GAAG,CAApB,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACD;;AAED,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKE,IAAL,GAAYL,UAAU,CAACM,KAAX,CAAiBH,IAAI,GAAGA,IAAxB,CAAZ;AACA,OAAKI,WAAL,GAAmBP,UAAU,CAACM,KAAX,CAAiBH,IAAI,GAAGA,IAAxB,CAAnB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAD,SAAS,CAACM,SAAV,CAAoBC,GAApB,GAA0B,UAAUC,GAAV,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,QAA3B,EAAqC;AAC7D,MAAIC,KAAK,GAAGJ,GAAG,GAAG,KAAKP,IAAX,GAAkBQ,GAA9B;AACA,OAAKN,IAAL,CAAUS,KAAV,IAAmBF,KAAnB;AACA,MAAIC,QAAJ,EAAc,KAAKN,WAAL,CAAiBO,KAAjB,IAA0B,IAA1B;AACf,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,SAAS,CAACM,SAAV,CAAoBO,GAApB,GAA0B,UAAUL,GAAV,EAAeC,GAAf,EAAoB;AAC5C,SAAO,KAAKN,IAAL,CAAUK,GAAG,GAAG,KAAKP,IAAX,GAAkBQ,GAA5B,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,SAAS,CAACM,SAAV,CAAoBQ,GAApB,GAA0B,UAAUN,GAAV,EAAeC,GAAf,EAAoBC,KAApB,EAA2B;AACnD,OAAKP,IAAL,CAAUK,GAAG,GAAG,KAAKP,IAAX,GAAkBQ,GAA5B,KAAoCC,KAApC;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAV,SAAS,CAACM,SAAV,CAAoBS,UAApB,GAAiC,UAAUP,GAAV,EAAeC,GAAf,EAAoB;AACnD,SAAO,KAAKJ,WAAL,CAAiBG,GAAG,GAAG,KAAKP,IAAX,GAAkBQ,GAAnC,CAAP;AACD,CAFD;;AAIAO,MAAM,CAACC,OAAP,GAAiBjB,SAAjB","sourcesContent":["var BufferUtil = require('../utils/buffer')\n\n/**\n * Helper class to handle QR Code symbol modules\n *\n * @param {Number} size Symbol size\n */\nfunction BitMatrix (size) {\n  if (!size || size < 1) {\n    throw new Error('BitMatrix size must be defined and greater than 0')\n  }\n\n  this.size = size\n  this.data = BufferUtil.alloc(size * size)\n  this.reservedBit = BufferUtil.alloc(size * size)\n}\n\n/**\n * Set bit value at specified location\n * If reserved flag is set, this bit will be ignored during masking process\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n * @param {Boolean} reserved\n */\nBitMatrix.prototype.set = function (row, col, value, reserved) {\n  var index = row * this.size + col\n  this.data[index] = value\n  if (reserved) this.reservedBit[index] = true\n}\n\n/**\n * Returns bit value at specified location\n *\n * @param  {Number}  row\n * @param  {Number}  col\n * @return {Boolean}\n */\nBitMatrix.prototype.get = function (row, col) {\n  return this.data[row * this.size + col]\n}\n\n/**\n * Applies xor operator at specified location\n * (used during masking process)\n *\n * @param {Number}  row\n * @param {Number}  col\n * @param {Boolean} value\n */\nBitMatrix.prototype.xor = function (row, col, value) {\n  this.data[row * this.size + col] ^= value\n}\n\n/**\n * Check if bit at specified location is reserved\n *\n * @param {Number}   row\n * @param {Number}   col\n * @return {Boolean}\n */\nBitMatrix.prototype.isReserved = function (row, col) {\n  return this.reservedBit[row * this.size + col]\n}\n\nmodule.exports = BitMatrix\n"]},"metadata":{},"sourceType":"script"}