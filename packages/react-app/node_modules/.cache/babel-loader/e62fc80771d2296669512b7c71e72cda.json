{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { useLocalStorage } from \".\"; // resolved if(name){} to not save \"\" into cache \n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  try {\n    // Accuracy of reverse resolution is not enforced.\n    // We then manually ensure that the reported ens name resolves to address\n    const reportedName = await provider.lookupAddress(address);\n    const resolvedAddress = await provider.resolveName(reportedName);\n\n    if (getAddress(address) === getAddress(resolvedAddress)) {\n      return reportedName;\n    }\n  } catch (e) {// Do nothing\n  }\n\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  const [ensCache, setEnsCache] = useLocalStorage('ensCache_' + address);\n  useEffect(() => {\n    if (ensCache && ensCache.timestamp > Date.now()) {\n      setEnsName(ensCache.name);\n    } else {\n      if (provider) {\n        lookupAddress(provider, address).then(name => {\n          if (name) {\n            setEnsName(name);\n            setEnsCache({\n              timestamp: Date.now() + 360000,\n              name: name\n            });\n          }\n        });\n      }\n    }\n  }, [ensCache, provider, address, setEnsName, setEnsCache]);\n  return ensName;\n};\n\nexport default useLookupAddress;","map":{"version":3,"sources":["/Users/Antonio/Desktop/SuperRent/packages/react-app/src/hooks/LookupAddress.js"],"names":["useState","useEffect","getAddress","useLocalStorage","lookupAddress","provider","address","reportedName","resolvedAddress","resolveName","e","useLookupAddress","ensName","setEnsName","ensCache","setEnsCache","timestamp","Date","now","name","then"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,eAAT,QAAgC,GAAhC,C,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAG,OAAOC,QAAP,EAAiBC,OAAjB,KAA6B;AACjD,MAAI;AACF;AACA;AACA,UAAMC,YAAY,GAAG,MAAMF,QAAQ,CAACD,aAAT,CAAuBE,OAAvB,CAA3B;AAEA,UAAME,eAAe,GAAG,MAAMH,QAAQ,CAACI,WAAT,CAAqBF,YAArB,CAA9B;;AAEA,QAAIL,UAAU,CAACI,OAAD,CAAV,KAAwBJ,UAAU,CAACM,eAAD,CAAtC,EAAyD;AACvD,aAAOD,YAAP;AACD;AACF,GAVD,CAUE,OAAOG,CAAP,EAAU,CACV;AACD;;AACD,SAAO,CAAP;AACD,CAfD;;AAiBA,MAAMC,gBAAgB,GAAG,CAACN,QAAD,EAAWC,OAAX,KAAuB;AAC9C,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAACM,OAAD,CAAtC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BZ,eAAe,CAAC,cAAYG,OAAb,CAA/C;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,QAAQ,IAAIA,QAAQ,CAACE,SAAT,GAAmBC,IAAI,CAACC,GAAL,EAAnC,EAA8C;AAC5CL,MAAAA,UAAU,CAACC,QAAQ,CAACK,IAAV,CAAV;AACD,KAFD,MAEK;AACH,UAAId,QAAJ,EAAc;AACZD,QAAAA,aAAa,CAACC,QAAD,EAAWC,OAAX,CAAb,CAAiCc,IAAjC,CAAuCD,IAAD,IAAU;AAC9C,cAAIA,IAAJ,EAAU;AACRN,YAAAA,UAAU,CAACM,IAAD,CAAV;AACAJ,YAAAA,WAAW,CAAC;AACVC,cAAAA,SAAS,EAACC,IAAI,CAACC,GAAL,KAAW,MADX;AAEVC,cAAAA,IAAI,EAACA;AAFK,aAAD,CAAX;AAID;AACF,SARD;AASD;AACF;AACF,GAhBQ,EAgBN,CAACL,QAAD,EAAWT,QAAX,EAAqBC,OAArB,EAA8BO,UAA9B,EAA0CE,WAA1C,CAhBM,CAAT;AAkBA,SAAOH,OAAP;AACD,CAvBD;;AAyBA,eAAeD,gBAAf","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { useLocalStorage } from \".\"\n\n// resolved if(name){} to not save \"\" into cache \n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  try {\n    // Accuracy of reverse resolution is not enforced.\n    // We then manually ensure that the reported ens name resolves to address\n    const reportedName = await provider.lookupAddress(address);\n    \n    const resolvedAddress = await provider.resolveName(reportedName);\n\n    if (getAddress(address) === getAddress(resolvedAddress)) {\n      return reportedName;\n    }\n  } catch (e) {\n    // Do nothing\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address);\n\n  useEffect(() => {\n    if( ensCache && ensCache.timestamp>Date.now()){\n      setEnsName(ensCache.name)\n    }else{\n      if (provider) {\n        lookupAddress(provider, address).then((name) => {\n          if (name) {\n            setEnsName(name);\n            setEnsCache({\n              timestamp:Date.now()+360000,\n              name:name\n            })\n          }\n        });\n      }\n    }\n  }, [ensCache, provider, address, setEnsName, setEnsCache]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n"]},"metadata":{},"sourceType":"module"}