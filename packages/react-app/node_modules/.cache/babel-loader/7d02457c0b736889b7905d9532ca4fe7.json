{"ast":null,"code":"\"use strict\";\n\nimport hash from \"hash.js\"; //const _ripemd160 = _hash.ripemd160;\n\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n  return \"0x\" + hash.ripemd160().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha256(data) {\n  return \"0x\" + hash.sha256().update(arrayify(data)).digest(\"hex\");\n}\nexport function sha512(data) {\n  return \"0x\" + hash.sha512().update(arrayify(data)).digest(\"hex\");\n}\nexport function computeHmac(algorithm, key, data) {\n  if (!SupportedAlgorithm[algorithm]) {\n    logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"hmac\",\n      algorithm: algorithm\n    });\n  }\n\n  return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}","map":{"version":3,"sources":["../src.ts/browser-sha2.ts"],"names":[],"mappings":"AAAA;;AAEA,OAAO,IAAP,MAAiB,SAAjB,C,CACA;;AAEA,SAAS,QAAT,QAAoC,sBAApC;AAEA,SAAS,kBAAT,QAAmC,SAAnC;AAEA,SAAS,MAAT,QAAuB,uBAAvB;AACA,SAAS,OAAT,QAAwB,YAAxB;AACA,MAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,OAAX,CAAf;AAEA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAAmC;AACrC,SAAO,OAAQ,IAAI,CAAC,SAAL,GAAiB,MAAjB,CAAwB,QAAQ,CAAC,IAAD,CAAhC,EAAwC,MAAxC,CAA+C,KAA/C,CAAf;AACH;AAED,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAAgC;AAClC,SAAO,OAAQ,IAAI,CAAC,MAAL,GAAc,MAAd,CAAqB,QAAQ,CAAC,IAAD,CAA7B,EAAqC,MAArC,CAA4C,KAA5C,CAAf;AACH;AAED,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAAgC;AAClC,SAAO,OAAQ,IAAI,CAAC,MAAL,GAAc,MAAd,CAAqB,QAAQ,CAAC,IAAD,CAA7B,EAAqC,MAArC,CAA4C,KAA5C,CAAf;AACH;AAED,OAAM,SAAU,WAAV,CAAsB,SAAtB,EAAqD,GAArD,EAAqE,IAArE,EAAoF;AACtF,MAAI,CAAC,kBAAkB,CAAC,SAAD,CAAvB,EAAoC;AAChC,IAAA,MAAM,CAAC,UAAP,CAAkB,2BAA2B,SAA7C,EAAwD,MAAM,CAAC,MAAP,CAAc,qBAAtE,EAA6F;AACzF,MAAA,SAAS,EAAE,MAD8E;AAEzF,MAAA,SAAS,EAAE;AAF8E,KAA7F;AAIH;;AAED,SAAO,OAAO,IAAI,CAAC,IAAL,CAAgB,IAAK,CAAC,SAAD,CAArB,EAAkC,QAAQ,CAAC,GAAD,CAA1C,EAAiD,MAAjD,CAAwD,QAAQ,CAAC,IAAD,CAAhE,EAAwE,MAAxE,CAA+E,KAA/E,CAAd;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map"]},"metadata":{},"sourceType":"module"}