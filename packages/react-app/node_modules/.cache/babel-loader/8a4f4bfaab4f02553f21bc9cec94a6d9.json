{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\"; //////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n\n  return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n\n  return topics.map(topic => {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      const unique = {};\n      topic.forEach(topic => {\n        unique[checkTopic(topic)] = true;\n      }); // The order of OR-topics does not matter\n\n      const sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\n\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n\n  return data.split(/&/g).map(topic => {\n    if (topic === \"\") {\n      return [];\n    }\n\n    const comps = topic.split(\"|\").map(topic => {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\n\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n\n  throw new Error(\"invalid event - \" + eventName);\n} //////////////////////////////\n// Helper Object\n\n\nfunction getTime() {\n  return new Date().getTime();\n}\n\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n} //////////////////////////////\n// Provider Object\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\n\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n  constructor(tag, listener, once) {\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n\n  get event() {\n    switch (this.type) {\n      case \"tx\":\n        return this.hash;\n\n      case \"filter\":\n        return this.filter;\n    }\n\n    return this.tag;\n  }\n\n  get type() {\n    return this.tag.split(\":\")[0];\n  }\n\n  get hash() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"tx\") {\n      return null;\n    }\n\n    return comps[1];\n  }\n\n  get filter() {\n    const comps = this.tag.split(\":\");\n\n    if (comps[0] !== \"filter\") {\n      return null;\n    }\n\n    const address = comps[1];\n    const topics = deserializeTopics(comps[2]);\n    const filter = {};\n\n    if (topics.length > 0) {\n      filter.topics = topics;\n    }\n\n    if (address && address !== \"*\") {\n      filter.address = address;\n    }\n\n    return filter;\n  }\n\n  pollable() {\n    return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n  }\n\n}\n; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n\nconst coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\n\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\n\n\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nexport class Resolver {\n  constructor(provider, address, name) {\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n  }\n\n  _fetchBytes(selector, parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"addr(bytes32,uint256)\")\n      const transaction = {\n        to: this.address,\n        data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n      };\n      const result = yield this.provider.call(transaction);\n\n      if (result === \"0x\") {\n        return null;\n      }\n\n      const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n      const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n      return hexDataSlice(result, offset + 32, offset + 32 + length);\n    });\n  }\n\n  _getAddress(coinType, hexBytes) {\n    const coinInfo = coinInfos[String(coinType)];\n\n    if (coinInfo == null) {\n      logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: `getAddress(${coinType})`\n      });\n    }\n\n    if (coinInfo.ilk === \"eth\") {\n      return this.provider.formatter.address(hexBytes);\n    }\n\n    const bytes = arrayify(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n    if (coinInfo.p2pkh != null) {\n      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n\n      if (p2pkh) {\n        const length = parseInt(p2pkh[1], 16);\n\n        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n        }\n      }\n    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n\n\n    if (coinInfo.p2sh != null) {\n      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n\n      if (p2sh) {\n        const length = parseInt(p2sh[1], 16);\n\n        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n          return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n        }\n      }\n    } // Bech32\n\n\n    if (coinInfo.prefix != null) {\n      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n\n      let version = bytes[0];\n\n      if (version === 0x00) {\n        if (length !== 20 && length !== 32) {\n          version = -1;\n        }\n      } else {\n        version = -1;\n      }\n\n      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n        const words = bech32.toWords(bytes.slice(2));\n        words.unshift(version);\n        return bech32.encode(coinInfo.prefix, words);\n      }\n    }\n\n    return null;\n  }\n\n  getAddress(coinType) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (coinType == null) {\n        coinType = 60;\n      } // If Ethereum, use the standard `addr(bytes32)`\n\n\n      if (coinType === 60) {\n        // keccak256(\"addr(bytes32)\")\n        const transaction = {\n          to: this.address,\n          data: \"0x3b3b57de\" + namehash(this.name).substring(2)\n        };\n        const hexBytes = yield this.provider.call(transaction); // No address\n\n        if (hexBytes === \"0x\" || hexBytes === HashZero) {\n          return null;\n        }\n\n        return this.provider.formatter.callAddress(hexBytes);\n      } // keccak256(\"addr(bytes32,uint256\")\n\n\n      const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType)); // No address\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // Compute the address\n\n\n      const address = this._getAddress(coinType, hexBytes);\n\n      if (address == null) {\n        logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `getAddress(${coinType})`,\n          coinType: coinType,\n          data: hexBytes\n        });\n      }\n\n      return address;\n    });\n  }\n\n  getContentHash() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // keccak256(\"contenthash()\")\n      const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\"); // No contenthash\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      } // IPFS (CID: 1, Type: DAG-PB)\n\n\n      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n\n      if (ipfs) {\n        const length = parseInt(ipfs[3], 16);\n\n        if (ipfs[4].length === length * 2) {\n          return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n        }\n      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n\n\n      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n\n      if (swarm) {\n        if (swarm[1].length === 32 * 2) {\n          return \"bzz:/\\/\" + swarm[1];\n        }\n      }\n\n      return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"getContentHash()\",\n        data: hexBytes\n      });\n    });\n  }\n\n  getText(key) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // The key encoded as parameter to fetchBytes\n      let keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n      // offset 64, with the length at offset 64 and data starting at offset 96\n\n      keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)\n\n      if (keyBytes.length % 32 !== 0) {\n        keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n      }\n\n      const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n\n      if (hexBytes == null || hexBytes === \"0x\") {\n        return null;\n      }\n\n      return toUtf8String(hexBytes);\n    });\n  }\n\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  constructor(network) {\n    logger.checkNew(new.target, Provider);\n    super(); // Events being listened to\n\n    this._events = [];\n    this._emitted = {\n      block: -2\n    };\n    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n\n    defineReadOnly(this, \"anyNetwork\", network === \"any\");\n\n    if (this.anyNetwork) {\n      network = this.detectNetwork();\n    }\n\n    if (network instanceof Promise) {\n      this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n      network.catch(error => {}); // Trigger initial network setting (async)\n\n      this._ready().catch(error => {});\n    } else {\n      const knownNetwork = getStatic(new.target, \"getNetwork\")(network);\n\n      if (knownNetwork) {\n        defineReadOnly(this, \"_network\", knownNetwork);\n        this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n\n    this._maxInternalBlockNumber = -1024;\n    this._lastBlockNumber = -2;\n    this._pollingInterval = 4000;\n    this._fastQueryDate = 0;\n  }\n\n  _ready() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this._network == null) {\n        let network = null;\n\n        if (this._networkPromise) {\n          try {\n            network = yield this._networkPromise;\n          } catch (error) {}\n        } // Try the Provider's network detection (this MUST throw if it cannot)\n\n\n        if (network == null) {\n          network = yield this.detectNetwork();\n        } // This should never happen; every Provider sub-class should have\n        // suggested a network by here (or have thrown).\n\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // Possible this call stacked so do not call defineReadOnly again\n\n\n        if (this._network == null) {\n          if (this.anyNetwork) {\n            this._network = network;\n          } else {\n            defineReadOnly(this, \"_network\", network);\n          }\n\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return this._network;\n    });\n  } // This will always return the most recently established network.\n  // For \"any\", this can change (a \"network\" event is emitted before\n  // any change is refelcted); otherwise this cannot change\n\n\n  get ready() {\n    return poll(() => {\n      return this._ready().then(network => {\n        return network;\n      }, error => {\n        // If the network isn't running yet, we will wait\n        if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n          return undefined;\n        }\n\n        throw error;\n      });\n    });\n  } // @TODO: Remove this and just create a singleton formatter\n\n\n  static getFormatter() {\n    if (defaultFormatter == null) {\n      defaultFormatter = new Formatter();\n    }\n\n    return defaultFormatter;\n  } // @TODO: Remove this and just use getNetwork\n\n\n  static getNetwork(network) {\n    return getNetwork(network == null ? \"homestead\" : network);\n  } // Fetches the blockNumber, but will reuse any result that is less\n  // than maxAge old or has been requested since the last request\n\n\n  _getInternalBlockNumber(maxAge) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._ready(); // Allowing stale data up to maxAge old\n\n      if (maxAge > 0) {\n        // While there are pending internal block requests...\n        while (this._internalBlockNumber) {\n          // ...\"remember\" which fetch we started with\n          const internalBlockNumber = this._internalBlockNumber;\n\n          try {\n            // Check the result is not too stale\n            const result = yield internalBlockNumber;\n\n            if (getTime() - result.respTime <= maxAge) {\n              return result.blockNumber;\n            } // Too old; fetch a new value\n\n\n            break;\n          } catch (error) {\n            // The fetch rejected; if we are the first to get the\n            // rejection, drop through so we replace it with a new\n            // fetch; all others blocked will then get that fetch\n            // which won't match the one they \"remembered\" and loop\n            if (this._internalBlockNumber === internalBlockNumber) {\n              break;\n            }\n          }\n        }\n      }\n\n      const reqTime = getTime();\n      const checkInternalBlockNumber = resolveProperties({\n        blockNumber: this.perform(\"getBlockNumber\", {}),\n        networkError: this.getNetwork().then(network => null, error => error)\n      }).then(({\n        blockNumber,\n        networkError\n      }) => {\n        if (networkError) {\n          // Unremember this bad internal block number\n          if (this._internalBlockNumber === checkInternalBlockNumber) {\n            this._internalBlockNumber = null;\n          }\n\n          throw networkError;\n        }\n\n        const respTime = getTime();\n        blockNumber = BigNumber.from(blockNumber).toNumber();\n\n        if (blockNumber < this._maxInternalBlockNumber) {\n          blockNumber = this._maxInternalBlockNumber;\n        }\n\n        this._maxInternalBlockNumber = blockNumber;\n\n        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n        return {\n          blockNumber,\n          reqTime,\n          respTime\n        };\n      });\n      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where\n\n      checkInternalBlockNumber.catch(error => {\n        // Don't null the dead (rejected) fetch, if it has already been updated\n        if (this._internalBlockNumber === checkInternalBlockNumber) {\n          this._internalBlockNumber = null;\n        }\n      });\n      return (yield checkInternalBlockNumber).blockNumber;\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n\n      const runners = [];\n      let blockNumber = null;\n\n      try {\n        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n      } catch (error) {\n        this.emit(\"error\", error);\n        return;\n      }\n\n      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n      this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n      if (blockNumber === this._lastBlockNumber) {\n        this.emit(\"didPoll\", pollId);\n        return;\n      } // First polling cycle, trigger a \"block\" events\n\n\n      if (this._emitted.block === -2) {\n        this._emitted.block = blockNumber - 1;\n      }\n\n      if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n        logger.warn(\"network block skew detected; skipping block events\");\n        this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n          blockNumber: blockNumber,\n          event: \"blockSkew\",\n          previousBlockNumber: this._emitted.block\n        }));\n        this.emit(\"block\", blockNumber);\n      } else {\n        // Notify all listener for each block that has passed\n        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n          this.emit(\"block\", i);\n        }\n      } // The emitted block was updated, check for obsolete events\n\n\n      if (this._emitted.block !== blockNumber) {\n        this._emitted.block = blockNumber;\n        Object.keys(this._emitted).forEach(key => {\n          // The block event does not expire\n          if (key === \"block\") {\n            return;\n          } // The block we were at when we emitted this event\n\n\n          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n          // They should be garbage collected by the Provider when setting\n          // \"pending\" events\n\n          if (eventBlockNumber === \"pending\") {\n            return;\n          } // Evict any transaction hashes or block hashes over 12 blocks\n          // old, since they should not return null anyways\n\n\n          if (blockNumber - eventBlockNumber > 12) {\n            delete this._emitted[key];\n          }\n        });\n      } // First polling cycle\n\n\n      if (this._lastBlockNumber === -2) {\n        this._lastBlockNumber = blockNumber - 1;\n      } // Find all transaction hashes we are waiting on\n\n\n      this._events.forEach(event => {\n        switch (event.type) {\n          case \"tx\":\n            {\n              const hash = event.hash;\n              let runner = this.getTransactionReceipt(hash).then(receipt => {\n                if (!receipt || receipt.blockNumber == null) {\n                  return null;\n                }\n\n                this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                this.emit(hash, receipt);\n                return null;\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n\n          case \"filter\":\n            {\n              const filter = event.filter;\n              filter.fromBlock = this._lastBlockNumber + 1;\n              filter.toBlock = blockNumber;\n              const runner = this.getLogs(filter).then(logs => {\n                if (logs.length === 0) {\n                  return;\n                }\n\n                logs.forEach(log => {\n                  this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                  this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                  this.emit(filter, log);\n                });\n              }).catch(error => {\n                this.emit(\"error\", error);\n              });\n              runners.push(runner);\n              break;\n            }\n        }\n      });\n\n      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n      Promise.all(runners).then(() => {\n        this.emit(\"didPoll\", pollId);\n      }).catch(error => {\n        this.emit(\"error\", error);\n      });\n      return;\n    });\n  } // Deprecated; do not use this\n\n\n  resetEventsBlock(blockNumber) {\n    this._lastBlockNumber = blockNumber - 1;\n\n    if (this.polling) {\n      this.poll();\n    }\n  }\n\n  get network() {\n    return this._network;\n  } // This method should query the network if the underlying network\n  // can change, such as when connected to a JSON-RPC backend\n\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"provider.detectNetwork\"\n      });\n    });\n  }\n\n  getNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const network = yield this._ready(); // Make sure we are still connected to the same network; this is\n      // only an external call for backends which can have the underlying\n      // network change spontaneously\n\n      const currentNetwork = yield this.detectNetwork();\n\n      if (network.chainId !== currentNetwork.chainId) {\n        // We are allowing network changes, things can get complex fast;\n        // make sure you know what you are doing if you use \"any\"\n        if (this.anyNetwork) {\n          this._network = currentNetwork; // Reset all internal block number guards and caches\n\n          this._lastBlockNumber = -2;\n          this._fastBlockNumber = null;\n          this._fastBlockNumberPromise = null;\n          this._fastQueryDate = 0;\n          this._emitted.block = -2;\n          this._maxInternalBlockNumber = -1024;\n          this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n          // so any events have a chance to unregister, so we stall an\n          // additional event loop before returning from /this/ call\n\n          this.emit(\"network\", currentNetwork, network);\n          yield stall(0);\n          return this._network;\n        }\n\n        const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n          event: \"changed\",\n          network: network,\n          detectedNetwork: currentNetwork\n        });\n        this.emit(\"error\", error);\n        throw error;\n      }\n\n      return network;\n    });\n  }\n\n  get blockNumber() {\n    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {\n      this._setFastBlockNumber(blockNumber);\n    }, error => {});\n\n    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n  }\n\n  get polling() {\n    return this._poller != null;\n  }\n\n  set polling(value) {\n    if (value && !this._poller) {\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this.pollingInterval);\n\n      if (!this._bootstrapPoll) {\n        this._bootstrapPoll = setTimeout(() => {\n          this.poll(); // We block additional polls until the polling interval\n          // is done, to prevent overwhelming the poll function\n\n          this._bootstrapPoll = setTimeout(() => {\n            // If polling was disabled, something may require a poke\n            // since starting the bootstrap poll and it was disabled\n            if (!this._poller) {\n              this.poll();\n            } // Clear out the bootstrap so we can do another\n\n\n            this._bootstrapPoll = null;\n          }, this.pollingInterval);\n        }, 0);\n      }\n    } else if (!value && this._poller) {\n      clearInterval(this._poller);\n      this._poller = null;\n    }\n  }\n\n  get pollingInterval() {\n    return this._pollingInterval;\n  }\n\n  set pollingInterval(value) {\n    if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n      throw new Error(\"invalid polling interval\");\n    }\n\n    this._pollingInterval = value;\n\n    if (this._poller) {\n      clearInterval(this._poller);\n      this._poller = setInterval(() => {\n        this.poll();\n      }, this._pollingInterval);\n    }\n  }\n\n  _getFastBlockNumber() {\n    const now = getTime(); // Stale block number, request a newer value\n\n    if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n      this._fastQueryDate = now;\n      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n        }\n\n        return this._fastBlockNumber;\n      });\n    }\n\n    return this._fastBlockNumberPromise;\n  }\n\n  _setFastBlockNumber(blockNumber) {\n    // Older block, maybe a stale request\n    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n      return;\n    } // Update the time we updated the blocknumber\n\n\n    this._fastQueryDate = getTime(); // Newer block number, use  it\n\n    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n      this._fastBlockNumber = blockNumber;\n      this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n    }\n  }\n\n  waitForTransaction(transactionHash, confirmations, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (confirmations == null) {\n        confirmations = 1;\n      }\n\n      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good\n\n      if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n        return receipt;\n      } // Poll until the receipt is good...\n\n\n      return new Promise((resolve, reject) => {\n        let timer = null;\n        let done = false;\n\n        const handler = receipt => {\n          if (receipt.confirmations < confirmations) {\n            return;\n          }\n\n          if (timer) {\n            clearTimeout(timer);\n          }\n\n          if (done) {\n            return;\n          }\n\n          done = true;\n          this.removeListener(transactionHash, handler);\n          resolve(receipt);\n        };\n\n        this.on(transactionHash, handler);\n\n        if (typeof timeout === \"number\" && timeout > 0) {\n          timer = setTimeout(() => {\n            if (done) {\n              return;\n            }\n\n            timer = null;\n            done = true;\n            this.removeListener(transactionHash, handler);\n            reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n              timeout: timeout\n            }));\n          }, timeout);\n\n          if (timer.unref) {\n            timer.unref();\n          }\n        }\n      });\n    });\n  }\n\n  getBlockNumber() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this._getInternalBlockNumber(0);\n    });\n  }\n\n  getGasPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const result = yield this.perform(\"getGasPrice\", {});\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getGasPrice\",\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getBalance(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getBalance\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getBalance\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getTransactionCount(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getTransactionCount\", params);\n\n      try {\n        return BigNumber.from(result).toNumber();\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getTransactionCount\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getCode(addressOrName, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"getCode\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getCode\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  getStorageAt(addressOrName, position, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        address: this._getAddress(addressOrName),\n        blockTag: this._getBlockTag(blockTag),\n        position: Promise.resolve(position).then(p => hexValue(p))\n      });\n      const result = yield this.perform(\"getStorageAt\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"getStorageAt\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  } // This should be called by any subclass wrapping a TransactionResponse\n\n\n  _wrapTransaction(tx, hash) {\n    if (hash != null && hexDataLength(hash) !== 32) {\n      throw new Error(\"invalid response - sendTransaction\");\n    }\n\n    const result = tx; // Check the hash we expect is the same as the hash the server reported\n\n    if (hash != null && tx.hash !== hash) {\n      logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n        expectedHash: tx.hash,\n        returnedHash: hash\n      });\n    } // @TODO: (confirmations? number, timeout? number)\n\n\n    result.wait = confirmations => __awaiter(this, void 0, void 0, function* () {\n      // We know this transaction *must* exist (whether it gets mined is\n      // another story), so setting an emitted value forces us to\n      // wait even if the node returns null for the receipt\n      if (confirmations !== 0) {\n        this._emitted[\"t:\" + tx.hash] = \"pending\";\n      }\n\n      const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n\n      if (receipt == null && confirmations === 0) {\n        return null;\n      } // No longer pending, allow the polling loop to garbage collect this\n\n\n      this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n      if (receipt.status === 0) {\n        logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n          transactionHash: tx.hash,\n          transaction: tx,\n          receipt: receipt\n        });\n      }\n\n      return receipt;\n    });\n\n    return result;\n  }\n\n  sendTransaction(signedTransaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n      const tx = this.formatter.transaction(signedTransaction);\n\n      try {\n        const hash = yield this.perform(\"sendTransaction\", {\n          signedTransaction: hexTx\n        });\n        return this._wrapTransaction(tx, hash);\n      } catch (error) {\n        error.transaction = tx;\n        error.transactionHash = tx.hash;\n        throw error;\n      }\n    });\n  }\n\n  _getTransactionRequest(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const values = yield transaction;\n      const tx = {};\n      [\"from\", \"to\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);\n      });\n      [\"gasLimit\", \"gasPrice\", \"value\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? BigNumber.from(v) : null);\n      });\n      [\"data\"].forEach(key => {\n        if (values[key] == null) {\n          return;\n        }\n\n        tx[key] = Promise.resolve(values[key]).then(v => v ? hexlify(v) : null);\n      });\n      return this.formatter.transactionRequest(yield resolveProperties(tx));\n    });\n  }\n\n  _getFilter(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      filter = yield filter;\n      const result = {};\n\n      if (filter.address != null) {\n        result.address = this._getAddress(filter.address);\n      }\n\n      [\"blockHash\", \"topics\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = filter[key];\n      });\n      [\"fromBlock\", \"toBlock\"].forEach(key => {\n        if (filter[key] == null) {\n          return;\n        }\n\n        result[key] = this._getBlockTag(filter[key]);\n      });\n      return this.formatter.filter(yield resolveProperties(result));\n    });\n  }\n\n  call(transaction, blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction),\n        blockTag: this._getBlockTag(blockTag)\n      });\n      const result = yield this.perform(\"call\", params);\n\n      try {\n        return hexlify(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"call\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  estimateGas(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        transaction: this._getTransactionRequest(transaction)\n      });\n      const result = yield this.perform(\"estimateGas\", params);\n\n      try {\n        return BigNumber.from(result);\n      } catch (error) {\n        return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n          method: \"estimateGas\",\n          params,\n          result,\n          error\n        });\n      }\n    });\n  }\n\n  _getAddress(addressOrName) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const address = yield this.resolveName(addressOrName);\n\n      if (address == null) {\n        logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: `resolveName(${JSON.stringify(addressOrName)})`\n        });\n      }\n\n      return address;\n    });\n  }\n\n  _getBlock(blockHashOrBlockTag, includeTransactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not \"latest\", etc), this is the block number\n\n      let blockNumber = -128;\n      const params = {\n        includeTransactions: !!includeTransactions\n      };\n\n      if (isHexString(blockHashOrBlockTag, 32)) {\n        params.blockHash = blockHashOrBlockTag;\n      } else {\n        try {\n          params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));\n\n          if (isHexString(params.blockTag)) {\n            blockNumber = parseInt(params.blockTag.substring(2), 16);\n          }\n        } catch (error) {\n          logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n        }\n      }\n\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const block = yield this.perform(\"getBlock\", params); // Block was not found\n\n        if (block == null) {\n          // For blockhashes, if we didn't say it existed, that blockhash may\n          // not exist. If we did see it though, perhaps from a log, we know\n          // it exists, and this node is just not caught up yet.\n          if (params.blockHash != null) {\n            if (this._emitted[\"b:\" + params.blockHash] == null) {\n              return null;\n            }\n          } // For block tags, if we are asking for a future block, we return null\n\n\n          if (params.blockTag != null) {\n            if (blockNumber > this._emitted.block) {\n              return null;\n            }\n          } // Retry on the next block\n\n\n          return undefined;\n        } // Add transactions\n\n\n        if (includeTransactions) {\n          let blockNumber = null;\n\n          for (let i = 0; i < block.transactions.length; i++) {\n            const tx = block.transactions[i];\n\n            if (tx.blockNumber == null) {\n              tx.confirmations = 0;\n            } else if (tx.confirmations == null) {\n              if (blockNumber == null) {\n                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n              } // Add the confirmations using the fast block number (pessimistic)\n\n\n              let confirmations = blockNumber - tx.blockNumber + 1;\n\n              if (confirmations <= 0) {\n                confirmations = 1;\n              }\n\n              tx.confirmations = confirmations;\n            }\n          }\n\n          return this.formatter.blockWithTransactions(block);\n        }\n\n        return this.formatter.block(block);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getBlock(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, false);\n  }\n\n  getBlockWithTransactions(blockHashOrBlockTag) {\n    return this._getBlock(blockHashOrBlockTag, true);\n  }\n\n  getTransaction(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransaction\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        }\n\n        const tx = this.formatter.transactionResponse(result);\n\n        if (tx.blockNumber == null) {\n          tx.confirmations = 0;\n        } else if (tx.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - tx.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          tx.confirmations = confirmations;\n        }\n\n        return this._wrapTransaction(tx);\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getTransactionReceipt(transactionHash) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      transactionHash = yield transactionHash;\n      const params = {\n        transactionHash: this.formatter.hash(transactionHash, true)\n      };\n      return poll(() => __awaiter(this, void 0, void 0, function* () {\n        const result = yield this.perform(\"getTransactionReceipt\", params);\n\n        if (result == null) {\n          if (this._emitted[\"t:\" + transactionHash] == null) {\n            return null;\n          }\n\n          return undefined;\n        } // \"geth-etc\" returns receipts before they are ready\n\n\n        if (result.blockHash == null) {\n          return undefined;\n        }\n\n        const receipt = this.formatter.receipt(result);\n\n        if (receipt.blockNumber == null) {\n          receipt.confirmations = 0;\n        } else if (receipt.confirmations == null) {\n          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)\n\n          let confirmations = blockNumber - receipt.blockNumber + 1;\n\n          if (confirmations <= 0) {\n            confirmations = 1;\n          }\n\n          receipt.confirmations = confirmations;\n        }\n\n        return receipt;\n      }), {\n        oncePoll: this\n      });\n    });\n  }\n\n  getLogs(filter) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      const params = yield resolveProperties({\n        filter: this._getFilter(filter)\n      });\n      const logs = yield this.perform(\"getLogs\", params);\n      logs.forEach(log => {\n        if (log.removed == null) {\n          log.removed = false;\n        }\n      });\n      return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    });\n  }\n\n  getEtherPrice() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getNetwork();\n      return this.perform(\"getEtherPrice\", {});\n    });\n  }\n\n  _getBlockTag(blockTag) {\n    return __awaiter(this, void 0, void 0, function* () {\n      blockTag = yield blockTag;\n\n      if (typeof blockTag === \"number\" && blockTag < 0) {\n        if (blockTag % 1) {\n          logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n        }\n\n        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        blockNumber += blockTag;\n\n        if (blockNumber < 0) {\n          blockNumber = 0;\n        }\n\n        return this.formatter.blockTag(blockNumber);\n      }\n\n      return this.formatter.blockTag(blockTag);\n    });\n  }\n\n  getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const address = yield this._getResolver(name);\n\n      if (address == null) {\n        return null;\n      }\n\n      return new Resolver(this, address, name);\n    });\n  }\n\n  _getResolver(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Get the resolver from the blockchain\n      const network = yield this.getNetwork(); // No ENS...\n\n      if (!network.ensAddress) {\n        logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"ENS\",\n          network: network.name\n        });\n      } // keccak256(\"resolver(bytes32)\")\n\n\n      const transaction = {\n        to: network.ensAddress,\n        data: \"0x0178b8bf\" + namehash(name).substring(2)\n      };\n      return this.formatter.callAddress(yield this.call(transaction));\n    });\n  }\n\n  resolveName(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      name = yield name; // If it is already an address, nothing to resolve\n\n      try {\n        return Promise.resolve(this.formatter.address(name));\n      } catch (error) {\n        // If is is a hexstring, the address is bad (See #694)\n        if (isHexString(name)) {\n          throw error;\n        }\n      }\n\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n      } // Get the addr from the resovler\n\n\n      const resolver = yield this.getResolver(name);\n\n      if (!resolver) {\n        return null;\n      }\n\n      return yield resolver.getAddress();\n    });\n  }\n\n  lookupAddress(address) {\n    return __awaiter(this, void 0, void 0, function* () {\n      address = yield address;\n      address = this.formatter.address(address);\n      const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n      const resolverAddress = yield this._getResolver(reverseName);\n\n      if (!resolverAddress) {\n        return null;\n      } // keccak(\"name(bytes32)\")\n\n\n      let bytes = arrayify(yield this.call({\n        to: resolverAddress,\n        data: \"0x691f3431\" + namehash(reverseName).substring(2)\n      })); // Strip off the dynamic string pointer (0x20)\n\n      if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n        return null;\n      }\n\n      bytes = bytes.slice(32); // Not a length-prefixed string\n\n      if (bytes.length < 32) {\n        return null;\n      } // Get the length of the string (from the length-prefix)\n\n\n      const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n      bytes = bytes.slice(32); // Length longer than available data\n\n      if (length > bytes.length) {\n        return null;\n      }\n\n      const name = toUtf8String(bytes.slice(0, length)); // Make sure the reverse record matches the foward record\n\n      const addr = yield this.resolveName(name);\n\n      if (addr != address) {\n        return null;\n      }\n\n      return name;\n    });\n  }\n\n  perform(method, params) {\n    return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: method\n    });\n  }\n\n  _startEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _stopEvent(event) {\n    this.polling = this._events.filter(e => e.pollable()).length > 0;\n  }\n\n  _addEventListener(eventName, listener, once) {\n    const event = new Event(getEventTag(eventName), listener, once);\n\n    this._events.push(event);\n\n    this._startEvent(event);\n\n    return this;\n  }\n\n  on(eventName, listener) {\n    return this._addEventListener(eventName, listener, false);\n  }\n\n  once(eventName, listener) {\n    return this._addEventListener(eventName, listener, true);\n  }\n\n  emit(eventName, ...args) {\n    let result = false;\n    let stopped = [];\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag) {\n        return true;\n      }\n\n      setTimeout(() => {\n        event.listener.apply(this, args);\n      }, 0);\n      result = true;\n\n      if (event.once) {\n        stopped.push(event);\n        return false;\n      }\n\n      return true;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return result;\n  }\n\n  listenerCount(eventName) {\n    if (!eventName) {\n      return this._events.length;\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => {\n      return event.tag === eventTag;\n    }).length;\n  }\n\n  listeners(eventName) {\n    if (eventName == null) {\n      return this._events.map(event => event.listener);\n    }\n\n    let eventTag = getEventTag(eventName);\n    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);\n  }\n\n  off(eventName, listener) {\n    if (listener == null) {\n      return this.removeAllListeners(eventName);\n    }\n\n    const stopped = [];\n    let found = false;\n    let eventTag = getEventTag(eventName);\n    this._events = this._events.filter(event => {\n      if (event.tag !== eventTag || event.listener != listener) {\n        return true;\n      }\n\n      if (found) {\n        return true;\n      }\n\n      found = true;\n      stopped.push(event);\n      return false;\n    });\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n  removeAllListeners(eventName) {\n    let stopped = [];\n\n    if (eventName == null) {\n      stopped = this._events;\n      this._events = [];\n    } else {\n      const eventTag = getEventTag(eventName);\n      this._events = this._events.filter(event => {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n\n        stopped.push(event);\n        return false;\n      });\n    }\n\n    stopped.forEach(event => {\n      this._stopEvent(event);\n    });\n    return this;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/base-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n    if (topic == null) {\n        return \"null\";\n    }\n    if (hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n    }\n    return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n    }\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            // Only track unique OR-topics\n            const unique = {};\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n            return sorted.join(\"|\");\n        }\n        else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n    if (data === \"\") {\n        return [];\n    }\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") {\n            return [];\n        }\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null : topic);\n        });\n        return ((comps.length === 1) ? comps[0] : comps);\n    });\n}\nfunction getEventTag(eventName) {\n    if (typeof (eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n    }\n    else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n    }\n    else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n    }\n    else if (eventName && typeof (eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n    throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n    return (new Date()).getTime();\n}\nfunction stall(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nconst PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport class Event {\n    constructor(tag, listener, once) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n    get event() {\n        switch (this.type) {\n            case \"tx\":\n                return this.hash;\n            case \"filter\":\n                return this.filter;\n        }\n        return this.tag;\n    }\n    get type() {\n        return this.tag.split(\":\")[0];\n    }\n    get hash() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") {\n            return null;\n        }\n        return comps[1];\n    }\n    get filter() {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") {\n            return null;\n        }\n        const address = comps[1];\n        const topics = deserializeTopics(comps[2]);\n        const filter = {};\n        if (topics.length > 0) {\n            filter.topics = topics;\n        }\n        if (address && address !== \"*\") {\n            filter.address = address;\n        }\n        return filter;\n    }\n    pollable() {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos = {\n    \"0\": { symbol: \"btc\", p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\": { symbol: \"ltc\", p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\": { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\": { symbol: \"eth\", ilk: \"eth\" },\n    \"61\": { symbol: \"etc\", ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\nfunction bytes32ify(value) {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n    return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nexport class Resolver {\n    constructor(provider, address, name) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n    }\n    _fetchBytes(selector, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"addr(bytes32,uint256)\")\n            const transaction = {\n                to: this.address,\n                data: hexConcat([selector, namehash(this.name), (parameters || \"0x\")])\n            };\n            const result = yield this.provider.call(transaction);\n            if (result === \"0x\") {\n                return null;\n            }\n            const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n            const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n            return hexDataSlice(result, offset + 32, offset + 32 + length);\n        });\n    }\n    _getAddress(coinType, hexBytes) {\n        const coinInfo = coinInfos[String(coinType)];\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${coinType})`\n            });\n        }\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n        const bytes = arrayify(hexBytes);\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2pkh], (\"0x\" + p2pkh[2])]));\n                }\n            }\n        }\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([[coinInfo.p2sh], (\"0x\" + p2sh[2])]));\n                }\n            }\n        }\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            }\n            else {\n                version = -1;\n            }\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n        return null;\n    }\n    getAddress(coinType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (coinType == null) {\n                coinType = 60;\n            }\n            // If Ethereum, use the standard `addr(bytes32)`\n            if (coinType === 60) {\n                // keccak256(\"addr(bytes32)\")\n                const transaction = {\n                    to: this.address,\n                    data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                };\n                const hexBytes = yield this.provider.call(transaction);\n                // No address\n                if (hexBytes === \"0x\" || hexBytes === HashZero) {\n                    return null;\n                }\n                return this.provider.formatter.callAddress(hexBytes);\n            }\n            // keccak256(\"addr(bytes32,uint256\")\n            const hexBytes = yield this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            // No address\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // Compute the address\n            const address = this._getAddress(coinType, hexBytes);\n            if (address == null) {\n                logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `getAddress(${coinType})`,\n                    coinType: coinType,\n                    data: hexBytes\n                });\n            }\n            return address;\n        });\n    }\n    getContentHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // keccak256(\"contenthash()\")\n            const hexBytes = yield this._fetchBytes(\"0xbc1c58d1\");\n            // No contenthash\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            // IPFS (CID: 1, Type: DAG-PB)\n            const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n            if (ipfs) {\n                const length = parseInt(ipfs[3], 16);\n                if (ipfs[4].length === length * 2) {\n                    return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n                }\n            }\n            // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n            const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n            if (swarm) {\n                if (swarm[1].length === (32 * 2)) {\n                    return \"bzz:/\\/\" + swarm[1];\n                }\n            }\n            return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n            });\n        });\n    }\n    getText(key) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // The key encoded as parameter to fetchBytes\n            let keyBytes = toUtf8Bytes(key);\n            // The nodehash consumes the first slot, so the string pointer targets\n            // offset 64, with the length at offset 64 and data starting at offset 96\n            keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n            // Pad to word-size (32 bytes)\n            if ((keyBytes.length % 32) !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32))]);\n            }\n            const hexBytes = yield this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            if (hexBytes == null || hexBytes === \"0x\") {\n                return null;\n            }\n            return toUtf8String(hexBytes);\n        });\n    }\n}\nlet defaultFormatter = null;\nlet nextPollId = 1;\nexport class BaseProvider extends Provider {\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n    constructor(network) {\n        logger.checkNew(new.target, Provider);\n        super();\n        // Events being listened to\n        this._events = [];\n        this._emitted = { block: -2 };\n        this.formatter = new.target.getFormatter();\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) {\n            network = this.detectNetwork();\n        }\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n        }\n        else {\n            const knownNetwork = getStatic((new.target), \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n            }\n            else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n        this._maxInternalBlockNumber = -1024;\n        this._lastBlockNumber = -2;\n        this._pollingInterval = 4000;\n        this._fastQueryDate = 0;\n    }\n    _ready() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._network == null) {\n                let network = null;\n                if (this._networkPromise) {\n                    try {\n                        network = yield this._networkPromise;\n                    }\n                    catch (error) { }\n                }\n                // Try the Provider's network detection (this MUST throw if it cannot)\n                if (network == null) {\n                    network = yield this.detectNetwork();\n                }\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // Possible this call stacked so do not call defineReadOnly again\n                if (this._network == null) {\n                    if (this.anyNetwork) {\n                        this._network = network;\n                    }\n                    else {\n                        defineReadOnly(this, \"_network\", network);\n                    }\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return this._network;\n        });\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is refelcted); otherwise this cannot change\n    get ready() {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter() {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network) {\n        return getNetwork((network == null) ? \"homestead\" : network);\n    }\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    _getInternalBlockNumber(maxAge) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._ready();\n            // Allowing stale data up to maxAge old\n            if (maxAge > 0) {\n                // While there are pending internal block requests...\n                while (this._internalBlockNumber) {\n                    // ...\"remember\" which fetch we started with\n                    const internalBlockNumber = this._internalBlockNumber;\n                    try {\n                        // Check the result is not too stale\n                        const result = yield internalBlockNumber;\n                        if ((getTime() - result.respTime) <= maxAge) {\n                            return result.blockNumber;\n                        }\n                        // Too old; fetch a new value\n                        break;\n                    }\n                    catch (error) {\n                        // The fetch rejected; if we are the first to get the\n                        // rejection, drop through so we replace it with a new\n                        // fetch; all others blocked will then get that fetch\n                        // which won't match the one they \"remembered\" and loop\n                        if (this._internalBlockNumber === internalBlockNumber) {\n                            break;\n                        }\n                    }\n                }\n            }\n            const reqTime = getTime();\n            const checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then((network) => (null), (error) => (error))\n            }).then(({ blockNumber, networkError }) => {\n                if (networkError) {\n                    // Unremember this bad internal block number\n                    if (this._internalBlockNumber === checkInternalBlockNumber) {\n                        this._internalBlockNumber = null;\n                    }\n                    throw networkError;\n                }\n                const respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < this._maxInternalBlockNumber) {\n                    blockNumber = this._maxInternalBlockNumber;\n                }\n                this._maxInternalBlockNumber = blockNumber;\n                this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return { blockNumber, reqTime, respTime };\n            });\n            this._internalBlockNumber = checkInternalBlockNumber;\n            // Swallow unhandled exceptions; if needed they are handled else where\n            checkInternalBlockNumber.catch((error) => {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n            });\n            return (yield checkInternalBlockNumber).blockNumber;\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pollId = nextPollId++;\n            // Track all running promises, so we can trigger a post-poll once they are complete\n            const runners = [];\n            let blockNumber = null;\n            try {\n                blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            }\n            catch (error) {\n                this.emit(\"error\", error);\n                return;\n            }\n            this._setFastBlockNumber(blockNumber);\n            // Emit a poll event after we have the latest (fast) block number\n            this.emit(\"poll\", pollId, blockNumber);\n            // If the block has not changed, meh.\n            if (blockNumber === this._lastBlockNumber) {\n                this.emit(\"didPoll\", pollId);\n                return;\n            }\n            // First polling cycle, trigger a \"block\" events\n            if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n            }\n            if (Math.abs((this._emitted.block) - blockNumber) > 1000) {\n                logger.warn(\"network block skew detected; skipping block events\");\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n            }\n            else {\n                // Notify all listener for each block that has passed\n                for (let i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                }\n            }\n            // The emitted block was updated, check for obsolete events\n            if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach((key) => {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                        return;\n                    }\n                    // The block we were at when we emitted this event\n                    const eventBlockNumber = this._emitted[key];\n                    // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n                    if (eventBlockNumber === \"pending\") {\n                        return;\n                    }\n                    // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n                    if (blockNumber - eventBlockNumber > 12) {\n                        delete this._emitted[key];\n                    }\n                });\n            }\n            // First polling cycle\n            if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n            }\n            // Find all transaction hashes we are waiting on\n            this._events.forEach((event) => {\n                switch (event.type) {\n                    case \"tx\": {\n                        const hash = event.hash;\n                        let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                            if (!receipt || receipt.blockNumber == null) {\n                                return null;\n                            }\n                            this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                            this.emit(hash, receipt);\n                            return null;\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                    case \"filter\": {\n                        const filter = event.filter;\n                        filter.fromBlock = this._lastBlockNumber + 1;\n                        filter.toBlock = blockNumber;\n                        const runner = this.getLogs(filter).then((logs) => {\n                            if (logs.length === 0) {\n                                return;\n                            }\n                            logs.forEach((log) => {\n                                this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                                this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                                this.emit(filter, log);\n                            });\n                        }).catch((error) => { this.emit(\"error\", error); });\n                        runners.push(runner);\n                        break;\n                    }\n                }\n            });\n            this._lastBlockNumber = blockNumber;\n            // Once all events for this loop have been processed, emit \"didPoll\"\n            Promise.all(runners).then(() => {\n                this.emit(\"didPoll\", pollId);\n            }).catch((error) => { this.emit(\"error\", error); });\n            return;\n        });\n    }\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) {\n            this.poll();\n        }\n    }\n    get network() {\n        return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n            });\n        });\n    }\n    getNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const network = yield this._ready();\n            // Make sure we are still connected to the same network; this is\n            // only an external call for backends which can have the underlying\n            // network change spontaneously\n            const currentNetwork = yield this.detectNetwork();\n            if (network.chainId !== currentNetwork.chainId) {\n                // We are allowing network changes, things can get complex fast;\n                // make sure you know what you are doing if you use \"any\"\n                if (this.anyNetwork) {\n                    this._network = currentNetwork;\n                    // Reset all internal block number guards and caches\n                    this._lastBlockNumber = -2;\n                    this._fastBlockNumber = null;\n                    this._fastBlockNumberPromise = null;\n                    this._fastQueryDate = 0;\n                    this._emitted.block = -2;\n                    this._maxInternalBlockNumber = -1024;\n                    this._internalBlockNumber = null;\n                    // The \"network\" event MUST happen before this method resolves\n                    // so any events have a chance to unregister, so we stall an\n                    // additional event loop before returning from /this/ call\n                    this.emit(\"network\", currentNetwork, network);\n                    yield stall(0);\n                    return this._network;\n                }\n                const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                    event: \"changed\",\n                    network: network,\n                    detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n            }\n            return network;\n        });\n    }\n    get blockNumber() {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;\n    }\n    get polling() {\n        return (this._poller != null);\n    }\n    set polling(value) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) {\n                            this.poll();\n                        }\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n        }\n        else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n    get pollingInterval() {\n        return this._pollingInterval;\n    }\n    set pollingInterval(value) {\n        if (typeof (value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n        this._pollingInterval = value;\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n    _getFastBlockNumber() {\n        const now = getTime();\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n        return this._fastBlockNumberPromise;\n    }\n    _setFastBlockNumber(blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n            return;\n        }\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n    waitForTransaction(transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (confirmations == null) {\n                confirmations = 1;\n            }\n            const receipt = yield this.getTransactionReceipt(transactionHash);\n            // Receipt is already good\n            if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                return receipt;\n            }\n            // Poll until the receipt is good...\n            return new Promise((resolve, reject) => {\n                let timer = null;\n                let done = false;\n                const handler = (receipt) => {\n                    if (receipt.confirmations < confirmations) {\n                        return;\n                    }\n                    if (timer) {\n                        clearTimeout(timer);\n                    }\n                    if (done) {\n                        return;\n                    }\n                    done = true;\n                    this.removeListener(transactionHash, handler);\n                    resolve(receipt);\n                };\n                this.on(transactionHash, handler);\n                if (typeof (timeout) === \"number\" && timeout > 0) {\n                    timer = setTimeout(() => {\n                        if (done) {\n                            return;\n                        }\n                        timer = null;\n                        done = true;\n                        this.removeListener(transactionHash, handler);\n                        reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                    }, timeout);\n                    if (timer.unref) {\n                        timer.unref();\n                    }\n                }\n            });\n        });\n    }\n    getBlockNumber() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this._getInternalBlockNumber(0);\n        });\n    }\n    getGasPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const result = yield this.perform(\"getGasPrice\", {});\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getGasPrice\",\n                    result, error\n                });\n            }\n        });\n    }\n    getBalance(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getBalance\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getBalance\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getTransactionCount(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getTransactionCount\", params);\n            try {\n                return BigNumber.from(result).toNumber();\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getTransactionCount\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getCode(addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"getCode\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getCode\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    getStorageAt(addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then((p) => hexValue(p))\n            });\n            const result = yield this.perform(\"getStorageAt\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"getStorageAt\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx, hash) {\n        if (hash != null && hexDataLength(hash) !== 32) {\n            throw new Error(\"invalid response - sendTransaction\");\n        }\n        const result = tx;\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n        // @TODO: (confirmations? number, timeout? number)\n        result.wait = (confirmations) => __awaiter(this, void 0, void 0, function* () {\n            // We know this transaction *must* exist (whether it gets mined is\n            // another story), so setting an emitted value forces us to\n            // wait even if the node returns null for the receipt\n            if (confirmations !== 0) {\n                this._emitted[\"t:\" + tx.hash] = \"pending\";\n            }\n            const receipt = yield this.waitForTransaction(tx.hash, confirmations);\n            if (receipt == null && confirmations === 0) {\n                return null;\n            }\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        });\n        return result;\n    }\n    sendTransaction(signedTransaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));\n            const tx = this.formatter.transaction(signedTransaction);\n            try {\n                const hash = yield this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n                return this._wrapTransaction(tx, hash);\n            }\n            catch (error) {\n                error.transaction = tx;\n                error.transactionHash = tx.hash;\n                throw error;\n            }\n        });\n    }\n    _getTransactionRequest(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const values = yield transaction;\n            const tx = {};\n            [\"from\", \"to\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));\n            });\n            [\"gasLimit\", \"gasPrice\", \"value\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));\n            });\n            [\"data\"].forEach((key) => {\n                if (values[key] == null) {\n                    return;\n                }\n                tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));\n            });\n            return this.formatter.transactionRequest(yield resolveProperties(tx));\n        });\n    }\n    _getFilter(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            filter = yield filter;\n            const result = {};\n            if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n            }\n            [\"blockHash\", \"topics\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = filter[key];\n            });\n            [\"fromBlock\", \"toBlock\"].forEach((key) => {\n                if (filter[key] == null) {\n                    return;\n                }\n                result[key] = this._getBlockTag(filter[key]);\n            });\n            return this.formatter.filter(yield resolveProperties(result));\n        });\n    }\n    call(transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag)\n            });\n            const result = yield this.perform(\"call\", params);\n            try {\n                return hexlify(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"call\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    estimateGas(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n            });\n            const result = yield this.perform(\"estimateGas\", params);\n            try {\n                return BigNumber.from(result);\n            }\n            catch (error) {\n                return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                    method: \"estimateGas\",\n                    params, result, error\n                });\n            }\n        });\n    }\n    _getAddress(addressOrName) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.resolveName(addressOrName);\n            if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: `resolveName(${JSON.stringify(addressOrName)})`\n                });\n            }\n            return address;\n        });\n    }\n    _getBlock(blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            blockHashOrBlockTag = yield blockHashOrBlockTag;\n            // If blockTag is a number (not \"latest\", etc), this is the block number\n            let blockNumber = -128;\n            const params = {\n                includeTransactions: !!includeTransactions\n            };\n            if (isHexString(blockHashOrBlockTag, 32)) {\n                params.blockHash = blockHashOrBlockTag;\n            }\n            else {\n                try {\n                    params.blockTag = this.formatter.blockTag(yield this._getBlockTag(blockHashOrBlockTag));\n                    if (isHexString(params.blockTag)) {\n                        blockNumber = parseInt(params.blockTag.substring(2), 16);\n                    }\n                }\n                catch (error) {\n                    logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                }\n            }\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const block = yield this.perform(\"getBlock\", params);\n                // Block was not found\n                if (block == null) {\n                    // For blockhashes, if we didn't say it existed, that blockhash may\n                    // not exist. If we did see it though, perhaps from a log, we know\n                    // it exists, and this node is just not caught up yet.\n                    if (params.blockHash != null) {\n                        if (this._emitted[\"b:\" + params.blockHash] == null) {\n                            return null;\n                        }\n                    }\n                    // For block tags, if we are asking for a future block, we return null\n                    if (params.blockTag != null) {\n                        if (blockNumber > this._emitted.block) {\n                            return null;\n                        }\n                    }\n                    // Retry on the next block\n                    return undefined;\n                }\n                // Add transactions\n                if (includeTransactions) {\n                    let blockNumber = null;\n                    for (let i = 0; i < block.transactions.length; i++) {\n                        const tx = block.transactions[i];\n                        if (tx.blockNumber == null) {\n                            tx.confirmations = 0;\n                        }\n                        else if (tx.confirmations == null) {\n                            if (blockNumber == null) {\n                                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                            }\n                            // Add the confirmations using the fast block number (pessimistic)\n                            let confirmations = (blockNumber - tx.blockNumber) + 1;\n                            if (confirmations <= 0) {\n                                confirmations = 1;\n                            }\n                            tx.confirmations = confirmations;\n                        }\n                    }\n                    return this.formatter.blockWithTransactions(block);\n                }\n                return this.formatter.block(block);\n            }), { oncePoll: this });\n        });\n    }\n    getBlock(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, false));\n    }\n    getBlockWithTransactions(blockHashOrBlockTag) {\n        return (this._getBlock(blockHashOrBlockTag, true));\n    }\n    getTransaction(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransaction\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                const tx = this.formatter.transactionResponse(result);\n                if (tx.blockNumber == null) {\n                    tx.confirmations = 0;\n                }\n                else if (tx.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - tx.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    tx.confirmations = confirmations;\n                }\n                return this._wrapTransaction(tx);\n            }), { oncePoll: this });\n        });\n    }\n    getTransactionReceipt(transactionHash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            transactionHash = yield transactionHash;\n            const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n            return poll(() => __awaiter(this, void 0, void 0, function* () {\n                const result = yield this.perform(\"getTransactionReceipt\", params);\n                if (result == null) {\n                    if (this._emitted[\"t:\" + transactionHash] == null) {\n                        return null;\n                    }\n                    return undefined;\n                }\n                // \"geth-etc\" returns receipts before they are ready\n                if (result.blockHash == null) {\n                    return undefined;\n                }\n                const receipt = this.formatter.receipt(result);\n                if (receipt.blockNumber == null) {\n                    receipt.confirmations = 0;\n                }\n                else if (receipt.confirmations == null) {\n                    const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                    // Add the confirmations using the fast block number (pessimistic)\n                    let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                    if (confirmations <= 0) {\n                        confirmations = 1;\n                    }\n                    receipt.confirmations = confirmations;\n                }\n                return receipt;\n            }), { oncePoll: this });\n        });\n    }\n    getLogs(filter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            const params = yield resolveProperties({ filter: this._getFilter(filter) });\n            const logs = yield this.perform(\"getLogs\", params);\n            logs.forEach((log) => {\n                if (log.removed == null) {\n                    log.removed = false;\n                }\n            });\n            return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n        });\n    }\n    getEtherPrice() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getNetwork();\n            return this.perform(\"getEtherPrice\", {});\n        });\n    }\n    _getBlockTag(blockTag) {\n        return __awaiter(this, void 0, void 0, function* () {\n            blockTag = yield blockTag;\n            if (typeof (blockTag) === \"number\" && blockTag < 0) {\n                if (blockTag % 1) {\n                    logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n                let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                blockNumber += blockTag;\n                if (blockNumber < 0) {\n                    blockNumber = 0;\n                }\n                return this.formatter.blockTag(blockNumber);\n            }\n            return this.formatter.blockTag(blockTag);\n        });\n    }\n    getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this._getResolver(name);\n            if (address == null) {\n                return null;\n            }\n            return new Resolver(this, address, name);\n        });\n    }\n    _getResolver(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Get the resolver from the blockchain\n            const network = yield this.getNetwork();\n            // No ENS...\n            if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"ENS\", network: network.name });\n            }\n            // keccak256(\"resolver(bytes32)\")\n            const transaction = {\n                to: network.ensAddress,\n                data: (\"0x0178b8bf\" + namehash(name).substring(2))\n            };\n            return this.formatter.callAddress(yield this.call(transaction));\n        });\n    }\n    resolveName(name) {\n        return __awaiter(this, void 0, void 0, function* () {\n            name = yield name;\n            // If it is already an address, nothing to resolve\n            try {\n                return Promise.resolve(this.formatter.address(name));\n            }\n            catch (error) {\n                // If is is a hexstring, the address is bad (See #694)\n                if (isHexString(name)) {\n                    throw error;\n                }\n            }\n            if (typeof (name) !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n            }\n            // Get the addr from the resovler\n            const resolver = yield this.getResolver(name);\n            if (!resolver) {\n                return null;\n            }\n            return yield resolver.getAddress();\n        });\n    }\n    lookupAddress(address) {\n        return __awaiter(this, void 0, void 0, function* () {\n            address = yield address;\n            address = this.formatter.address(address);\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n            const resolverAddress = yield this._getResolver(reverseName);\n            if (!resolverAddress) {\n                return null;\n            }\n            // keccak(\"name(bytes32)\")\n            let bytes = arrayify(yield this.call({\n                to: resolverAddress,\n                data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n            }));\n            // Strip off the dynamic string pointer (0x20)\n            if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n                return null;\n            }\n            bytes = bytes.slice(32);\n            // Not a length-prefixed string\n            if (bytes.length < 32) {\n                return null;\n            }\n            // Get the length of the string (from the length-prefix)\n            const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n            bytes = bytes.slice(32);\n            // Length longer than available data\n            if (length > bytes.length) {\n                return null;\n            }\n            const name = toUtf8String(bytes.slice(0, length));\n            // Make sure the reverse record matches the foward record\n            const addr = yield this.resolveName(name);\n            if (addr != address) {\n                return null;\n            }\n            return name;\n        });\n    }\n    perform(method, params) {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n    _startEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _stopEvent(event) {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n    _addEventListener(eventName, listener, once) {\n        const event = new Event(getEventTag(eventName), listener, once);\n        this._events.push(event);\n        this._startEvent(event);\n        return this;\n    }\n    on(eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n    }\n    once(eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n    }\n    emit(eventName, ...args) {\n        let result = false;\n        let stopped = [];\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) {\n                return true;\n            }\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n            result = true;\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n            return true;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return result;\n    }\n    listenerCount(eventName) {\n        if (!eventName) {\n            return this._events.length;\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n    listeners(eventName) {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n    off(eventName, listener) {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n        const stopped = [];\n        let found = false;\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) {\n                return true;\n            }\n            if (found) {\n                return true;\n            }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n    removeAllListeners(eventName) {\n        let stopped = [];\n        if (eventName == null) {\n            stopped = this._events;\n            this._events = [];\n        }\n        else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) {\n                    return true;\n                }\n                stopped.push(event);\n                return false;\n            });\n        }\n        stopped.forEach((event) => { this._stopEvent(event); });\n        return this;\n    }\n}\n//# sourceMappingURL=base-provider.js.map"]},"metadata":{},"sourceType":"module"}