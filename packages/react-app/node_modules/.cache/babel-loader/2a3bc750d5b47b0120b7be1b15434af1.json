{"ast":null,"code":"\"use strict\";\n\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore } from \"./keystore\";\n\nfunction decryptJsonWallet(json, password, progressCallback) {\n  if (isCrowdsaleWallet(json)) {\n    if (progressCallback) {\n      progressCallback(0);\n    }\n\n    const account = decryptCrowdsale(json, password);\n\n    if (progressCallback) {\n      progressCallback(1);\n    }\n\n    return Promise.resolve(account);\n  }\n\n  if (isKeystoreWallet(json)) {\n    return decryptKeystore(json, password, progressCallback);\n  }\n\n  return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\n\nfunction decryptJsonWalletSync(json, password) {\n  if (isCrowdsaleWallet(json)) {\n    return decryptCrowdsale(json, password);\n  }\n\n  if (isKeystoreWallet(json)) {\n    return decryptKeystoreSync(json, password);\n  }\n\n  throw new Error(\"invalid JSON wallet\");\n}\n\nexport { decryptCrowdsale, decryptKeystore, decryptKeystoreSync, encryptKeystore, isCrowdsaleWallet, isKeystoreWallet, getJsonWalletAddress, decryptJsonWallet, decryptJsonWalletSync };","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"AAAA;;AAKA,SAAS,OAAO,IAAI,gBAApB,QAA4C,aAA5C;AACA,SAAS,oBAAT,EAA+B,iBAA/B,EAAkD,gBAAlD,QAA0E,WAA1E;AACA,SAAS,OAAO,IAAI,eAApB,EAAqC,WAAW,IAAI,mBAApD,EAAyE,OAAO,IAAI,eAApF,QAA6I,YAA7I;;AAEA,SAAS,iBAAT,CAA2B,IAA3B,EAAyC,QAAzC,EAAmE,gBAAnE,EAAsG;AAClG,MAAI,iBAAiB,CAAC,IAAD,CAArB,EAA6B;AACzB,QAAI,gBAAJ,EAAsB;AAAE,MAAA,gBAAgB,CAAC,CAAD,CAAhB;AAAsB;;AAC9C,UAAM,OAAO,GAAG,gBAAgB,CAAC,IAAD,EAAO,QAAP,CAAhC;;AACA,QAAI,gBAAJ,EAAsB;AAAE,MAAA,gBAAgB,CAAC,CAAD,CAAhB;AAAsB;;AAC9C,WAAO,OAAO,CAAC,OAAR,CAAgB,OAAhB,CAAP;AACH;;AAED,MAAI,gBAAgB,CAAC,IAAD,CAApB,EAA4B;AACxB,WAAO,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,gBAAjB,CAAtB;AACH;;AAED,SAAO,OAAO,CAAC,MAAR,CAAe,IAAI,KAAJ,CAAU,qBAAV,CAAf,CAAP;AACH;;AAED,SAAS,qBAAT,CAA+B,IAA/B,EAA6C,QAA7C,EAAqE;AACjE,MAAI,iBAAiB,CAAC,IAAD,CAArB,EAA6B;AACzB,WAAO,gBAAgB,CAAC,IAAD,EAAO,QAAP,CAAvB;AACH;;AAED,MAAI,gBAAgB,CAAC,IAAD,CAApB,EAA4B;AACxB,WAAO,mBAAmB,CAAC,IAAD,EAAO,QAAP,CAA1B;AACH;;AAED,QAAM,IAAI,KAAJ,CAAU,qBAAV,CAAN;AACH;;AAED,SACI,gBADJ,EAGI,eAHJ,EAII,mBAJJ,EAKI,eALJ,EAOI,iBAPJ,EAQI,gBARJ,EASI,oBATJ,EAWI,iBAXJ,EAYI,qBAZJ","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore } from \"./keystore\";\nfunction decryptJsonWallet(json, password, progressCallback) {\n    if (isCrowdsaleWallet(json)) {\n        if (progressCallback) {\n            progressCallback(0);\n        }\n        const account = decryptCrowdsale(json, password);\n        if (progressCallback) {\n            progressCallback(1);\n        }\n        return Promise.resolve(account);\n    }\n    if (isKeystoreWallet(json)) {\n        return decryptKeystore(json, password, progressCallback);\n    }\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\nfunction decryptJsonWalletSync(json, password) {\n    if (isCrowdsaleWallet(json)) {\n        return decryptCrowdsale(json, password);\n    }\n    if (isKeystoreWallet(json)) {\n        return decryptKeystoreSync(json, password);\n    }\n    throw new Error(\"invalid JSON wallet\");\n}\nexport { decryptCrowdsale, decryptKeystore, decryptKeystoreSync, encryptKeystore, isCrowdsaleWallet, isKeystoreWallet, getJsonWalletAddress, decryptJsonWallet, decryptJsonWalletSync, };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}