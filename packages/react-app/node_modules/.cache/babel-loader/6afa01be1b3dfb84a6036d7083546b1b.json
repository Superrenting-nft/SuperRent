{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = exports.verifyHmac = exports.generateKey = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst isoCrypto = tslib_1.__importStar(require(\"@pedrouid/iso-crypto\"));\n\nconst encUtils = tslib_1.__importStar(require(\"enc-utils\"));\n\nconst utils_1 = require(\"@walletconnect/utils\");\n\nfunction generateKey(length) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const _length = (length || 256) / 8;\n\n    const bytes = isoCrypto.randomBytes(_length);\n    const result = utils_1.convertBufferToArrayBuffer(encUtils.arrayToBuffer(bytes));\n    return result;\n  });\n}\n\nexports.generateKey = generateKey;\n\nfunction verifyHmac(payload, key) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const cipherText = encUtils.hexToArray(payload.data);\n    const iv = encUtils.hexToArray(payload.iv);\n    const hmac = encUtils.hexToArray(payload.hmac);\n    const hmacHex = encUtils.arrayToHex(hmac, false);\n    const unsigned = encUtils.concatArrays(cipherText, iv);\n    const chmac = yield isoCrypto.hmacSha256Sign(key, unsigned);\n    const chmacHex = encUtils.arrayToHex(chmac, false);\n\n    if (encUtils.removeHexPrefix(hmacHex) === encUtils.removeHexPrefix(chmacHex)) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nexports.verifyHmac = verifyHmac;\n\nfunction encrypt(data, key, providedIv) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const _key = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(key));\n\n    const ivArrayBuffer = providedIv || (yield generateKey(128));\n    const iv = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(ivArrayBuffer));\n    const ivHex = encUtils.arrayToHex(iv, false);\n    const contentString = JSON.stringify(data);\n    const content = encUtils.utf8ToArray(contentString);\n    const cipherText = yield isoCrypto.aesCbcEncrypt(iv, _key, content);\n    const cipherTextHex = encUtils.arrayToHex(cipherText, false);\n    const unsigned = encUtils.concatArrays(cipherText, iv);\n    const hmac = yield isoCrypto.hmacSha256Sign(_key, unsigned);\n    const hmacHex = encUtils.arrayToHex(hmac, false);\n    return {\n      data: cipherTextHex,\n      hmac: hmacHex,\n      iv: ivHex\n    };\n  });\n}\n\nexports.encrypt = encrypt;\n\nfunction decrypt(payload, key) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    const _key = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(key));\n\n    if (!_key) {\n      throw new Error(\"Missing key: required for decryption\");\n    }\n\n    const verified = yield verifyHmac(payload, _key);\n\n    if (!verified) {\n      return null;\n    }\n\n    const cipherText = encUtils.hexToArray(payload.data);\n    const iv = encUtils.hexToArray(payload.iv);\n    const buffer = yield isoCrypto.aesCbcDecrypt(iv, _key, cipherText);\n    const utf8 = encUtils.arrayToUtf8(buffer);\n    let data;\n\n    try {\n      data = JSON.parse(utf8);\n    } catch (error) {\n      return null;\n    }\n\n    return data;\n  });\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decrypt = exports.encrypt = exports.verifyHmac = exports.generateKey = void 0;\nconst tslib_1 = require(\"tslib\");\nconst isoCrypto = tslib_1.__importStar(require(\"@pedrouid/iso-crypto\"));\nconst encUtils = tslib_1.__importStar(require(\"enc-utils\"));\nconst utils_1 = require(\"@walletconnect/utils\");\nfunction generateKey(length) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _length = (length || 256) / 8;\n        const bytes = isoCrypto.randomBytes(_length);\n        const result = utils_1.convertBufferToArrayBuffer(encUtils.arrayToBuffer(bytes));\n        return result;\n    });\n}\nexports.generateKey = generateKey;\nfunction verifyHmac(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const cipherText = encUtils.hexToArray(payload.data);\n        const iv = encUtils.hexToArray(payload.iv);\n        const hmac = encUtils.hexToArray(payload.hmac);\n        const hmacHex = encUtils.arrayToHex(hmac, false);\n        const unsigned = encUtils.concatArrays(cipherText, iv);\n        const chmac = yield isoCrypto.hmacSha256Sign(key, unsigned);\n        const chmacHex = encUtils.arrayToHex(chmac, false);\n        if (encUtils.removeHexPrefix(hmacHex) === encUtils.removeHexPrefix(chmacHex)) {\n            return true;\n        }\n        return false;\n    });\n}\nexports.verifyHmac = verifyHmac;\nfunction encrypt(data, key, providedIv) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _key = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(key));\n        const ivArrayBuffer = providedIv || (yield generateKey(128));\n        const iv = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(ivArrayBuffer));\n        const ivHex = encUtils.arrayToHex(iv, false);\n        const contentString = JSON.stringify(data);\n        const content = encUtils.utf8ToArray(contentString);\n        const cipherText = yield isoCrypto.aesCbcEncrypt(iv, _key, content);\n        const cipherTextHex = encUtils.arrayToHex(cipherText, false);\n        const unsigned = encUtils.concatArrays(cipherText, iv);\n        const hmac = yield isoCrypto.hmacSha256Sign(_key, unsigned);\n        const hmacHex = encUtils.arrayToHex(hmac, false);\n        return {\n            data: cipherTextHex,\n            hmac: hmacHex,\n            iv: ivHex,\n        };\n    });\n}\nexports.encrypt = encrypt;\nfunction decrypt(payload, key) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        const _key = encUtils.bufferToArray(utils_1.convertArrayBufferToBuffer(key));\n        if (!_key) {\n            throw new Error(\"Missing key: required for decryption\");\n        }\n        const verified = yield verifyHmac(payload, _key);\n        if (!verified) {\n            return null;\n        }\n        const cipherText = encUtils.hexToArray(payload.data);\n        const iv = encUtils.hexToArray(payload.iv);\n        const buffer = yield isoCrypto.aesCbcDecrypt(iv, _key, cipherText);\n        const utf8 = encUtils.arrayToUtf8(buffer);\n        let data;\n        try {\n            data = JSON.parse(utf8);\n        }\n        catch (error) {\n            return null;\n        }\n        return data;\n    });\n}\nexports.decrypt = decrypt;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}